{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/content.ts","webpack:///./src/ts/modules/API.ts","webpack:///./src/ts/modules/CenterPanel.ts","webpack:///./src/ts/modules/Colors.ts","webpack:///./src/ts/modules/DOM.ts","webpack:///./src/ts/modules/Download.ts","webpack:///./src/ts/modules/DownloadControl.ts","webpack:///./src/ts/modules/EVT.ts","webpack:///./src/ts/modules/FileName.ts","webpack:///./src/ts/modules/Filter.ts","webpack:///./src/ts/modules/InitHomePage.ts","webpack:///./src/ts/modules/InitPage.ts","webpack:///./src/ts/modules/InitPageBase.ts","webpack:///./src/ts/modules/InitPostListPage.ts","webpack:///./src/ts/modules/InitPostPage.ts","webpack:///./src/ts/modules/InitTagPage.ts","webpack:///./src/ts/modules/Lang.ts","webpack:///./src/ts/modules/Log.ts","webpack:///./src/ts/modules/Output.ts","webpack:///./src/ts/modules/PageType.ts","webpack:///./src/ts/modules/ProgressBar.ts","webpack:///./src/ts/modules/RightIcon.ts","webpack:///./src/ts/modules/SaveData.ts","webpack:///./src/ts/modules/SaveSettings.ts","webpack:///./src/ts/modules/SettingHTML.ts","webpack:///./src/ts/modules/Settings.ts","webpack:///./src/ts/modules/Store.ts","webpack:///./src/ts/modules/Tip.ts","webpack:///./src/ts/modules/TitleBar.ts","webpack:///./src/ts/modules/langText.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,2BAA2B;AAC3B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AAC4B;AACG;AACH;AACO;AACN;AACN;AACG;AAC1B;;;;;;;;;;;;;AClBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,MAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gFAAgF,OAAO;AACvF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wEAAwE,IAAI,UAAU,OAAO;AAC7F;AACA;AACA;AACA,qEAAqE,OAAO;AAC5E;AACA;AACA;AACe;;;;;;;;;;;;;ACxGf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8B;AACF;AACA;AACI;AAChC;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,0CAAI,mBAAmB;AACtF;AACA;AACA,wDAAwD,0CAAI,mBAAmB;AAC/E;AACA;AACA,iEAAiE,0CAAI,iBAAiB;AACtF;AACA;AACA,6EAA6E,0CAAI,sBAAsB;AACvG;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,0CAAI,iBAAiB;AACvD,8GAA8G,0CAAI,iBAAiB;AACnI,+BAA+B,0CAAI,iBAAiB;AACpD;AACA;AACA;AACA,gCAAgC,0CAAI,iBAAiB;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA,gCAAgC,wCAAG;AACnC,iBAAiB,4CAAK;AACtB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6CAA6C,wCAAG;AAChD;AACA;AACA,0CAA0C,0CAAI;AAC9C;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACuB;;;;;;;;;;;;;ACjIvB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;ACPlB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,KAAK;AACnE;AACA,6CAA6C,KAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;;;;;;;;;;;;;AC7Ef;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACA;AACE;AACQ;AACA;AACM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wCAAG,sBAAsB,wCAAG;AACrC;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,QAAQ,wDAAW;AACnB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB;AACA,wBAAwB,kDAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,0BAA0B,0CAAI;AAC9B;AACA;AACA;AACA,0BAA0B,0CAAI;AAC9B;AACA,gBAAgB,wCAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA;AACA;AACA;AACA,gBAAgB,wDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AC7HpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACA;AACI;AACJ;AACE;AACQ;AACJ;AACA;AACI;AACM;AAC5C;AACA;AACA,mCAAmC;AACnC,qDAAqD;AACrD,2BAA2B;AAC3B,6BAA6B;AAC7B,2BAA2B;AAC3B,4BAA4B;AAC5B,4BAA4B;AAC5B,0DAA0D;AAC1D;AACA;AACA,kCAAkC;AAClC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,UAAU,YAAY,yBAAyB,QAAQ;AAC1E,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,OAAO,0CAAI;AAC9B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yCAAyC,4CAAK;AAC9C,QAAQ,wDAAW;AACnB;AACA;AACA,kCAAkC,0CAAI;AACtC;AACA;AACA,gCAAgC,4CAAK;AACrC,YAAY,wCAAG,MAAM,wCAAG;AACxB;AACA,kCAAkC,0CAAI;AACtC,YAAY,wCAAG,SAAS,0CAAI;AAC5B,YAAY,kDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0CAAI,+DAA+D;;AAE7E;AACA,oEAAoE,8CAAM,OAAO,KAAK,0CAAI,kBAAkB;AAC5G,0EAA0E,KAAK,0CAAI,kBAAkB;AACrG,mEAAmE,8CAAM,MAAM,KAAK,0CAAI,kBAAkB;AAC1G,8DAA8D,8CAAM,QAAQ,KAAK,0CAAI,kBAAkB;AACvG;AACA;AACA;AACA,MAAM,0CAAI;AACV,2CAA2C,0CAAI,kBAAkB;AACjE;AACA;AACA;AACA,mBAAmB,wCAAG;AACtB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY,4CAAK;AACjB,yBAAyB,0CAAI;AAC7B;AACA;AACA,0BAA0B,4CAAK;AAC/B;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACA,mCAAmC,8CAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,YAAY,4CAAK;AACjB,kCAAkC,4CAAK;AACvC;AACA;AACA,QAAQ,wDAAW;AACnB;AACA;AACA;AACA;AACA;AACA,6BAA6B,8CAAI;AACjC,8BAA8B,4CAAK;AACnC,YAAY,kDAAQ;AACpB;AACA;AACA,4BAA4B,4CAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4CAAK,qBAAqB,4CAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAAK;AAC7C,kDAAkD;AAClD;AACA;AACA;AACA;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA,8BAA8B,0CAAI;AAClC,QAAQ,wCAAG,KAAK,0CAAI;AACpB;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAK;AACtB,0CAA0C;AAC1C,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B,gBAAgB,kDAAQ;AACxB,sCAAsC,0CAAI;AAC1C,gBAAgB,wCAAG,SAAS,0CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,QAAQ,kDAAQ;AAChB,8BAA8B,0CAAI;AAClC,QAAQ,wCAAG,OAAO,0CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAK;AACnC;AACA;AACA;AACA;AACA;AACA,4DAA4D,4CAAK;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB,KAAK,4CAAK,eAAe;AAC/D,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAQ;AACxB;AACA;AACA;AACA;;;;;;;;;;;;;AClWA;AAAA;AAAA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;;;;;;;;;;;;;ACvCf;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACM;AACF;AACF;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAAI;AACzB;AACA,6BAA6B,MAAM,EAAE,KAAK,EAAE,MAAM;AAClD;AACA;AACA,cAAc,GAAG;AACjB;AACA;AACA,aAAa;AACb,cAAc,MAAM;AACpB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB;AACA;AACA,aAAa;AACb,cAAc,IAAI;AAClB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB;AACA;AACA,aAAa;AACb,cAAc,IAAI;AAClB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB;AACA;AACA,aAAa;AACb,cAAc,IAAI;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA,8DAA8D,IAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB,yBAAyB,0CAAI;AAC7B;AACA;AACA;AACA,uBAAuB,4CAAK;AAC5B,uBAAuB,YAAY;AACnC,yBAAyB,4CAAK;AAC9B;AACA;AACA,8DAA8D,YAAY;AAC1E;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA,wDAAwD,IAAI;AAC5D;AACA;AACA;AACA,wDAAwD,IAAI;AAC5D;AACA;AACA;AACA;AACA,mDAAmD,gBAAgB,IAAI,aAAa;AACpF;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACoB;;;;;;;;;;;;;AC5JpB;AAAA;AAAA;AAAA;AAAA;AAAkC;AACN;AACA;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAI;AAC3B;AACA;AACA;AACA,eAAe,8CAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAI;AACvB;AACA;AACA,mBAAmB,8CAAI;AACvB;AACA;AACA;AACA,kCAAkC,8CAAI;AACtC;AACA;AACA,8BAA8B,8CAAI;AAClC;AACA;AACA,iCAAiC,8CAAI;AACrC;AACA;AACA;AACA,+BAA+B,8CAAI;AACnC;AACA;AACA;AACA,aAAa,8CAAI;AACjB;AACA;AACA;AACA;AACA,2CAA2C,8CAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;ACxGlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACI;AACN;AACkB;AAClB;AAC5B,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,qBAAqB,8CAAM,OAAO,0CAAI;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,wCAAG;AAC7B;AACA;AACA,yBAAyB,wCAAG;AAC5B;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACwB;;;;;;;;;;;;;AC7BxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACU;AACQ;AACQ;AACV;AACE;AAC9C;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC,YAAY,wCAAG,MAAM,wCAAG;AACxB;AACA,SAAS;AACT;AACA;AACA,gBAAgB,kDAAQ;AACxB;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA,2BAA2B,kEAAgB;AAC3C;AACA,2BAA2B,0DAAY;AACvC;AACA,2BAA2B,wDAAW;AACtC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8B;AACI;AACN;AACM;AACF;AACJ;AACA;AACM;AACI;AACA;AACtC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,QAAQ,wCAAG;AACX,QAAQ,wCAAG;AACX;AACA;AACA;AACA,QAAQ,wCAAG,qBAAqB,8CAAM,OAAO,0CAAI;AACjD;AACA,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,oBAAoB,0CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8CAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf;AACA;AACA,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA;AACA,kCAAkC,8CAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4CAAK;AAClB,yBAAyB,0CAAI;AAC7B;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,QAAQ,wCAAG;AACX,QAAQ,wCAAG,SAAS,0CAAI;AACxB,QAAQ,kDAAQ;AAChB;AACA,QAAQ,8CAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA,oBAAoB,4CAAK;AACzB,QAAQ,wCAAG,KAAK,0CAAI,mBAAmB,4CAAK;AAC5C,QAAQ,wCAAG,KAAK,0CAAI;AACpB,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,QAAQ,kDAAQ;AAChB,QAAQ,wCAAG,OAAO,0CAAI;AACtB,qBAAqB,0CAAI;AACzB;AACA;AACwB;;;;;;;;;;;;;ACpIxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACI;AACN;AACkB;AAClB;AAC5B,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,qBAAqB,8CAAM,OAAO,0CAAI;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,wCAAG;AAC7B;AACA;AACA,yBAAyB,wCAAG,mBAAmB,wCAAG;AAClD;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AAC4B;;;;;;;;;;;;;AC7B5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACI;AACN;AACkB;AAClB;AACI;AAChC,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,qBAAqB,8CAAM,OAAO,0CAAI;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gDAAgD,0CAAI;AACpD;AACA;AACA,YAAY,4CAAK;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B,wCAAG,SAAS,wCAAG;AAC1C;AACA;AACA;AACwB;;;;;;;;;;;;;ACtCxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACI;AACN;AACkB;AAClB;AAC5B,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,qBAAqB,8CAAM,OAAO,0CAAI;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,wCAAG;AAC7B;AACA;AACA,yBAAyB,wCAAG,sBAAsB,wCAAG,6BAA6B,wCAAG;AACrF;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACuB;;;;;;;;;;;;;AC7BvB;AAAA;AAAA;AAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,sBAAsB,kDAAQ;AAC9B,2DAA2D;AAC3D;AACA;AACA;AACA;AACgB;;;;;;;;;;;;;ACrChB;AAAA;AAAA;AAAA;AAAA;AAA4B;AACA;AACI;AAChC;AACA;AACA;AACA,qDAAqD;AACrD,4BAA4B;AAC5B,sDAAsD;AACtD;AACA;AACA,gCAAgC,wCAAG;AACnC,gBAAgB,4CAAK;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;;;;;;;;;;;;;ACzEf;AAAA;AAAA;AAAA;AAC4B;AACE;AAC9B;AACA;AACA,yDAAyD;AACzD,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0CAAI,eAAe;AACzD,+BAA+B,0CAAI,iBAAiB;AACpD;AACA;AACA,uCAAuC,0CAAI,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,0CAAI;AACpE;AACA;AACA,oEAAoE,0CAAI;AACxE,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAC4B;AAC5B;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;ACnEpB;AAAA;AAAA;AAAA;AAAA;AAAgC;AACJ;AACE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0CAAI,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,MAAM,MAAM,MAAM,MAAM,MAAM,GAAG,0CAAI,gBAAgB,MAAM,MAAM;AACvG;AACA;AACA;AACA,oBAAoB,wCAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4CAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4CAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B,GAAG,8BAA8B;AACpG,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACuB;;;;;;;;;;;;;ACjFvB;AAAA;AAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAkC;AACF;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAM,QAAQ,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK;AACb;AACA;AACA,YAAY,8CAAM;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAM;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AC5KpB;AAAA;AAAA;AAAA;AACA;AAC4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG,wBAAwB,2BAA2B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACwB;;;;;;;;;;;;;AChLxB;AAAA;AAA8B;AAC9B;AACA;AACA,yBAAyB,0CAAI,eAAe;AAC5C,yBAAyB,0CAAI,eAAe;AAC5C,yBAAyB,0CAAI,eAAe;AAC5C;AACA;AACA;;AAEA;AACA;AACA,0EAA0E,0CAAI,mBAAmB,2BAA2B,IAAI,0CAAI,iBAAiB;AACrJ,oDAAoD;AACpD;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA,wCAAwC,0CAAI,iBAAiB;;AAE7D;AACA;AACA,gCAAgC,0CAAI,eAAe,MAAM;;AAEzD;AACA;AACA,gCAAgC,0CAAI,eAAe,MAAM;;AAEzD;AACA;AACA,gCAAgC,0CAAI,eAAe,MAAM;;AAEzD;AACA;AACA,gCAAgC,0CAAI,iBAAiB,MAAM;;AAE3D;AACA;AACA,gCAAgC,0CAAI,iBAAiB,MAAM;;AAE3D;AACA;AACA,gCAAgC,0CAAI,eAAe,MAAM;AACzD;;AAEA;AACA,wCAAwC,0CAAI,iBAAiB;;AAE7D;AACA;AACA,gCAAgC,0CAAI,iBAAiB,MAAM;;AAE3D;AACA;AACA,gCAAgC,0CAAI,iBAAiB,MAAM;AAC3D;;;AAGA;AACA,wCAAwC,0CAAI,mBAAmB,MAAM,M;AACrE;AACA;AACA;AACA;;AAEA,QAAQ,0CAAI;AACZ,qFAAqF,0CAAI;AACzF;AACA;;AAEA;AACA,wCAAwC,0CAAI,mBAAmB,MAAM,M;AACrE;AACA;AACA;AACA;;AAEA,QAAQ,0CAAI;AACZ;AACA;AACA;;AAEA;AACA,0DAA0D,0CAAI,qBAAqB,IAAI,0CAAI,mBAAmB;;AAE9G;AACA;AACA;;AAEA,QAAQ,0CAAI;AACZ;AACA;AACA;;AAEA;AACA,wCAAwC,0CAAI,uBAAuB,MAAM,M;AACzE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0DAA0D,0CAAI,sBAAsB,IAAI,0CAAI,kBAAkB;AAC9G,8FAA8F,GAAG;AACjG;AACA;AACA;AACA,wBAAwB,GAAG,GAAG,GAAG;AACjC,wBAAwB,MAAM,GAAG,MAAM;AACvC,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,IAAI,GAAG,IAAI;AACnC,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,IAAI,GAAG,IAAI;AACnC,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,IAAI,GAAG,IAAI;AACnC;AACA,YAAY;AACZ;AACA;AACA;AACA,gBAAgB,0CAAI;AACpB;AACA,2BAA2B;AAC3B;AACA,0BAA0B,GAAG;AAC7B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,IAAI;AAC9B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,MAAM;AAChC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,QAAQ,0CAAI;AACZ;;AAEA;;AAEA;AACA,0DAA0D,0CAAI,iBAAiB,IAAI,0CAAI,mBAAmB;AAC1G;AACA;;AAEA;AACA,0DAA0D,0CAAI,oBAAoB,IAAI,0CAAI,mBAAmB;AAC7G;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACe,uEAAQ,EAAC;;;;;;;;;;;;;AC/KxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACA;AACM;AACJ;AACgB;AACT;AACrC;AACA;AACA;AACA;AACA,mDAAmD;AACnD,oBAAoB,wCAAG,iBAAiB,oDAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA,QAAQ,wCAAG,sBAAsB,8CAAM,QAAQ,0CAAI;AACnD,YAAY,wCAAG,MAAM,wCAAG;AACxB,SAAS;AACT;AACA;AACA;AACA,6CAA6C,wCAAG;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4DAA4D,MAAM;AAClE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4DAA4D,MAAM;AAClE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG,wBAAwB,2BAA2B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,aAAa;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACgB;;;;;;;;;;;;;ACnLhB;AAAA;AAAA;AAAA;AAC4B;AAC5B;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG,oBAAoB,wCAAG;AAC1D;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiB;;;;;;;;;;;;AClFjB;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AACsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kDAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA;AACA,gCAAgC,MAAM,GAAG,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AC3FpB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,sBAAsB;AACtB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,eAAe;AACf,yBAAyB;AACzB,eAAe;AACfkBAAkB;AAClB,mBAAmB;AACnB,oBAAoB;AACpB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,0BAA0B;AAC1B,gDAAgD;AAChD,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,cAAc;AACd,yBAAyB;AACzB,eAAe;AACf;AACA;AACA,kBAAkB;AAClB,mBAAmB;AACnB,gBAAgB;AAChB,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB,sCAAsC;AACtC,kBAAkB;AAClB;AACA;AACA,iBAAiB;AACjB,kBAAkB;AAClB,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,uBAAuB;AACvB,2BAA2B;AAC3B,yDAAyD;AACzD,uBAAuB;AACvB;AACA;AACA,0BAA0B;AAC1B,4BAA4B;AAC5B,4CAA4C;AAC5C,0BAA0B;AAC1B;AACA;AACA,iBAAiB;AACjB,WAAW;AACX,wBAAwB;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,WAAW;AACX,mBAAmB;AACnB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,WAAW;AACX,qBAAqB;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,WAAW;AACX,eAAe;AACf,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc;AACd,4BAA4B;AAC5B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ,EAAE,KAAK,EAAE,GAAG;AACnD,kCAAkC,QAAQ,EAAE,KAAK,EAAE,GAAG;AACtD,yDAAyD,QAAQ,EAAE,KAAK,EAAE,GAAG;AAC7E,+BAA+B,QAAQ,EAAE,KAAK,EAAE,GAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,GAAG,EAAE,IAAI,WAAW,GAAG,KAAK,OAAO;AAC5E,4DAA4D,GAAG,EAAE,IAAI,OAAO,GAAG,IAAI,OAAO;AAC1F,2GAA2G,GAAG,EAAE,IAAI,wBAAwB,GAAG,KAAK,OAAO;AAC3J,yCAAyC,GAAG,EAAE,IAAI,WAAW,GAAG,KAAK,OAAO;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,oBAAoB;AACpB,kDAAkD;AAClD,mBAAmB;AACnwBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB,WAAW;AACX,sBAAsB;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,wBAAwB;AACxB,2BAA2B;AAC3B,qBAAqB;AACrB;AACA;AACA,cAAc;AACd,gBAAgB;AAChB,gBAAgB;AAChB,cAAc;AACdcAAc;AACd,gBAAgB;AAChB,qBAAqB;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,cAAc;AACd,yBAAyB;AACzB,eAAe;AACf;AACA;AACA,eAAe;AACf,WAAW;AACX,eAAe;AACf,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACoB","file":"content.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/ts/content.ts\");\n","/*\r\n * project: Pixiv Fanbox Downloader\r\n * author:  xuejianxianzun; 雪见仙尊\r\n * license: GPL-3.0-or-later; http://www.gnu.org/licenses/gpl-3.0.txt\r\n * Github： https://github.com/xuejianxianzun/PixivFanboxDownloader\r\n * Releases: https://github.com/xuejianxianzun/PixivFanboxDownloader/releases\r\n * Wiki:    https://github.com/xuejianxianzun/PixivFanboxDownloader/wiki\r\n * Website: https://pixiv.download/\r\n * E-mail:  xuejianxianzun@gmail.com\r\n * QQ group:  853021998\r\n */\r\nimport './modules/PageType';\r\nimport './modules/CenterPanel';\r\nimport './modules/InitPage';\r\nimport './modules/DownloadControl';\r\nimport './modules/RightIcon';\r\nimport './modules/Tip';\r\nimport './modules/Output';\r\n// import './modules/Support'\r\n","class API {\r\n    // 检查给定的字符串解析为数字后，是否大于 0\r\n    static checkNumberGreater0(arg) {\r\n        let num = parseInt(arg);\r\n        // 空值会是 NaN\r\n        if (!isNaN(num) && num > 0) {\r\n            // 符合条件\r\n            return {\r\n                result: true,\r\n                value: num,\r\n            };\r\n        }\r\n        // 不符合条件\r\n        return {\r\n            result: false,\r\n            value: 0,\r\n        };\r\n    }\r\n    // 从 url 中获取指定的查询字段的值\r\n    // 注意：返回值经过 encodeURIComponent 编码！\r\n    static getURLSearchField(url, query) {\r\n        const result = new URL(url).searchParams.get(query);\r\n        if (result !== null) {\r\n            return encodeURIComponent(result);\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    // 从 URL 中获取指定路径名的值，适用于符合 RESTful API 风格的路径\r\n    // 如 https://www.pixiv.net/fanbox/creator/1499614/post/867418\r\n    // 把路径用 / 分割，查找 key 所在的位置，后面一项就是它的 value\r\n    static getURLPathField(query) {\r\n        const pathArr = location.pathname.split('/');\r\n        const index = pathArr.indexOf(query);\r\n        if (index > 0) {\r\n            return pathArr[index + 1];\r\n        }\r\n        throw new Error(`getURLPathField ${query} failed!`);\r\n    }\r\n    // 组装 url 的查询参数。当该参数有值时，将其添加到 url 里\r\n    static assembleURL(baseURL, args) {\r\n        const temp = new URL(baseURL);\r\n        for (const [key, value] of Object.entries(args)) {\r\n            value && temp.searchParams.append(key, value.toString());\r\n        }\r\n        return temp.toString();\r\n    }\r\n    // 通用的请求流程\r\n    // 发送 get 请求，返回 json 数据，抛出异常\r\n    static request(url) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, {\r\n                method: 'get',\r\n                credentials: 'include',\r\n            })\r\n                .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                else {\r\n                    // 第一种异常，请求成功但状态不对\r\n                    reject({\r\n                        status: response.status,\r\n                        statusText: response.statusText,\r\n                    });\r\n                }\r\n            })\r\n                .then((data) => {\r\n                resolve(data);\r\n            })\r\n                .catch((error) => {\r\n                // 第二种异常，请求失败\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    static async getPostListSupporting(limit = 10, maxPublishedDatetime = '', maxId = '') {\r\n        const baseURL = 'https://fanbox.pixiv.net/api/post.listSupporting';\r\n        const url = this.assembleURL(baseURL, {\r\n            limit,\r\n            maxPublishedDatetime,\r\n            maxId,\r\n        });\r\n        return this.request(url);\r\n    }\r\n    static async getPostListByUser(userId, limit = 10, maxPublishedDatetime = '', maxId = '') {\r\n        const baseURL = `https://fanbox.pixiv.net/api/post.listCreator?userId=${userId}`;\r\n        const url = this.assembleURL(baseURL, {\r\n            limit,\r\n            maxPublishedDatetime,\r\n            maxId,\r\n        });\r\n        return this.request(url);\r\n    }\r\n    static async getTagPostListByUser(userId, tag) {\r\n        const url = `https://fanbox.pixiv.net/api/post.listTagged?tag=${tag}&userId=${userId}`;\r\n        return this.request(url);\r\n    }\r\n    static async getPost(postId) {\r\n        const url = `https://fanbox.pixiv.net/api/post.info?postId=${postId}`;\r\n        return this.request(url);\r\n    }\r\n}\r\nexport { API };\r\n","// 用户界面\r\nimport { lang } from './Lang';\r\nimport { EVT } from './EVT';\r\nimport { DOM } from './DOM';\r\nimport { store } from './Store';\r\n// 中间面板\r\nclass CenterPanel {\r\n    constructor() {\r\n        this.centerPanel = document.createElement('div'); // 中间面板\r\n        this.addCenterPanel();\r\n        this.bindEvents();\r\n    }\r\n    // 添加中间面板\r\n    addCenterPanel() {\r\n        const centerPanelHTML = `\n      <div class=\"centerWrap\">\n      <div class=\"centerWrap_head\">\n      <p class=\"centerWrap_title blue\">Pixiv Fanbox Downloader</p>\n      <div class=\"btns\">\n      <a class=\"has_tip centerWrap_top_btn update\" data-tip=\"${lang.transl('_newver')}\" href=\"\" target=\"_blank\">\n      <svg t=\"1574401457339\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4736\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\"><defs><style type=\"text/css\"></style></defs><path d=\"M894.72 795.477333l-85.418667-85.418667c0.128-0.170667 0.170667-0.341333 0.298667-0.512l-158.890667-158.890667c0.042667-0.597333 37.248-37.248 37.248-37.248l178.773333 0 1.706667-1.493333c-0.853333-196.736-160.426667-356.053333-357.418667-356.053333-72.704 0-140.202667 22.016-196.650667 59.306667L228.949333 129.664C307.968 71.466667 405.333333 36.650667 511.018667 36.650667c263.296 0 476.757333 213.461333 476.757333 476.714667C987.776 619.093333 952.96 716.416 894.72 795.477333zM369.493333 476.117333c-0.042667 0.597333-37.248 37.248-37.248 37.248l-178.773333 0c0 197.461333 160.085333 357.546667 357.546667 357.546667 72.192 0 139.093333-21.76 195.285333-58.538667l85.589333 85.589333c-78.848 57.685333-175.701333 92.117333-280.874667 92.117333-263.296 0-476.757333-213.461333-476.757333-476.757333 0-105.173333 34.474667-202.069333 92.16-280.874667l85.589333 85.589333C211.925333 318.208 211.882667 318.336 211.797333 318.464L369.493333 476.117333z\" p-id=\"4737\"></path></svg>\n      </a>\n      <a class=\"has_tip centerWrap_top_btn\" data-tip=\"${lang.transl('_github')}\" href=\"https://github.com/xuejianxianzun/PixivFanboxDownloader\" target=\"_blank\">\n      <svg t=\"1574401005111\" class=\"icon\" widht=\"16\" height=\"16\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"2594\" xmlns:xlink=\"http://www.w3.org/1999/xlink><defs><style type=\"text/css\"></style></defs><path d=\"M0 520.886c0-69.368 13.51-135.697 40.498-199.02 26.987-63.323 63.322-117.826 109.006-163.51 45.65-45.65 100.154-81.985 163.51-109.006A502.289 502.289 0 0 1 512 8.92c69.335 0 135.663 13.477 198.986 40.497 63.356 26.988 117.86 63.323 163.51 109.007 45.684 45.65 82.02 100.154 109.006 163.51A502.289 502.289 0 0 1 1024 520.852c0 111.318-32.504 211.472-97.511 300.494-64.975 88.989-148.48 150.825-250.484 185.476-5.351 0-9.348-0.99-11.99-2.973-2.676-1.982-4.196-3.997-4.526-6.012a59.458 59.458 0 0 1-0.495-8.984 7.663 7.663 0 0 1-0.991-3.006v-128.99c0-40.63-14.336-75.314-43.008-103.986 76.667-13.345 134.011-41.819 171.999-85.487 37.987-43.669 57.013-96.52 57.013-158.522 0-58.005-18.663-108.346-56.022-150.99 13.345-42.678 11-87.668-6.97-135.003-18.697-1.322-39.011 1.85-61.01 9.513-22 7.663-38.318 14.831-49.02 21.47-10.637 6.673-20.316 13.016-28.97 19.027-38.68-10.669-81.854-16.02-129.486-16.02-47.7 0-90.509 5.351-128.529 16.02-7.333-5.35-15.855-11.164-25.5-17.507-9.68-6.342-26.493-14.005-50.507-22.99-23.982-9.018-45.65-12.85-65.008-11.495-18.663 47.996-20.645 93.646-5.979 136.984-36.665 42.678-54.998 92.986-54.998 150.99 0 62.002 18.663 114.689 55.99 157.994 37.326 43.339 94.67 72.01 171.998 86.016a142.303 142.303 0 0 0-39.969 70.029c-56.683 13.972-96.355 3.963-119.015-30.06-42.017-61.308-79.674-83.307-113.003-65.965-4.69 4.657-3.997 9.48 1.982 14.501 6.012 4.988 14.996 11.66 27.02 19.985 11.99 8.357 20.976 17.507 26.987 27.515 0.661 1.322 2.51 6.177 5.517 14.502a831.917 831.917 0 0 0 8.985 23.981c2.973 7.663 8.654 16.186 17.011 25.5 8.324 9.349 18.003 17.178 29.003 23.52 11 6.309 26.161 11 45.485 14.006 19.324 2.972 41.323 3.138 65.998 0.495v100.484c0 0.991-0.165 2.643-0.495 5.021-0.33 2.312-0.991 3.964-1.982 4.955-0.991 1.024-2.345 2.015-4.03 3.039a12.52 12.52 0 0 1-6.474 1.486c-2.676 0-6.012-0.33-10.009-0.99-101.343-35.345-183.825-97.182-247.51-185.51C31.842 731.037 0 631.577 0 520.92z\" p-id=\"2595\"></path></svg>\n      </a>\n      <a class=\"has_tip centerWrap_top_btn wiki_url\" data-tip=\"${lang.transl('_wiki')}\" href=\"https://github.com/xuejianxianzun/PixivFanboxDownloader/wiki\" target=\"_blank\">\n      <svg t=\"1574400169015\" class=\"icon\" widht=\"16\" height=\"16\" viewBox=\"0 0 1088 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"1872\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"17\" height=\"16\"><defs><style type=\"text/css\"></style></defs><path d=\"M1044.286732 3.51978A1138.616836 1138.616836 0 0 0 618.841322 58.172364a198.963565 198.963565 0 0 0-26.814324 10.815324V1023.936004l0.895944-0.383976a979.52278 979.52278 0 0 1 443.236298-68.411724 47.741016 47.741016 0 0 0 51.580776-43.261296V50.172864a47.165052 47.165052 0 0 0-43.453284-46.653084z m-74.299356 632.15249h-224.369977V541.470158h224.369977v94.202112z m0-231.921504h-224.369977V309.484657h224.369977v94.266109zM469.154678 58.172364A1138.296856 1138.296856 0 0 0 43.645272 3.455784 47.421036 47.421036 0 0 0 0 50.172864V908.103244a46.653084 46.653084 0 0 0 15.35904 34.493844 48.060996 48.060996 0 0 0 36.285732 12.415224 980.610712 980.610712 0 0 1 443.300294 68.347728l0.895944 0.575964V68.7957a202.099369 202.099369 0 0 0-26.686332-10.751328zM351.146053 635.800262H126.776076V541.59815h224.369977v94.202112z m0-231.921504H126.776076V309.612649h224.369977v94.266109z\" p-id=\"1873\"></path></svg>\n      </a>\n        <div class=\"has_tip centerWrap_top_btn centerWrap_close\" data-tip=\"${lang.transl('_快捷键切换显示隐藏')}\">\n        <svg t=\"1574392276519\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"1123\" data-spm-anchor-id=\"a313x.7781069.0.i0\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"14\" height=\"14\"><defs><style type=\"text/css\"></style></defs><path d=\"M521.693867 449.297067L111.4112 39.0144a51.2 51.2 0 1 0-72.430933 72.362667l410.282666 410.3168-410.282666 410.3168a51.2 51.2 0 1 0 72.3968 72.3968l410.3168-410.282667 410.3168 410.282667a51.2 51.2 0 1 0 72.3968-72.362667l-410.282667-410.350933 410.282667-410.282667a51.2 51.2 0 1 0-72.3968-72.3968l-410.282667 410.282667z\" p-id=\"1124\"></path></svg>\n        </div>\n      </div>\n      </div>\n\n      <div class=\"centerWrap_con\">\n      <slot data-name=\"form\"></slot>\n      </div>\n\n      <div class=\"gray1 bottom_help_bar\"> \n      <span class=\"showDownTip\">${lang.transl('_常见问题')}</span>\n      <a class=\"wiki2\" href=\"https://github.com/xuejianxianzun/PixivFanboxDownloader/wiki\" target=\"_blank\"> ${lang.transl('_wiki')}</a>\n      <span id=\"resetOption\">${lang.transl('_重置设置')}</span>\n      <a id=\"zanzhu\" class=\"wiki2 patronText\" href=\"https://afdian.net/@xuejianxianzun\" target=\"_blank\">通过“爱发电”网站支持我</a>\n      <a id=\"patreon\" class=\"wiki2 patronText\" href=\"https://www.patreon.com/xuejianxianzun\" target=\"_blank\">Become a patron</a>\n      <br>\n      <p class=\"downTip tip\"> ${lang.transl('_下载说明')}</p>\n      </div>\n\n      </div>\n      `;\r\n        document.body.insertAdjacentHTML('beforeend', centerPanelHTML);\r\n        this.centerPanel = document.querySelector('.centerWrap');\r\n        const userLang = document.documentElement.lang;\r\n        if (['zh', 'zh-CN', 'zh-Hans'].includes(userLang)) {\r\n            document.getElementById('zanzhu').style.display = 'inline-block';\r\n        }\r\n        else {\r\n            document.getElementById('patreon').style.display = 'inline-block';\r\n        }\r\n    }\r\n    // 绑定中间面板上的事件\r\n    bindEvents() {\r\n        // 监听点击扩展图标的消息，开关中间面板\r\n        chrome.runtime.onMessage.addListener((msg) => {\r\n            if (msg.msg === 'click_icon') {\r\n                if (this.centerPanel.style.display === 'block') {\r\n                    this.close();\r\n                }\r\n                else {\r\n                    this.show();\r\n                }\r\n            }\r\n        });\r\n        // 关闭按钮\r\n        document\r\n            .querySelector('.centerWrap_close')\r\n            .addEventListener('click', () => {\r\n            this.close();\r\n        });\r\n        // 使用快捷键 Alt + x 切换中间面板显示隐藏\r\n        window.addEventListener('keydown', (ev) => {\r\n            if (ev.altKey && ev.keyCode === 88) {\r\n                const nowDisplay = this.centerPanel.style.display;\r\n                if (nowDisplay === 'block') {\r\n                    this.close();\r\n                }\r\n                else {\r\n                    this.show();\r\n                }\r\n            }\r\n        }, false);\r\n        // 点击右侧图标时，显示\r\n        window.addEventListener(EVT.events.clickRightIcon, () => {\r\n            this.show();\r\n        });\r\n        // 开始抓取作品时，隐藏\r\n        window.addEventListener(EVT.events.crawlStart, () => {\r\n            this.close();\r\n        });\r\n        // 抓取完作品详细数据时，显示\r\n        window.addEventListener(EVT.events.crawlFinish, () => {\r\n            if (!store.states.quickDownload) {\r\n                this.show();\r\n            }\r\n        });\r\n        // 显示常见问题\r\n        document\r\n            .querySelector('.showDownTip')\r\n            .addEventListener('click', () => DOM.toggleEl(document.querySelector('.downTip')));\r\n        // 重置设置\r\n        document.getElementById('resetOption').addEventListener('click', () => {\r\n            const result = window.confirm(lang.transl('_是否重置设置'));\r\n            if (result) {\r\n                EVT.fire(EVT.events.resetOption);\r\n            }\r\n        });\r\n    }\r\n    // 显示中间区域\r\n    show() {\r\n        this.centerPanel.style.display = 'block';\r\n        EVT.fire(EVT.events.showCenterPanel);\r\n    }\r\n    // 隐藏中间区域\r\n    close() {\r\n        this.centerPanel.style.display = 'none';\r\n        EVT.fire(EVT.events.hideCenterPanel);\r\n    }\r\n}\r\nconst centerPanel = new CenterPanel();\r\nexport { centerPanel };\r\n","// 颜色\r\nclass Colors {\r\n}\r\nColors.blue = '#0ea8ef';\r\nColors.green = '#14ad27';\r\nColors.red = '#f33939';\r\nColors.yellow = '#e49d00';\r\nexport { Colors };\r\n","// DOM 操作类\r\n// 保存公用的 DOM 操作方法，以及从 DOM 中获取数据的 API\r\nclass DOM {\r\n    // 切换 DOM 元素的可见性\r\n    static toggleEl(el) {\r\n        el.style.display = el.style.display === 'block' ? 'none' : 'block';\r\n    }\r\n    // 将元素插入到页面顶部\r\n    /*\r\n    newindex-inner 是在未登录时的用户投稿列表页面使用的\r\n    layout-body 是在未登录时的搜索页使用的\r\n    */\r\n    static insertToHead(el) {\r\n        const insertPoint = document.body.querySelector('#root');\r\n        if (insertPoint) {\r\n            insertPoint.insertAdjacentElement('afterbegin', el);\r\n        }\r\n        return el;\r\n    }\r\n    static getUserId() {\r\n        const Reg = /creator\\/(\\d*)?/;\r\n        const testString = [location.href, document.head.innerHTML];\r\n        for (const string of testString) {\r\n            const result = Reg.exec(string);\r\n            if (result && result.length > 1) {\r\n                return result[1];\r\n            }\r\n        }\r\n        throw new Error('getUserId failed!');\r\n    }\r\n    // 动态添加 css 样式\r\n    static addStyle(css) {\r\n        const e = document.createElement('style');\r\n        e.innerHTML = css;\r\n        document.body.append(e);\r\n    }\r\n    // 寻找 slot，本程序使用的 slot 都要有 data-name 属性\r\n    static findSlot(name) {\r\n        const slot = document.querySelector(`slot[data-name=${name}]`);\r\n        if (!slot) {\r\n            throw new Error(`No such slot: ${name}`);\r\n        }\r\n        return slot;\r\n    }\r\n    // 使用指定的插槽\r\n    static useSlot(name, element) {\r\n        const slot = this.findSlot(name);\r\n        if (typeof element === 'string') {\r\n            // 插入字符串形式的元素\r\n            const wrap = document.createElement('div');\r\n            wrap.innerHTML = element;\r\n            const el = wrap.children[0];\r\n            slot.appendChild(el);\r\n            return el;\r\n        }\r\n        else {\r\n            // 插入 html 元素\r\n            slot.appendChild(element);\r\n            return element;\r\n        }\r\n    }\r\n    // 清空指定的插槽\r\n    static clearSlot(name) {\r\n        this.findSlot(name).innerHTML = '';\r\n    }\r\n    static addBtn(slot, bg = '', text = '', attr = []) {\r\n        const e = document.createElement('button');\r\n        e.type = 'button';\r\n        e.style.backgroundColor = bg;\r\n        e.textContent = text;\r\n        for (const [key, value] of attr) {\r\n            e.setAttribute(key, value);\r\n        }\r\n        this.useSlot(slot, e);\r\n        return e;\r\n    }\r\n}\r\nexport { DOM };\r\n","// 下载文件，并发送给浏览器下载\r\nimport { EVT } from './EVT';\r\nimport { log } from './Log';\r\nimport { lang } from './Lang';\r\nimport { titleBar } from './TitleBar';\r\nimport { fileName } from './FileName';\r\nimport { progressBar } from './ProgressBar';\r\nclass Download {\r\n    constructor(progressBarIndex, data) {\r\n        this.fileName = '';\r\n        this.stoped = false;\r\n        this.retry = 0;\r\n        this.retryMax = 1;\r\n        this.progressBarIndex = progressBarIndex;\r\n        this.download(data);\r\n        this.listenEvents();\r\n    }\r\n    listenEvents() {\r\n        ;\r\n        [EVT.events.downloadStop, EVT.events.downloadPause].forEach((event) => {\r\n            window.addEventListener(event, () => {\r\n                this.stoped = true;\r\n            });\r\n        });\r\n    }\r\n    // 设置进度条信息\r\n    setProgressBar(loaded, total) {\r\n        progressBar.setProgress(this.progressBarIndex, {\r\n            name: this.fileName,\r\n            loaded: loaded,\r\n            total: total,\r\n        });\r\n    }\r\n    // 下载文件\r\n    download(arg) {\r\n        titleBar.change('↓');\r\n        // 获取文件名\r\n        this.fileName = fileName.getFileName(arg.data);\r\n        // 重设当前下载栏的信息\r\n        this.setProgressBar(0, 0);\r\n        // 下载图片\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('GET', arg.data.url, true);\r\n        xhr.responseType = 'blob';\r\n        xhr.withCredentials = true;\r\n        // 显示下载进度\r\n        xhr.addEventListener('progress', (event) => {\r\n            if (this.stoped) {\r\n                xhr.abort();\r\n                xhr = null;\r\n                return;\r\n            }\r\n            this.setProgressBar(event.loaded, event.total);\r\n        });\r\n        // 图片获取完毕（出错时也会进入 loadend）\r\n        xhr.addEventListener('loadend', async () => {\r\n            if (this.stoped) {\r\n                xhr = null;\r\n                return;\r\n            }\r\n            let file = xhr.response; // 要下载的文件\r\n            // 错误处理\r\n            const HandleError = () => {\r\n                let msg = '';\r\n                if (xhr.status === 404) {\r\n                    // 404 错误时\r\n                    msg = lang.transl('_file404', this.fileName);\r\n                }\r\n                else {\r\n                    // 无法处理的错误状态\r\n                    msg = lang.transl('_文件下载失败', this.fileName);\r\n                }\r\n                log.error(msg, 1);\r\n                const data = {\r\n                    url: '',\r\n                    id: arg.id,\r\n                    tabId: 0,\r\n                    uuid: false,\r\n                };\r\n                EVT.fire(EVT.events.skipSaveFile, data);\r\n            };\r\n            if (xhr.status !== 200) {\r\n                // 状态码错误\r\n                // 正常下载完毕的状态码是 200\r\n                progressBar.showErrorColor(this.progressBarIndex, true);\r\n                this.retry++;\r\n                if (this.retry >= this.retryMax) {\r\n                    // 重试 retryMax 次依然错误，进行错误处理\r\n                    return HandleError();\r\n                }\r\n                else {\r\n                    return this.download(arg);\r\n                }\r\n            }\r\n            else {\r\n                // 状态码正常\r\n                progressBar.showErrorColor(this.progressBarIndex, false);\r\n            }\r\n            // 生成下载链接\r\n            const blobUrl = URL.createObjectURL(file);\r\n            // 向浏览器发送下载任务\r\n            this.browserDownload(blobUrl, this.fileName, arg.id, arg.taskBatch);\r\n            xhr = null;\r\n            file = null;\r\n        });\r\n        xhr.send();\r\n    }\r\n    // 向浏览器发送下载任务\r\n    browserDownload(blobUrl, fileName, id, taskBatch) {\r\n        // 如果任务已停止，不会向浏览器发送下载任务\r\n        if (this.stoped) {\r\n            // 释放 bloburl\r\n            URL.revokeObjectURL(blobUrl);\r\n            return;\r\n        }\r\n        const sendData = {\r\n            msg: 'send_download',\r\n            fileUrl: blobUrl,\r\n            fileName: fileName,\r\n            id,\r\n            taskBatch,\r\n        };\r\n        chrome.runtime.sendMessage(sendData);\r\n    }\r\n}\r\nexport { Download };\r\n","// 下载控制\r\nimport { EVT } from './EVT';\r\nimport { DOM } from './DOM';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nimport { lang } from './Lang';\r\nimport { titleBar } from './TitleBar';\r\nimport { Colors } from './Colors';\r\nimport { form } from './Settings';\r\nimport { Download } from './Download';\r\nimport { progressBar } from './ProgressBar';\r\nclass DownloadControl {\r\n    constructor() {\r\n        this.downloadThreadMax = 5; // 同时下载的线程数的最大值，也是默认值\r\n        this.downloadThread = this.downloadThreadMax; // 同时下载的线程数\r\n        this.taskBatch = 0; // 标记任务批次，每次重新下载时改变它的值，传递给后台使其知道这是一次新的下载\r\n        this.statesList = []; // 下载状态列表，保存每个下载任务的状态\r\n        this.taskList = {}; // 下载任务列表，使用下载的文件的 id 做 key，保存下载栏编号和它在下载状态列表中的索引\r\n        this.downloaded = 0; // 已下载的任务数量\r\n        this.reTryTimer = 0; // 重试下载的定时器\r\n        this.downloadArea = document.createElement('div'); // 下载区域\r\n        this.totalNumberEl = document.createElement('span');\r\n        this.downStatusEl = document.createElement('span');\r\n        this.downloadStop = false; // 是否停止下载\r\n        this.downloadPause = false; // 是否暂停下载\r\n        this.createDownloadArea();\r\n        this.listenEvents();\r\n    }\r\n    // 返回任务停止状态。暂停和停止都视为停止下载\r\n    get downloadStopped() {\r\n        return this.downloadPause || this.downloadStop;\r\n    }\r\n    listenEvents() {\r\n        window.addEventListener(EVT.events.crawlStart, () => {\r\n            this.hideDownloadArea();\r\n            this.reset();\r\n        });\r\n        window.addEventListener(EVT.events.crawlFinish, () => {\r\n            this.showDownloadArea();\r\n            this.beforeDownload();\r\n        });\r\n        window.addEventListener(EVT.events.skipSaveFile, (ev) => {\r\n            const data = ev.detail.data;\r\n            this.downloadSuccess(data);\r\n        });\r\n        // 监听浏览器下载文件后，返回的消息\r\n        chrome.runtime.onMessage.addListener((msg) => {\r\n            if (!this.taskBatch) {\r\n                return;\r\n            }\r\n            // 文件下载成功\r\n            if (msg.msg === 'downloaded') {\r\n                // 释放 BLOBURL\r\n                URL.revokeObjectURL(msg.data.url);\r\n                EVT.fire(EVT.events.downloadSucccess);\r\n                this.downloadSuccess(msg.data);\r\n            }\r\n            else if (msg.msg === 'download_err') {\r\n                // 浏览器把文件保存到本地时出错\r\n                log.error(`${msg.data.id} download error! code: ${msg.err}. The downloader will try to download the file again `);\r\n                EVT.fire(EVT.events.downloadError);\r\n                // 重新下载这个文件\r\n                this.downloadError(msg.data);\r\n            }\r\n            // UUID 的情况\r\n            if (msg.data && msg.data.uuid) {\r\n                log.error(lang.transl('_uuid'));\r\n            }\r\n        });\r\n    }\r\n    set setDownloaded(val) {\r\n        this.downloaded = val;\r\n        this.LogDownloadStates();\r\n        // 设置下载进度信息\r\n        this.totalNumberEl.textContent = store.result.length.toString();\r\n        progressBar.setTotalProgress(this.downloaded);\r\n        // 重置下载进度信息\r\n        if (this.downloaded === 0) {\r\n            this.setDownStateText(lang.transl('_未开始下载'));\r\n        }\r\n        // 下载完毕\r\n        if (this.downloaded === store.result.length) {\r\n            EVT.fire(EVT.events.downloadComplete);\r\n            this.reset();\r\n            this.setDownStateText(lang.transl('_下载完毕'));\r\n            log.success(lang.transl('_下载完毕'), 2);\r\n            titleBar.change('√');\r\n        }\r\n    }\r\n    downloadedAdd() {\r\n        this.setDownloaded = this.downloaded + 1;\r\n    }\r\n    // 显示或隐藏下载区域\r\n    showDownloadArea() {\r\n        this.downloadArea.style.display = 'block';\r\n    }\r\n    hideDownloadArea() {\r\n        this.downloadArea.style.display = 'none';\r\n    }\r\n    // 设置下载状态文本，默认颜色为主题蓝色\r\n    setDownStateText(str, color = '') {\r\n        const el = document.createElement('span');\r\n        el.textContent = str;\r\n        if (color) {\r\n            el.style.color = color;\r\n        }\r\n        this.downStatusEl.innerHTML = '';\r\n        this.downStatusEl.appendChild(el);\r\n    }\r\n    reset() {\r\n        this.statesList = [];\r\n        this.downloadPause = false;\r\n        this.downloadStop = false;\r\n        clearTimeout(this.reTryTimer);\r\n    }\r\n    createDownloadArea() {\r\n        const html = `<div class=\"download_area\">\n    <p> ${lang.transl('_共抓取到n个图片', '<span class=\"fwb blue imgNum\">0</span>')}</p>\n    \n    <div class=\"centerWrap_btns\">\n    <button class=\"startDownload\" type=\"button\" style=\"background:${Colors.blue};\"> ${lang.transl('_下载按钮1')}</button>\n    <button class=\"pauseDownload\" type=\"button\" style=\"background:#e49d00;\"> ${lang.transl('_下载按钮2')}</button>\n    <button class=\"stopDownload\" type=\"button\" style=\"background:${Colors.red};\"> ${lang.transl('_下载按钮3')}</button>\n    <button class=\"copyUrl\" type=\"button\" style=\"background:${Colors.green};\"> ${lang.transl('_下载按钮4')}</button>\n    </div>\n    <div class=\"centerWrap_down_tips\">\n    <p>\n    ${lang.transl('_当前状态')}\n    <span class=\"down_status blue\"><span>${lang.transl('_未开始下载')}</span></span>\n    </p>\n    </div>\n    </div>`;\r\n        const el = DOM.useSlot('downloadArea', html);\r\n        this.downloadArea = el;\r\n        this.downStatusEl = el.querySelector('.down_status ');\r\n        this.totalNumberEl = el.querySelector('.imgNum');\r\n        document.querySelector('.startDownload').addEventListener('click', () => {\r\n            this.startDownload();\r\n        });\r\n        document.querySelector('.pauseDownload').addEventListener('click', () => {\r\n            this.pauseDownload();\r\n        });\r\n        document.querySelector('.stopDownload').addEventListener('click', () => {\r\n            this.stopDownload();\r\n        });\r\n        document.querySelector('.copyUrl').addEventListener('click', () => {\r\n            this.showURLs();\r\n        });\r\n    }\r\n    // 显示 url\r\n    showURLs() {\r\n        if (store.result.length === 0) {\r\n            return alert(lang.transl('_没有数据可供使用'));\r\n        }\r\n        let result = '';\r\n        for (const now of store.result) {\r\n            result += now.url + '<br>';\r\n        }\r\n        EVT.fire(EVT.events.output, result);\r\n    }\r\n    // 下载线程设置\r\n    setDownloadThread() {\r\n        const setThread = parseInt(form.downloadThread.value);\r\n        if (setThread < 1 ||\r\n            setThread > this.downloadThreadMax ||\r\n            isNaN(setThread)) {\r\n            // 如果数值非法，则重设为默认值\r\n            this.downloadThread = this.downloadThreadMax;\r\n        }\r\n        else {\r\n            this.downloadThread = setThread; // 设置为用户输入的值\r\n        }\r\n        // 如果剩余任务数量少于下载线程数\r\n        if (store.result.length - this.downloaded < this.downloadThread) {\r\n            this.downloadThread = store.result.length - this.downloaded;\r\n        }\r\n        // 重设下载进度条\r\n        progressBar.reset(this.downloadThread, this.downloaded);\r\n    }\r\n    // 抓取完毕之后，已经可以开始下载时，根据一些状态进行处理\r\n    beforeDownload() {\r\n        this.setDownloaded = 0;\r\n        this.setDownloadThread();\r\n        const autoDownload = form.quietDownload.checked;\r\n        if (!autoDownload && !store.states.quickDownload) {\r\n            titleBar.change('▶');\r\n        }\r\n        // 视情况自动开始下载\r\n        if (autoDownload || store.states.quickDownload) {\r\n            this.startDownload();\r\n        }\r\n    }\r\n    // 开始下载\r\n    startDownload() {\r\n        // 如果正在下载中，或无图片，则不予处理\r\n        if (!store.states.allowWork || store.result.length === 0) {\r\n            return;\r\n        }\r\n        // 如果之前不是暂停状态，则需要重新下载\r\n        if (!this.downloadPause) {\r\n            this.setDownloaded = 0;\r\n            // 初始化下载记录\r\n            // 状态：\r\n            // -1 未使用\r\n            // 0 使用中\r\n            // 1 已完成\r\n            this.statesList = new Array(store.result.length).fill(-1);\r\n            this.taskBatch = new Date().getTime(); // 修改本批下载任务的标记\r\n        }\r\n        else {\r\n            // 继续下载\r\n            // 把“使用中”的下载状态重置为“未使用”\r\n            for (let index = 0; index < this.statesList.length; index++) {\r\n                if (this.statesList[index] === 0) {\r\n                    this.statesList[index] = -1;\r\n                }\r\n            }\r\n        }\r\n        // 重置一些条件\r\n        this.downloadPause = false;\r\n        this.downloadStop = false;\r\n        clearTimeout(this.reTryTimer);\r\n        this.setDownloadThread();\r\n        EVT.fire(EVT.events.downloadStart);\r\n        // 启动或继续下载，建立并发下载线程\r\n        for (let i = 0; i < this.downloadThread; i++) {\r\n            this.createDownload(i);\r\n        }\r\n        this.setDownStateText(lang.transl('_正在下载中'));\r\n        log.log(lang.transl('_正在下载中'));\r\n    }\r\n    // 暂停下载\r\n    pauseDownload() {\r\n        clearTimeout(this.reTryTimer);\r\n        if (store.result.length === 0) {\r\n            return;\r\n        }\r\n        // 停止的优先级高于暂停。点击停止可以取消暂停状态，但点击暂停不能取消停止状态\r\n        if (this.downloadStop === true) {\r\n            return;\r\n        }\r\n        if (this.downloadPause === false) {\r\n            // 如果正在下载中\r\n            if (!store.states.allowWork) {\r\n                this.downloadPause = true; // 发出暂停信号\r\n                EVT.fire(EVT.events.downloadPause);\r\n                titleBar.change('║');\r\n                this.setDownStateText(lang.transl('_已暂停'), '#f00');\r\n                log.warning(lang.transl('_已暂停'), 2);\r\n            }\r\n            else {\r\n                // 不在下载中的话不允许启用暂停功能\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    // 停止下载\r\n    stopDownload() {\r\n        clearTimeout(this.reTryTimer);\r\n        if (store.result.length === 0 || this.downloadStop) {\r\n            return;\r\n        }\r\n        this.downloadStop = true;\r\n        EVT.fire(EVT.events.downloadStop);\r\n        titleBar.change('■');\r\n        this.setDownStateText(lang.transl('_已停止'), '#f00');\r\n        log.error(lang.transl('_已停止'), 2);\r\n        this.downloadPause = false;\r\n    }\r\n    downloadError(data) {\r\n        if (this.downloadPause || this.downloadStop) {\r\n            return false;\r\n        }\r\n        const task = this.taskList[data.id];\r\n        // 复位这个任务的状态\r\n        this.setDownloadedIndex(task.index, -1);\r\n        // 建立下载任务，再次下载它\r\n        this.createDownload(task.progressBarIndex);\r\n    }\r\n    downloadSuccess(data) {\r\n        const task = this.taskList[data.id];\r\n        // 更改这个任务状态为“已完成”\r\n        this.setDownloadedIndex(task.index, 1);\r\n        // 增加已下载数量\r\n        this.downloadedAdd();\r\n        // 是否继续下载\r\n        const no = task.progressBarIndex;\r\n        if (this.checkContinueDownload()) {\r\n            this.createDownload(no);\r\n        }\r\n    }\r\n    // 设置已下载列表中的标记\r\n    setDownloadedIndex(index, value) {\r\n        this.statesList[index] = value;\r\n    }\r\n    // 当一个文件下载完成后，检查是否还有后续下载任务\r\n    checkContinueDownload() {\r\n        // 如果没有全部下载完毕\r\n        if (this.downloaded < store.result.length) {\r\n            // 如果任务已停止\r\n            if (this.downloadPause || this.downloadStop) {\r\n                return false;\r\n            }\r\n            // 如果已完成的数量 加上 线程中未完成的数量，仍然没有达到文件总数，继续添加任务\r\n            if (this.downloaded + this.downloadThread - 1 < store.result.length) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    // 在日志上显示下载进度\r\n    LogDownloadStates() {\r\n        let text = `${this.downloaded} / ${store.result.length}`;\r\n        log.log(text, 2, false);\r\n    }\r\n    // 查找需要进行下载的作品，建立下载\r\n    createDownload(progressBarIndex) {\r\n        let length = this.statesList.length;\r\n        let index;\r\n        for (let i = 0; i < length; i++) {\r\n            if (this.statesList[i] === -1) {\r\n                this.statesList[i] = 0;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if (index === undefined) {\r\n            throw new Error('There are no data to download');\r\n        }\r\n        else {\r\n            const result = store.result[index];\r\n            // 注意这里的 id 用的是 name 属性，因为 id 属性并不唯一。一个投稿里的所有资源的 id 是相同的，但是 name 唯一\r\n            const data = {\r\n                id: result.name,\r\n                data: result,\r\n                index: index,\r\n                progressBarIndex: progressBarIndex,\r\n                taskBatch: this.taskBatch,\r\n            };\r\n            // 保存任务信息\r\n            this.taskList[result.id] = {\r\n                index,\r\n                progressBarIndex: progressBarIndex,\r\n            };\r\n            // 建立下载\r\n            new Download(progressBarIndex, data);\r\n        }\r\n    }\r\n}\r\nnew DownloadControl();\r\n","class EVT {\r\n    static fire(type, data = '') {\r\n        const event = new CustomEvent(type, {\r\n            detail: { data: data },\r\n        });\r\n        window.dispatchEvent(event);\r\n    }\r\n}\r\nEVT.events = {\r\n    crawlStart: 'crawlStart',\r\n    crawlFinish: 'crawlFinish',\r\n    crawlEmpty: 'crawlEmpty',\r\n    crawlError: 'crawlError',\r\n    addResult: 'addResult',\r\n    downloadStart: 'downloadStart',\r\n    downloadPause: 'downloadPause',\r\n    downloadStop: 'downloadStop',\r\n    download: 'download',\r\n    downloadSucccess: 'downloadSucccess',\r\n    downloadError: 'downloadError',\r\n    downloadComplete: 'downloadComplete',\r\n    pageSwitch: 'pageSwitch',\r\n    pageTypeChange: 'pageTypeChange',\r\n    resetOption: 'resetOption',\r\n    convertChange: 'convertChange',\r\n    previewFileName: 'previewFileName',\r\n    output: 'output',\r\n    hideCenterPanel: 'hideCenterPanel',\r\n    showCenterPanel: 'showCenterPanel',\r\n    clearMultiple: 'clearMultiple',\r\n    clearUgoira: 'clearUgoira',\r\n    deleteWork: 'deleteWork',\r\n    worksUpdate: 'worksUpdate',\r\n    settingChange: 'settingChange',\r\n    clickRightIcon: 'clickRightIcon',\r\n    destroy: 'destroy',\r\n    convertError: 'convertError',\r\n    skipSaveFile: 'skipSaveFile',\r\n};\r\nexport { EVT };\r\n","import { EVT } from './EVT';\r\nimport { form } from './Settings';\r\nimport { store } from './Store';\r\nimport { lang } from './Lang';\r\nclass FileName {\r\n    constructor() {\r\n        // 用正则过滤不安全的字符，（Chrome 和 Windows 不允许做文件名的字符）\r\n        // 不安全的字符，这里多数是控制字符，需要替换掉\r\n        this.unsafeStr = new RegExp(/[\\u0001-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0605\\u061c\\u06dd\\u070f\\u08e2\\u180e\\u200b-\\u200f\\u202a-\\u202e\\u2060-\\u2064\\u2066-\\u206f\\ufdd0-\\ufdef\\ufeff\\ufff9-\\ufffb\\ufffe\\uffff]/g);\r\n        // 一些需要替换成全角字符的符号，左边是正则表达式的字符\r\n        this.fullWidthDict = [\r\n            ['\\\\\\\\', '＼'],\r\n            ['/', '／'],\r\n            [':', '：'],\r\n            ['\\\\?', '？'],\r\n            ['\"', '＂'],\r\n            ['<', '＜'],\r\n            ['>', '＞'],\r\n            ['\\\\*', '＊'],\r\n            ['\\\\|', '｜'],\r\n            ['~', '～'],\r\n        ];\r\n        window.addEventListener(EVT.events.previewFileName, () => {\r\n            this.previewFileName();\r\n        });\r\n    }\r\n    // 把一些特殊字符替换成全角字符\r\n    replaceUnsafeStr(str) {\r\n        str = str.replace(this.unsafeStr, '');\r\n        for (let index = 0; index < this.fullWidthDict.length; index++) {\r\n            const rule = this.fullWidthDict[index];\r\n            const reg = new RegExp(rule[0], 'g');\r\n            str = str.replace(reg, rule[1]);\r\n        }\r\n        return str;\r\n    }\r\n    // 生成文件名，传入参数为图片信息\r\n    getFileName(data) {\r\n        let result = form.userSetName.value;\r\n        // 为空时使用预设的命名规则\r\n        result = result || '{title}/{name}-{index}';\r\n        // 配置所有命名标记\r\n        const cfg = {\r\n            '{id}': {\r\n                value: data.id,\r\n                safe: true,\r\n            },\r\n            '{title}': {\r\n                value: data.title,\r\n                safe: false,\r\n            },\r\n            '{tags}': {\r\n                value: data.tags,\r\n                safe: false,\r\n            },\r\n            '{name}': {\r\n                value: data.name,\r\n                safe: false,\r\n            },\r\n            '{ext}': {\r\n                value: data.ext,\r\n                safe: false,\r\n            },\r\n            '{date}': {\r\n                value: data.date,\r\n                safe: true,\r\n            },\r\n            '{fee}': {\r\n                value: data.fee,\r\n                safe: true,\r\n            },\r\n            '{user}': {\r\n                value: data.user,\r\n                safe: false,\r\n            },\r\n            '{uid}': {\r\n                value: data.uid,\r\n                safe: true,\r\n            },\r\n        };\r\n        // 替换命名规则里的特殊字符\r\n        result = this.replaceUnsafeStr(result);\r\n        // 上一步会把斜线 / 替换成全角的斜线 ／，这里再替换回来，否则就不能建立文件夹了\r\n        result = result.replace(/／/g, '/');\r\n        // 把命名规则的标记替换成实际值\r\n        for (const [key, val] of Object.entries(cfg)) {\r\n            // 只有当标记有值时才会进行替换，所以没有值的标记会原样保留\r\n            if (result.includes(key) && val.value !== '' && val.value !== null) {\r\n                let once = String(val.value);\r\n                // 处理标记值中的特殊字符\r\n                if (!val.safe) {\r\n                    once = this.replaceUnsafeStr(once);\r\n                }\r\n                result = result.replace(new RegExp(key, 'g'), once); // 将标记替换成最终值，如果有重复的标记，全部替换\r\n            }\r\n        }\r\n        // 处理空值，连续的 '//'。 有时候两个斜线中间的字段是空值，最后就变成两个斜线挨在一起了\r\n        result = result.replace(/undefined/g, '').replace(/\\/{2,9}/, '/');\r\n        // 对每一层路径进行处理\r\n        let tempArr = result.split('/');\r\n        tempArr.forEach((str, index, arr) => {\r\n            // 替换路径首尾的空格\r\n            // 把每层路径头尾的 . 变成全角的．因为 Chrome 不允许头尾使用 .\r\n            arr[index] = str.trim().replace(/^\\./g, '．').replace(/\\.$/g, '．');\r\n        });\r\n        result = tempArr.join('/');\r\n        // 去掉头尾的 /\r\n        if (result.startsWith('/')) {\r\n            result = result.replace('/', '');\r\n        }\r\n        if (result.endsWith('/')) {\r\n            result = result.substr(0, result.length - 1);\r\n        }\r\n        // 添加后缀名\r\n        result += '.' + data.ext;\r\n        return result;\r\n    }\r\n    // 预览文件名\r\n    previewFileName() {\r\n        if (store.result.length === 0) {\r\n            return alert(lang.transl('_没有数据可供使用'));\r\n        }\r\n        // 使用数组储存和拼接字符串，提高性能\r\n        const resultArr = [];\r\n        const length = store.result.length;\r\n        for (let i = 0; i < length; i++) {\r\n            const data = store.result[i];\r\n            // 为默认文件名添加颜色。这里有两种处理方式，一种是取出用其他下载软件下载后的默认文件名，一种是取出本程序使用的默认文件名 data.id。这里使用前者，方便用户用其他下载软件下载后，再用生成的文件名重命名。\r\n            const defaultName = data.url.replace(/.*\\//, '');\r\n            const defaultNameHtml = `<span class=\"color999\">${defaultName}</span>`;\r\n            // 为生成的文件名添加颜色\r\n            const fullName = this.getFileName(data);\r\n            const part = fullName.split('/');\r\n            const length = part.length;\r\n            for (let i = 0; i < length; i++) {\r\n                const str = part[i];\r\n                if (i < length - 1) {\r\n                    // 如果不是最后一项，说明是文件夹名，添加颜色\r\n                    part[i] = `<span class=\"color666\">${str}</span>`;\r\n                }\r\n                else {\r\n                    // 最后一项，是文件名，添加颜色\r\n                    part[i] = `<span class=\"color000\">${str}</span>`;\r\n                }\r\n            }\r\n            const fullNameHtml = part.join('/');\r\n            // 保存本条结果\r\n            const nowResult = `<p class=\"result\">${defaultNameHtml}: ${fullNameHtml}</p>`;\r\n            resultArr.push(nowResult);\r\n        }\r\n        // 拼接所有结果\r\n        const result = resultArr.join('');\r\n        EVT.fire(EVT.events.output, result);\r\n    }\r\n}\r\nconst fileName = new FileName();\r\nexport { fileName };\r\n","import { form } from './Settings';\r\nimport { log } from './Log';\r\nimport { EVT } from './EVT';\r\n// 审查每个文件的数据，决定是否要下载它\r\nclass Filter {\r\n    constructor() {\r\n        // 文件类型。fanbox 允许直接上传在投稿里的文件类型只有这些\r\n        this.fileType = {\r\n            image: ['jpg', 'jpeg', 'png', 'gif'],\r\n            music: ['wav', 'mp3', 'flac'],\r\n            video: ['mp4', 'mov', 'avi', 'clip'],\r\n            compressed: ['zip'],\r\n            ps: ['psd'],\r\n            other: ['txt', 'pdf'],\r\n        };\r\n    }\r\n    init() { }\r\n    // 检查作品是否符合过滤器的要求\r\n    // 想要检查哪些数据就传递哪些数据，不需要传递 FilterOption 的所有选项\r\n    check(option) {\r\n        // 检查文件类型\r\n        if (!this.checkFileType(option.ext)) {\r\n            return false;\r\n        }\r\n        // 检查收费还是免费\r\n        if (!this.checkfeeType(option.fee)) {\r\n            return false;\r\n        }\r\n        // 检查价格范围\r\n        if (!this.checkfeeRange(option.fee)) {\r\n            return false;\r\n        }\r\n        // 检查 id 范围\r\n        if (!this.checkIdRange(option.id)) {\r\n            return false;\r\n        }\r\n        // 检查投稿时间\r\n        if (!this.checkPostDate(option.date)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    checkFileType(ext) {\r\n        // 如果没有传递 ext，则保留这个文件\r\n        if (!ext) {\r\n            return true;\r\n        }\r\n        // 检查 ext 存在于哪种类型里，然后检查这个类型是否被选中\r\n        for (const [key, value] of Object.entries(this.fileType)) {\r\n            if (value.includes(ext)) {\r\n                return form[key].checked ? true : false;\r\n            }\r\n        }\r\n        // 如果这个 ext 不存在任何规定的类型里，则把它当作 other 类型，决定是否保留\r\n        return form['other'].checked ? true : false;\r\n    }\r\n    checkfeeType(fee) {\r\n        if (fee === undefined) {\r\n            return true;\r\n        }\r\n        if (fee > 0) {\r\n            return form.pay.checked;\r\n        }\r\n        else {\r\n            return form.free.checked;\r\n        }\r\n    }\r\n    checkfeeRange(fee) {\r\n        if (fee === undefined || !form.feeSwitch.checked) {\r\n            return true;\r\n        }\r\n        return fee > parseInt(form.fee.value);\r\n    }\r\n    checkIdRange(id) {\r\n        if (id === undefined || !form.idRangeSwitch.checked) {\r\n            return true;\r\n        }\r\n        const nowId = parseInt(id.toString());\r\n        const setId = parseInt(form.idRangeInput.value) || 0;\r\n        return nowId > setId;\r\n    }\r\n    checkPostDate(date) {\r\n        if (!form.postDate.checked || date === undefined) {\r\n            return true;\r\n        }\r\n        else {\r\n            const nowDate = new Date(date);\r\n            const postDateStart = new Date(form.postDateStart.value);\r\n            if (isNaN(postDateStart.getTime())) {\r\n                const msg = 'Date format error!';\r\n                this.throwError(msg);\r\n            }\r\n            return nowDate > postDateStart;\r\n        }\r\n    }\r\n    // 当需要时抛出错误\r\n    throwError(msg) {\r\n        EVT.fire(EVT.events.crawlError);\r\n        log.error(msg, 2);\r\n        window.alert(msg);\r\n        throw new Error(msg);\r\n    }\r\n}\r\nconst filter = new Filter();\r\nexport { filter };\r\n","import { lang } from './Lang';\r\nimport { Colors } from './Colors';\r\nimport { DOM } from './DOM';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nclass InitHomePage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    appendCenterBtns() {\r\n        DOM.addBtn('crawlBtns', Colors.blue, lang.transl('_抓取赞助的所有用户的投稿')).addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    async FetchPostList() {\r\n        let data;\r\n        if (this.nextUrl) {\r\n            data = (await API.request(this.nextUrl));\r\n        }\r\n        else {\r\n            data = await API.getPostListSupporting(300);\r\n        }\r\n        console.log(data);\r\n        this.afterFetchPostList(data);\r\n    }\r\n    async fetchPost() { }\r\n}\r\nexport { InitHomePage };\r\n","// 初始化页面，初始化抓取流程\r\nimport { EVT } from './EVT';\r\nimport { pageType } from './PageType';\r\nimport { InitHomePage } from './InitHomePage';\r\nimport { InitPostListPage } from './InitPostListPage';\r\nimport { InitTagPage } from './InitTagPage';\r\nimport { InitPostPage } from './InitPostPage';\r\nclass InitPage {\r\n    constructor() {\r\n        this.initPage();\r\n        // 页面类型变化时，初始化抓取流程\r\n        window.addEventListener(EVT.events.pageTypeChange, () => {\r\n            EVT.fire(EVT.events.destroy);\r\n            this.initPage();\r\n        });\r\n    }\r\n    initPage() {\r\n        switch (pageType.getPageType()) {\r\n            case 0:\r\n            case 1:\r\n                return new InitHomePage();\r\n            case 2:\r\n            case 3:\r\n                return new InitPostListPage();\r\n            case 4:\r\n                return new InitPostPage();\r\n            case 5:\r\n                return new InitTagPage();\r\n            default:\r\n                throw new Error('InitCrawlProcess error: Illegal pageType.');\r\n        }\r\n    }\r\n}\r\nnew InitPage();\r\n","// 初始化抓取页面的流程\r\nimport { lang } from './Lang';\r\nimport { Colors } from './Colors';\r\nimport { DOM } from './DOM';\r\nimport { filter } from './Filter';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nimport { EVT } from './EVT';\r\nimport { form } from './Settings';\r\nimport { titleBar } from './TitleBar';\r\nimport { saveData } from './SaveData';\r\nclass InitPageBase {\r\n    constructor() {\r\n        this.crawlNumber = 0; // 要抓取的个数/页数\r\n        this.nextUrl = null;\r\n    }\r\n    // 初始化\r\n    init() {\r\n        this.appendCenterBtns();\r\n        this.appendElseEl();\r\n        this.initElse();\r\n        window.addEventListener(EVT.events.destroy, () => {\r\n            this.destroy();\r\n        });\r\n    }\r\n    // 各个子类私有的初始化内容\r\n    initElse() { }\r\n    // 销毁初始化页面时添加的元素和事件，恢复设置项等\r\n    destroy() {\r\n        DOM.clearSlot('crawlBtns');\r\n        DOM.clearSlot('otherBtns');\r\n    }\r\n    // 添加中间按钮\r\n    appendCenterBtns() {\r\n        DOM.addBtn('crawlBtns', Colors.blue, lang.transl('_开始抓取')).addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    // 添加其他元素（如果有）\r\n    appendElseEl() { }\r\n    // 作品个数/页数的输入不合法\r\n    getWantPageError() {\r\n        EVT.fire(EVT.events.crawlError);\r\n        const msg = lang.transl('_参数不合法');\r\n        window.alert(msg);\r\n        throw new Error(msg);\r\n    }\r\n    // 检查用户输入的投稿数量设置，并返回提示信息\r\n    // 可以为 -1，或者大于 0\r\n    checkWantPageInput(crawlPartTip, crawlAllTip) {\r\n        const temp = parseInt(form.setWantPage.value);\r\n        // 如果比 1 小，并且不是 -1，则不通过\r\n        if ((temp < 1 && temp !== -1) || isNaN(temp)) {\r\n            // 比 1 小的数里，只允许 -1 , 0 也不行\r\n            this.getWantPageError();\r\n        }\r\n        if (temp >= 1) {\r\n            log.warning(crawlPartTip.replace('-num-', temp.toString()));\r\n        }\r\n        else if (temp === -1) {\r\n            log.warning(crawlAllTip);\r\n        }\r\n        return temp;\r\n    }\r\n    // 获取投稿数量设置\r\n    getWantPage() {\r\n        const wantPage = parseInt(form.setWantPage.value);\r\n        if (isNaN(wantPage)) {\r\n            this.getWantPageError();\r\n        }\r\n        if (wantPage > 0) {\r\n            this.crawlNumber = wantPage;\r\n        }\r\n        else {\r\n            this.crawlNumber = -1;\r\n        }\r\n    }\r\n    // 准备抓取，进行抓取之前的一些检查工作。必要时可以在子类中改写\r\n    async readyCrawl() {\r\n        if (!store.states.allowWork) {\r\n            window.alert(lang.transl('_当前任务尚未完成2'));\r\n            return;\r\n        }\r\n        EVT.fire(EVT.events.crawlStart);\r\n        log.clear();\r\n        log.success(lang.transl('_任务开始0'));\r\n        titleBar.change('↑');\r\n        this.getWantPage();\r\n        filter.init();\r\n        // 进入第一个抓取方法\r\n        this.nextStep();\r\n    }\r\n    // 当可以开始抓取时，进入下一个流程。默认情况下，开始获取作品列表。如有不同，由子类具体定义\r\n    nextStep() {\r\n        this.FetchPostList();\r\n    }\r\n    afterFetchPostList(data) {\r\n        const items = data.body.items;\r\n        this.nextUrl = data.body.nextUrl;\r\n        for (const item of items) {\r\n            saveData.receive(item);\r\n        }\r\n        if (this.nextUrl) {\r\n            this.FetchPostList();\r\n        }\r\n        else {\r\n            this.crawlFinished();\r\n        }\r\n    }\r\n    afterFetchPost(data) {\r\n        saveData.receive(data.body);\r\n        this.crawlFinished();\r\n    }\r\n    // 抓取完毕\r\n    crawlFinished() {\r\n        if (store.result.length === 0) {\r\n            return this.noResult();\r\n        }\r\n        this.nextUrl = null;\r\n        console.log(store.result);\r\n        log.log(lang.transl('_抓取文件数量', store.result.length.toString()));\r\n        log.log(lang.transl('_抓取完毕'), 2);\r\n        EVT.fire(EVT.events.crawlFinish);\r\n    }\r\n    // 抓取结果为 0 时输出提示\r\n    noResult() {\r\n        EVT.fire(EVT.events.crawlEmpty);\r\n        titleBar.reset();\r\n        log.error(lang.transl('_抓取结果为零'), 2);\r\n        window.alert(lang.transl('_抓取结果为零'));\r\n    }\r\n}\r\nexport { InitPageBase };\r\n","import { lang } from './Lang';\r\nimport { Colors } from './Colors';\r\nimport { DOM } from './DOM';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nclass InitPostListPage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    appendCenterBtns() {\r\n        DOM.addBtn('crawlBtns', Colors.blue, lang.transl('_抓取该用户的投稿')).addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    async FetchPostList() {\r\n        let data;\r\n        if (this.nextUrl) {\r\n            data = (await API.request(this.nextUrl));\r\n        }\r\n        else {\r\n            data = await API.getPostListByUser(API.getURLPathField('creator'), 300);\r\n        }\r\n        console.log(data);\r\n        this.afterFetchPostList(data);\r\n    }\r\n    async fetchPost() { }\r\n}\r\nexport { InitPostListPage };\r\n","import { lang } from './Lang';\r\nimport { Colors } from './Colors';\r\nimport { DOM } from './DOM';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nclass InitPostPage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.quickDownBtn = document.createElement('div');\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    appendCenterBtns() {\r\n        DOM.addBtn('crawlBtns', Colors.blue, lang.transl('_抓取这篇投稿')).addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    appendElseEl() {\r\n        // 在右侧创建快速下载按钮\r\n        this.quickDownBtn.id = 'quick_down_btn';\r\n        this.quickDownBtn.textContent = '↓';\r\n        this.quickDownBtn.setAttribute('title', lang.transl('_快速下载本页'));\r\n        document.body.appendChild(this.quickDownBtn);\r\n        this.quickDownBtn.addEventListener('click', () => {\r\n            store.states.quickDownload = true;\r\n            this.readyCrawl();\r\n        }, false);\r\n    }\r\n    nextStep() {\r\n        this.fetchPost();\r\n    }\r\n    async FetchPostList() { }\r\n    async fetchPost() {\r\n        const data = await API.getPost(API.getURLPathField('post'));\r\n        this.afterFetchPost(data);\r\n    }\r\n}\r\nexport { InitPostPage };\r\n","import { lang } from './Lang';\r\nimport { Colors } from './Colors';\r\nimport { DOM } from './DOM';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nclass InitTagPage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    appendCenterBtns() {\r\n        DOM.addBtn('crawlBtns', Colors.blue, lang.transl('_抓取该tag的投稿')).addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    async FetchPostList() {\r\n        let data;\r\n        if (this.nextUrl) {\r\n            data = (await API.request(this.nextUrl));\r\n        }\r\n        else {\r\n            data = await API.getTagPostListByUser(API.getURLPathField('creator'), API.getURLPathField('tag'));\r\n        }\r\n        console.log(data);\r\n        this.afterFetchPostList(data);\r\n    }\r\n    async fetchPost() { }\r\n}\r\nexport { InitTagPage };\r\n","import { langText } from './langText';\r\n// 语言类\r\nclass Lang {\r\n    constructor() {\r\n        this.langType = 0;\r\n        this.getLangType();\r\n    }\r\n    // 设置语言类型\r\n    getLangType() {\r\n        const userLang = document.documentElement.lang; // 获取语言标识\r\n        switch (userLang) {\r\n            case 'zh':\r\n            case 'zh-CN':\r\n            case 'zh-Hans':\r\n                this.langType = 0; // 设置为简体中文\r\n                break;\r\n            case 'ja':\r\n                this.langType = 1; // 设置为日语\r\n                break;\r\n            case 'zh-Hant':\r\n            case 'zh-tw':\r\n            case 'zh-TW':\r\n                this.langType = 3; // 设置为繁体中文\r\n                break;\r\n            default:\r\n                this.langType = 2; // 设置为英语\r\n                break;\r\n        }\r\n    }\r\n    // translate 翻译\r\n    transl(name, ...arg) {\r\n        let content = langText[name][this.langType];\r\n        arg.forEach((val) => (content = content.replace('{}', val)));\r\n        return content;\r\n    }\r\n}\r\nconst lang = new Lang();\r\nexport { lang };\r\n","import { DOM } from './DOM';\r\nimport { EVT } from './EVT';\r\nimport { store } from './Store';\r\n// 日志类\r\nclass Log {\r\n    constructor() {\r\n        this.logArea = document.createElement('div'); // 输出日志的区域\r\n        this.id = 'logWrap'; // 日志区域元素的 id\r\n        this.refresh = document.createElement('span'); // 刷新时使用的元素\r\n        this.colors = ['#00ca19', '#d27e00', '#f00'];\r\n        // 切换不同页面时，如果任务已经完成，则清空输出区域，避免日志一直堆积。\r\n        window.addEventListener(EVT.events.destroy, () => {\r\n            if (store.states.allowWork) {\r\n                this.clear();\r\n            }\r\n        });\r\n    }\r\n    // 如果日志元素没有添加到页面上，则添加上去\r\n    checkElement() {\r\n        let test = document.getElementById(this.id);\r\n        if (test === null) {\r\n            this.logArea.id = this.id;\r\n            DOM.insertToHead(this.logArea);\r\n        }\r\n    }\r\n    // 清空日志\r\n    clear() {\r\n        this.logArea.innerHTML = '';\r\n    }\r\n    // 添加日志\r\n    /*\r\n    str 日志文本\r\n    level 日志等级\r\n    br 换行标签的个数\r\n    keepShow 追加日志的模式，默认为 true，把这一条日志添加后不再修改。false 则是刷新显示这条消息。\r\n  \r\n    level 日志等级：\r\n    -1 auto 不设置颜色\r\n    0 success 绿色\r\n    1 warning 黄色\r\n    2 error 红色\r\n    */\r\n    add(str, level, br, keepShow) {\r\n        let span = document.createElement('span');\r\n        if (!keepShow) {\r\n            span = this.refresh;\r\n        }\r\n        span.innerHTML = str;\r\n        if (level > -1) {\r\n            span.style.color = this.colors[level];\r\n        }\r\n        while (br > 0) {\r\n            span.appendChild(document.createElement('br'));\r\n            br--;\r\n        }\r\n        this.logArea.appendChild(span);\r\n    }\r\n    log(str, br = 1, keepShow = true) {\r\n        this.checkElement();\r\n        this.add(str, -1, br, keepShow);\r\n    }\r\n    success(str, br = 1, keepShow = true) {\r\n        this.checkElement();\r\n        this.add(str, 0, br, keepShow);\r\n    }\r\n    warning(str, br = 1, keepShow = true) {\r\n        this.add(str, 1, br, keepShow);\r\n    }\r\n    error(str, br = 1, keepShow = true) {\r\n        this.add(str, 2, br, keepShow);\r\n    }\r\n}\r\nconst log = new Log();\r\nexport { log };\r\n","// 输出传递的文本\r\nimport { EVT } from './EVT';\r\nimport { lang } from './Lang';\r\nclass Output {\r\n    constructor() {\r\n        this.outputPanel = document.createElement('div'); // 输出面板\r\n        this.outputContent = document.createElement('div'); // 输出文本的容器元素\r\n        this.addOutPutPanel();\r\n        this.bindEvent();\r\n    }\r\n    // 添加输出面板\r\n    addOutPutPanel() {\r\n        const outputPanelHTML = `\n    <div class=\"outputWrap\">\n    <div class=\"outputClose\" title=\"${lang.transl('_关闭')}\">X</div>\n    <div class=\"outputTitle\">${lang.transl('_输出信息')}</div>\n    <div class=\"outputContent\"></div>\n    <div class=\"outputFooter\">\n    <div class=\"outputCopy\" title=\"\">${lang.transl('_复制')}</div>\n    </div>\n    </div>\n    `;\r\n        document.body.insertAdjacentHTML('beforeend', outputPanelHTML);\r\n        this.outputPanel = document.querySelector('.outputWrap');\r\n        this.outputContent = document.querySelector('.outputContent');\r\n    }\r\n    close() {\r\n        this.outputPanel.style.display = 'none';\r\n        this.outputContent.innerHTML = '';\r\n    }\r\n    bindEvent() {\r\n        // 关闭输出面板\r\n        document.querySelector('.outputClose').addEventListener('click', () => {\r\n            this.close();\r\n        });\r\n        window.addEventListener(EVT.events.hideCenterPanel, () => {\r\n            this.close();\r\n        });\r\n        // 复制输出内容\r\n        document.querySelector('.outputCopy').addEventListener('click', () => {\r\n            const range = document.createRange();\r\n            range.selectNodeContents(this.outputContent);\r\n            window.getSelection().removeAllRanges();\r\n            window.getSelection().addRange(range);\r\n            document.execCommand('copy');\r\n            // 改变提示文字\r\n            document.querySelector('.outputCopy').textContent = lang.transl('_已复制到剪贴板');\r\n            setTimeout(() => {\r\n                window.getSelection().removeAllRanges();\r\n                document.querySelector('.outputCopy').textContent = lang.transl('_复制');\r\n            }, 1000);\r\n        });\r\n        window.addEventListener(EVT.events.output, (ev) => {\r\n            this.output(ev.detail.data);\r\n        });\r\n    }\r\n    // 输出内容\r\n    output(text) {\r\n        if (text) {\r\n            this.outputContent.innerHTML = text;\r\n            this.outputPanel.style.display = 'block';\r\n        }\r\n    }\r\n}\r\nnew Output();\r\n","// 获取页面类型\r\nimport { EVT } from './EVT';\r\nclass PageType {\r\n    constructor() {\r\n        this.type = 0;\r\n        this.type = this.getPageType();\r\n        // 页面切换时检查新旧页面是否不同\r\n        window.addEventListener(EVT.events.pageSwitch, () => {\r\n            this.checkPageTypeIsNew();\r\n        });\r\n    }\r\n    // 判断页面类型\r\n    getPageType() {\r\n        const url = window.location.href;\r\n        let type;\r\n        if (window.location.pathname === '/fanbox') {\r\n            // https://www.pixiv.net/fanbox\r\n            // 自己主页\r\n            type = 0;\r\n        }\r\n        else if (window.location.pathname === '/fanbox/supporting') {\r\n            // https://www.pixiv.net/fanbox/supporting\r\n            // 正在赞助\r\n            type = 1;\r\n        }\r\n        else if (/creator\\/\\d*$/.test(window.location.pathname)) {\r\n            // https://www.pixiv.net/fanbox/creator/1499614\r\n            // 画师主页\r\n            type = 2;\r\n        }\r\n        else if (window.location.pathname.endsWith('/post')) {\r\n            // https://www.pixiv.net/fanbox/creator/1499614/post\r\n            // 画师投稿列表页\r\n            type = 3;\r\n        }\r\n        else if (/post\\/\\d*$/.test(window.location.pathname)) {\r\n            // https://www.pixiv.net/fanbox/creator/1499614/post/867418\r\n            // 投稿内容页\r\n            type = 4;\r\n        }\r\n        else if (window.location.pathname.includes('/tag/')) {\r\n            // https://www.pixiv.net/fanbox/creator/1082583/tag/%E5%8B%95%E7%94%BB\r\n            // tag 页面\r\n            type = 5;\r\n        }\r\n        else if (window.location.pathname.endsWith('/shop')) {\r\n            // https://www.pixiv.net/fanbox/creator/6843920/shop\r\n            // 商店页面\r\n            type = 6;\r\n        }\r\n        else {\r\n            // 没有匹配到可用的页面类型\r\n            throw new Error('Page type matching failed');\r\n        }\r\n        return type;\r\n    }\r\n    // 检查是不是进入到了新的页面类型\r\n    checkPageTypeIsNew() {\r\n        let newType = this.getPageType();\r\n        if (this.type !== newType) {\r\n            EVT.fire(EVT.events.pageTypeChange, newType);\r\n        }\r\n        // 保存当前页面类型\r\n        this.type = newType;\r\n    }\r\n}\r\nconst pageType = new PageType();\r\nexport { pageType };\r\n","import { store } from './Store';\r\nimport { DOM } from './DOM';\r\nimport { lang } from './Lang';\r\n// 进度条\r\nclass ProgressBar {\r\n    constructor() {\r\n        this.wrapHTML = `\n  <div class=\"progressBarWrap\">\n  <div class=\"total\">\n  <span class=\"text\">${lang.transl('_下载进度')}</span>\n  <div class=\"right1\">\n  <div class=\"progressBar progressBar1\">\n  <div class=\"progress progress1\"></div>\n  </div>\n  <div class=\"progressTip progressTip1\">\n  <span class=\"downloaded\">0</span>\n  /\n  <span class=\"imgNum totalNumber\">0</span>\n  </div>\n  </div>\n  </div>\n\n  <ul class=\"progressBarList\"></ul>\n  </div>\n  `;\r\n        this.barHTML = `<li class=\"downloadBar\">\n  <div class=\"progressBar progressBar2\">\n  <div class=\"progress progress2\"></div>\n  </div>\n  <div class=\"progressTip progressTip2\">\n  <span class=\"fileName\"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${lang.transl('_已下载')}&nbsp;&nbsp;<span class=\"loaded\">0/0</span>KB\n  </div>\n  </li>`;\r\n        this.allProgressBar = [];\r\n        this.wrap = DOM.useSlot('progressBar', this.wrapHTML);\r\n        this.downloadedEl = this.wrap.querySelector('.downloaded');\r\n        this.progressColorEl = this.wrap.querySelector('.progress1');\r\n        this.listWrap = this.wrap.querySelector('.progressBarList');\r\n        this.totalNumberEl = this.wrap.querySelector('.totalNumber');\r\n    }\r\n    // 重设所有进度\r\n    reset(num, downloaded = 0) {\r\n        // 重置总进度条\r\n        this.setTotalProgress(downloaded);\r\n        this.totalNumberEl.textContent = store.result.length.toString();\r\n        // 重置子进度条\r\n        this.listWrap.innerHTML = this.barHTML.repeat(num);\r\n        this.wrap.style.display = 'block';\r\n        // 保存子进度条上需要使用到的元素\r\n        const allProgressBar = this.listWrap.querySelectorAll('.downloadBar');\r\n        this.allProgressBar = [];\r\n        for (const bar of allProgressBar) {\r\n            const data = {\r\n                name: bar.querySelector('.fileName'),\r\n                loaded: bar.querySelector('.loaded'),\r\n                progress: bar.querySelector('.progress'),\r\n            };\r\n            this.allProgressBar.push(data);\r\n        }\r\n    }\r\n    // 设置总进度条的进度\r\n    setTotalProgress(downloaded) {\r\n        this.downloadedEl.textContent = downloaded.toString();\r\n        const progress = (downloaded / store.result.length) * 100;\r\n        this.progressColorEl.style.width = progress + '%';\r\n    }\r\n    // 设置子进度条的进度\r\n    setProgress(index, data) {\r\n        const bar = this.allProgressBar[index];\r\n        bar.name.textContent = data.name;\r\n        bar.loaded.textContent = `${Math.floor(data.loaded / 1024)}/${Math.floor(data.total / 1024)}`;\r\n        const progress = data.loaded / data.total || 0; // 若结果为 NaN 则设为 0\r\n        bar.progress.style.width = progress * 100 + '%';\r\n    }\r\n    // 让某个子进度条显示警告色\r\n    showErrorColor(index, show) {\r\n        const bar = this.allProgressBar[index];\r\n        bar.name.classList[show ? 'add' : 'remove']('downloadError');\r\n    }\r\n}\r\nconst progressBar = new ProgressBar();\r\nexport { progressBar };\r\n","import { EVT } from './EVT';\r\n// 右侧的下载图标\r\nclass RightIcon {\r\n    constructor() {\r\n        this.icon = document.createElement('div');\r\n        this.addIcon();\r\n        this.bindEvents();\r\n    }\r\n    // 添加右侧下载按钮\r\n    addIcon() {\r\n        this.icon = document.createElement('div');\r\n        this.icon.textContent = '↓';\r\n        this.icon.id = 'rightButton';\r\n        document.body.appendChild(this.icon);\r\n    }\r\n    bindEvents() {\r\n        this.icon.addEventListener('click', () => {\r\n            EVT.fire(EVT.events.clickRightIcon);\r\n        });\r\n        window.addEventListener(EVT.events.hideCenterPanel, () => {\r\n            this.show();\r\n        });\r\n        window.addEventListener(EVT.events.showCenterPanel, () => {\r\n            this.hide();\r\n        });\r\n    }\r\n    show() {\r\n        this.icon.style.display = 'block';\r\n    }\r\n    hide() {\r\n        this.icon.style.display = 'none';\r\n    }\r\n}\r\nnew RightIcon();\r\n","import { filter } from './Filter';\r\nimport { store } from './Store';\r\nclass SaveData {\r\n    constructor() {\r\n        // 嵌入的文件只支持指定的网站，每个网站有固定的前缀\r\n        this.providerDict = {\r\n            youtube: 'https://www.youtube.com/watch?v=',\r\n            fanbox: 'https://www.pixiv.net/fanbox/',\r\n            gist: 'https://gist.github.com/',\r\n            soundcloud: 'https://soundcloud.com/',\r\n            vimeo: 'https://vimeo.com/',\r\n            twitter: 'https://twitter.com/',\r\n            gsuite: 'https://gsuite.google.com/',\r\n        };\r\n    }\r\n    receive(data) {\r\n        this.parsePost(data);\r\n    }\r\n    parsePost(data) {\r\n        if (data.body === null) {\r\n            return;\r\n        }\r\n        // 针对投稿进行检查，决定是否保留它\r\n        const id = data.id;\r\n        const fee = data.feeRequired;\r\n        const date = data.publishedDatetime;\r\n        const check = filter.check({ id, fee, date });\r\n        if (!check) {\r\n            return;\r\n        }\r\n        // 如果投稿检查通过，保存投稿信息\r\n        const result = {\r\n            id: data.id,\r\n            type: data.type,\r\n            title: data.title,\r\n            date,\r\n            fee,\r\n            user: data.user.name,\r\n            uid: data.user.userId,\r\n            tags: data.tags.join(','),\r\n            files: [],\r\n            links: {\r\n                name: 'links-' + data.id,\r\n                ext: 'txt',\r\n                size: null,\r\n                index: 0,\r\n                text: [],\r\n                url: '',\r\n            },\r\n        };\r\n        // 提取它的资源文件，并对每个资源进行检查，决定是否保存\r\n        let index = 0; // 资源的序号\r\n        // 提取 article 投稿的资源\r\n        if (data.type === 'article') {\r\n            // 保存图片资源\r\n            for (const [id, imageData] of Object.entries(data.body.imageMap)) {\r\n                index++;\r\n                const resource = this.getImageData(imageData, index);\r\n                resource !== null && result.files.push(resource);\r\n            }\r\n            // 保存 file 资源\r\n            for (const [id, fileData] of Object.entries(data.body.fileMap)) {\r\n                index++;\r\n                const resource = this.getFileData(fileData, index);\r\n                resource !== null && result.files.push(resource);\r\n            }\r\n            // 嵌入的资源只能保存到文本\r\n            const embedDataArr = [];\r\n            for (const [id, embedData] of Object.entries(data.body.embedMap)) {\r\n                embedDataArr.push([embedData.serviceProvider, embedData.contentId]);\r\n            }\r\n            const embedLinks = this.getEmbedLinks(embedDataArr, data.id);\r\n            embedLinks !== null && result.links.text.concat(embedLinks);\r\n            // 从正文文本里提取链接\r\n            let texts = '';\r\n            for (const block of data.body.blocks) {\r\n                if (block.type === 'p') {\r\n                    texts += block.text;\r\n                }\r\n            }\r\n            if (texts) {\r\n                const links = this.getTextLinks(texts, data.id);\r\n                links !== null && result.links.text.concat(links);\r\n            }\r\n        }\r\n        // 提取 image 投稿的资源\r\n        if (data.type === 'image') {\r\n            // 保存图片资源\r\n            for (const imageData of data.body.images) {\r\n                index++;\r\n                const resource = this.getImageData(imageData, index);\r\n                resource !== null && result.files.push(resource);\r\n            }\r\n        }\r\n        // 提取 file 投稿的资源\r\n        if (data.type === 'file') {\r\n            // 保存 file 资源\r\n            for (const fileData of data.body.files) {\r\n                index++;\r\n                const resource = this.getFileData(fileData, index);\r\n                resource !== null && result.files.push(resource);\r\n            }\r\n        }\r\n        // 提取 video 投稿的资源\r\n        // video 数据保存到文本\r\n        if (data.type === 'video') {\r\n            const video = data.body.video;\r\n            const embedDataArr = [\r\n                [video.serviceProvider, video.videoId],\r\n            ];\r\n            const embedLinks = this.getEmbedLinks(embedDataArr, data.id);\r\n            embedLinks !== null && result.links.text.concat(embedLinks);\r\n        }\r\n        // 非 article 的投稿都有 text 字段，这这里统一提取里面的链接\r\n        if (data.type !== 'article') {\r\n            const links = this.getTextLinks(data.body.text, data.id);\r\n            links !== null && result.links.text.concat(links);\r\n        }\r\n        // 打印这一个作品里抓取到的资源\r\n        store.addResult(result);\r\n    }\r\n    getImageData(imageData, index) {\r\n        if (filter.check({\r\n            ext: imageData.extension,\r\n        })) {\r\n            return {\r\n                name: imageData.id,\r\n                ext: imageData.extension,\r\n                size: null,\r\n                index,\r\n                url: imageData.originalUrl,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    getFileData(fileData, index) {\r\n        if (filter.check({\r\n            ext: fileData.extension,\r\n        })) {\r\n            return {\r\n                name: fileData.name,\r\n                ext: fileData.extension,\r\n                size: fileData.size,\r\n                index,\r\n                url: fileData.url,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    // 从文本里提取链接\r\n    getTextLinks(text, postId) {\r\n        const links = [];\r\n        const Reg = /https:\\/\\/[\\w=\\?\\.\\/&-]+/g;\r\n        const match = Reg.exec(text);\r\n        if (match && match.length > 0) {\r\n            for (const link of match) {\r\n                links.push(link);\r\n            }\r\n        }\r\n        return links;\r\n    }\r\n    // 从嵌入的资源里，获取资源的原网址\r\n    getEmbedLinks(dataArr, postId) {\r\n        const links = [];\r\n        for (const data of dataArr) {\r\n            const [serviceProvider, contentId] = data;\r\n            links.push(this.providerDict[serviceProvider] + contentId);\r\n        }\r\n        return links;\r\n    }\r\n}\r\nconst saveData = new SaveData();\r\nexport { saveData };\r\n","// 保存和初始化设置项\r\n// 只有部分设置会被保存\r\nimport { EVT } from './EVT';\r\nclass SaveSettings {\r\n    constructor(form) {\r\n        // 本地存储中使用的 name\r\n        this.storeName = 'fanboxSetting';\r\n        // 需要持久化保存的设置的默认值\r\n        this.optionDefault = {\r\n            setWantPage: -1,\r\n            image: true,\r\n            music: true,\r\n            video: true,\r\n            compressed: true,\r\n            ps: true,\r\n            other: true,\r\n            free: true,\r\n            pay: true,\r\n            feeSwitch: false,\r\n            fee: 500,\r\n            idRangeSwitch: false,\r\n            idRangeInput: 0,\r\n            postDate: false,\r\n            postDateStart: '',\r\n            saveLink: true,\r\n            userSetName: '{id}',\r\n            quietDownload: true,\r\n            downloadThread: 5,\r\n        };\r\n        // 需要持久化保存的设置\r\n        this.options = this.optionDefault;\r\n        this.form = form;\r\n        this.bindOptionEvent();\r\n        // 设置发生改变时，保存设置到本地存储\r\n        window.addEventListener(EVT.events.settingChange, (event) => {\r\n            const data = event.detail.data;\r\n            if (Reflect.has(this.optionDefault, data.name)) {\r\n                if (this.options[data.name] !== data.value) {\r\n                    ;\r\n                    this.options[data.name] = data.value;\r\n                    localStorage.setItem(this.storeName, JSON.stringify(this.options));\r\n                }\r\n            }\r\n        });\r\n        this.restoreOption();\r\n    }\r\n    // 恢复值是 Boolean 的设置项\r\n    // 给复选框使用\r\n    restoreBoolean(name) {\r\n        // 优先使用用户设置的值\r\n        if (typeof this.options[name] === 'boolean') {\r\n            this.form[name].checked = Boolean(this.options[name]);\r\n        }\r\n        else {\r\n            // 否则使用默认值\r\n            this.form[name].checked = Boolean(this.optionDefault[name]);\r\n        }\r\n        // 这里不能简单的使用 || 符号来处理，考虑如下情况：\r\n        // this.options[name] || this.optionDefault[name]\r\n        // 用户设置为 false，默认值为 true，使用 || 的话就恒为 true 了\r\n    }\r\n    // 恢复值是 string 的设置项\r\n    // 给单选按钮和文本框使用\r\n    restoreString(name) {\r\n        // 优先使用用户设置的值\r\n        if (this.options[name] !== undefined) {\r\n            this.form[name].value = this.options[name].toString();\r\n        }\r\n        else {\r\n            // 否则使用默认值\r\n            this.form[name].value = this.optionDefault[name].toString();\r\n        }\r\n    }\r\n    // 从持久化设置，缺省使用默认值，恢复下载区域的设置\r\n    restoreOption() {\r\n        const savedOption = localStorage.getItem(this.storeName);\r\n        // 读取保存的设置\r\n        if (savedOption) {\r\n            this.options = JSON.parse(savedOption);\r\n        }\r\n        else {\r\n            // 如果没有保存过，则不做处理\r\n            return;\r\n        }\r\n        this.restoreString('setWantPage');\r\n        this.restoreString('fee');\r\n        this.restoreString('idRangeInput');\r\n        this.restoreString('postDateStart');\r\n        this.restoreString('userSetName');\r\n        this.restoreString('downloadThread');\r\n        this.restoreBoolean('image');\r\n        this.restoreBoolean('music');\r\n        this.restoreBoolean('video');\r\n        this.restoreBoolean('compressed');\r\n        this.restoreBoolean('ps');\r\n        this.restoreBoolean('other');\r\n        this.restoreBoolean('free');\r\n        this.restoreBoolean('pay');\r\n        this.restoreBoolean('feeSwitch');\r\n        this.restoreBoolean('idRangeSwitch');\r\n        this.restoreBoolean('postDate');\r\n        this.restoreBoolean('saveLink');\r\n        this.restoreBoolean('quietDownload');\r\n    }\r\n    // 处理输入框： change 时直接保存 value\r\n    saveTextInput(name) {\r\n        const el = this.form[name];\r\n        el.addEventListener('change', () => {\r\n            this.emitChange(name, el.value);\r\n        });\r\n    }\r\n    // 处理复选框： click 时直接保存 checked\r\n    saveCheckBox(name) {\r\n        const el = this.form[name];\r\n        el.addEventListener('click', () => {\r\n            this.emitChange(name, el.checked);\r\n        });\r\n    }\r\n    // 处理单选框： click 时直接保存 value\r\n    saveRadio(name) {\r\n        const radios = this.form[name];\r\n        for (const radio of radios) {\r\n            radio.addEventListener('click', () => {\r\n                this.emitChange(name, radio.value);\r\n            });\r\n        }\r\n    }\r\n    // 绑定所有选项的事件，当选项变动触发 settingChange 事件\r\n    // 只可执行一次，否则事件会重复绑定\r\n    bindOptionEvent() {\r\n        // 保存下载的作品类型\r\n        this.saveTextInput('setWantPage');\r\n        this.saveTextInput('fee');\r\n        this.saveTextInput('idRangeInput');\r\n        this.saveTextInput('postDateStart');\r\n        this.saveTextInput('downloadThread');\r\n        this.saveCheckBox('image');\r\n        this.saveCheckBox('music');\r\n        this.saveCheckBox('video');\r\n        this.saveCheckBox('compressed');\r\n        this.saveCheckBox('ps');\r\n        this.saveCheckBox('other');\r\n        this.saveCheckBox('free');\r\n        this.saveCheckBox('pay');\r\n        this.saveCheckBox('feeSwitch');\r\n        this.saveCheckBox('idRangeSwitch');\r\n        this.saveCheckBox('postDate');\r\n        this.saveCheckBox('saveLink');\r\n        this.saveCheckBox('quietDownload');\r\n        // 保存命名规则\r\n        const userSetNameInput = this.form.userSetName;\r\n        ['change', 'focus'].forEach((ev) => {\r\n            userSetNameInput.addEventListener(ev, () => {\r\n                this.emitChange('userSetName', userSetNameInput.value);\r\n            });\r\n        });\r\n        window.addEventListener(EVT.events.resetOption, () => {\r\n            this.form.reset();\r\n            this.reset();\r\n        });\r\n    }\r\n    emitChange(name, value) {\r\n        EVT.fire(EVT.events.settingChange, { name: name, value: value });\r\n    }\r\n    // 重设选项\r\n    reset() {\r\n        // 将保存的选项恢复为默认值\r\n        this.options = this.optionDefault;\r\n        // 覆写本地存储里的设置为默认值\r\n        localStorage.setItem(this.storeName, JSON.stringify(this.options));\r\n        // 重设选项\r\n        this.restoreOption();\r\n        // 触发设置改变事件\r\n        EVT.fire(EVT.events.settingChange);\r\n    }\r\n}\r\nexport { SaveSettings };\r\n","import { lang } from './Lang';\r\nconst formHtml = `<form class=\"settingForm\">\n  <div class=\"tabsTitle\">\n    <div class=\"title\">${lang.transl('_抓取')}</div>\n    <div class=\"title\">${lang.transl('_下载')}</div>\n    <div class=\"title\">${lang.transl('_其他')}</div>\n  </div>\n  <div class=\"tabsContnet\">\n    <div class=\"con\">\n\n      <p class=\"option\" data-no=\"1\">\n      <span class=\"setWantPageWrap\">\n      <span class=\"has_tip settingNameStyle1 setWantPageTip1\" data-tip=\"${lang.transl('_投稿数量说明')}\" style=\"margin-right: 0px;\">${lang.transl('_投稿数量')}</span>\n      <span class=\"gray1\" style=\"margin-right: 10px;\"> ? </span>\n      <input type=\"text\" name=\"setWantPage\" class=\"setinput_style1 blue setWantPage\"\n      value = '-1'>\n      &nbsp;&nbsp;&nbsp;\n      <span class=\"setWantPageTip2 gray1\">-1 或者大于 0 的数字</span>\n      </span>\n      </p>\n\n      <p class=\"option\" data-no=\"2\">\n      <span class=\"settingNameStyle1\">${lang.transl('_文件类型')}</span>\n\n      <input type=\"checkbox\" name=\"image\" id=\"fileType1\" class=\"need_beautify checkbox_common\" checked>\n      <span class=\"beautify_checkbox\"></span>\n      <label for=\"fileType1\"> ${lang.transl('_图片')}&nbsp;</label>\n      \n      <input type=\"checkbox\" name=\"music\" id=\"fileType2\" class=\"need_beautify checkbox_common\" checked>\n      <span class=\"beautify_checkbox\"></span>\n      <label for=\"fileType2\"> ${lang.transl('_音乐')}&nbsp;</label>\n\n      <input type=\"checkbox\" name=\"video\" id=\"fileType3\" class=\"need_beautify checkbox_common\" checked>\n      <span class=\"beautify_checkbox\"></span>\n      <label for=\"fileType3\"> ${lang.transl('_视频')}&nbsp;</label>\n      \n      <input type=\"checkbox\" name=\"compressed\" id=\"fileType4\" class=\"need_beautify checkbox_common\" checked>\n      <span class=\"beautify_checkbox\"></span>\n      <label for=\"fileType4\"> ${lang.transl('_压缩文件')}&nbsp;</label>\n      \n      <input type=\"checkbox\" name=\"ps\" id=\"fileType5\" class=\"need_beautify checkbox_common\" checked>\n      <span class=\"beautify_checkbox\"></span>\n      <label for=\"fileType5\"> ${lang.transl('_PS文件')}&nbsp;</label>\n\n      <input type=\"checkbox\" name=\"other\" id=\"fileType6\" class=\"need_beautify checkbox_common\" checked>\n      <span class=\"beautify_checkbox\"></span>\n      <label for=\"fileType6\"> ${lang.transl('_其他')}&nbsp;</label>\n      </p>\n\n      <p class=\"option\" data-no=\"21\">\n      <span class=\"settingNameStyle1\">${lang.transl('_投稿类型')}</span>\n\n      <input type=\"checkbox\" name=\"free\" id=\"postType1\" class=\"need_beautify checkbox_common\" checked>\n      <span class=\"beautify_checkbox\"></span>\n      <label for=\"postType1\"> ${lang.transl('_免费投稿')}&nbsp;</label>\n\n      <input type=\"checkbox\" name=\"pay\" id=\"postType2\" class=\"need_beautify checkbox_common\" checked>\n      <span class=\"beautify_checkbox\"></span>\n      <label for=\"postType2\"> ${lang.transl('_付费投稿')}&nbsp;</label>\n      </p>\n\n      \n      <p class=\"option\" data-no=\"9\">\n      <span class=\"settingNameStyle1\">${lang.transl('_设置价格范围')}&nbsp;&nbsp; \n      <span class=\"gray1\"> ? </span></span>\n      <input type=\"checkbox\" name=\"feeSwitch\" class=\"need_beautify checkbox_switch\">\n      <span class=\"beautify_switch\"></span>\n      <span class=\"subOptionWrap\" data-show=\"feeSwitch\">\n\n      ${lang.transl('_最小值')}\n      <input type=\"text\" name=\"fee\" class=\"setinput_style1 w100 blue\" value=\"500\"> ${lang.transl('_日元')}\n      </span>\n      </p>\n      \n      <p class=\"option\" data-no=\"9\">\n      <span class=\"settingNameStyle1\">${lang.transl('_设置id范围')}&nbsp;&nbsp; \n      <span class=\"gray1\"> ? </span></span>\n      <input type=\"checkbox\" name=\"idRangeSwitch\" class=\"need_beautify checkbox_switch\">\n      <span class=\"beautify_switch\"></span>\n      <span class=\"subOptionWrap\" data-show=\"idRangeSwitch\">\n\n      ${lang.transl('_大于')}\n      <input type=\"text\" name=\"idRangeInput\" class=\"setinput_style1 w100 blue\" value=\"0\">\n      </span>\n      </p>\n\n      <p class=\"option\" data-no=\"10\">\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_设置投稿时间提示')}\">${lang.transl('_设置投稿时间')} <span class=\"gray1\"> ? </span></span>\n\n      <input type=\"checkbox\" name=\"postDate\" class=\"need_beautify checkbox_switch\">\n      <span class=\"beautify_switch\"></span>\n      <span class=\"subOptionWrap\" data-show=\"postDate\">\n      \n      ${lang.transl('_晚于')}\n      <input type=\"datetime-local\" name=\"postDateStart\" placeholder=\"yyyy-MM-dd HH:mm\" class=\"setinput_style1 postDate blue\" value=\"\">\n      </span>\n      </p>\n\n      <p class=\"option\" data-no=\"19\">\n      <span class=\"settingNameStyle1\">${lang.transl('_保存投稿中的外部链接')}&nbsp;&nbsp; \n      <span class=\"gray1\"> ? </span></span>\n      <input type=\"checkbox\" name=\"saveLink\" class=\"need_beautify checkbox_switch\" checked>\n      <span class=\"beautify_switch\"></span>\n      </p>\n      \n      <slot data-name=\"crawlBtns\" class=\"centerWrap_btns\"></slot>\n    </div>\n    <div class=\"con\">\n    <p class=\"option\" data-no=\"13\">\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_设置文件夹名的提示')}\">${lang.transl('_设置文件名')}<span class=\"gray1\"> ? </span></span>\n      <input type=\"text\" name=\"userSetName\" class=\"setinput_style1 blue fileNameRule\" value=\"{id}\">\n      &nbsp;\n      <select name=\"fileNameSelect\">\n        <option value=\"default\">…</option>\n        <option value=\"{id}\">{id}</option>\n        <option value=\"{title}\">{title}</option>\n        <option value=\"{tags}\">{tags}</option>\n        <option value=\"{name}\">{name}</option>\n        <option value=\"{ext}\">{ext}</option>\n        <option value=\"{date}\">{date}</option>\n        <option value=\"{fee}\">{fee}</option>\n        <option value=\"{user}\">{user}</option>\n        <option value=\"{uid}\">{uid}</option>\n        </select>\n      &nbsp;&nbsp;\n      <span class=\"showFileNameTip\">？</span>\n      </p>\n      <p class=\"fileNameTip tip\">\n      <strong>${lang\r\n    .transl('_设置文件夹名的提示')\r\n    .replace('<br>', '. ')}</strong>\n      <br>\n      <span class=\"blue\">{id}</span>\n      ${lang.transl('_命名标记id')}\n      <br>\n      <span class=\"blue\">{user}</span>\n      ${lang.transl('_命名标记user')}\n      <br>\n      <span class=\"blue\">{uid}</span>\n      ${lang.transl('_命名标记uid')}\n      <br>\n      <span class=\"blue\">{title}</span>\n      ${lang.transl('_命名标记title')}\n      <br>\n      <span class=\"blue\">{tags}</span>\n      ${lang.transl('_命名标记tags')}\n      <br>\n      <span class=\"blue\">{date}</span>\n      ${lang.transl('_命名标记date')}\n      <br>\n      ${lang.transl('_命名标记提醒')}\n      </p>\n      \n      <slot data-name=\"namingBtns\" class=\"centerWrap_btns\"></slot>\n\n      <p class=\"option\" data-no=\"16\">\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_线程数字')}\">${lang.transl('_设置下载线程')}<span class=\"gray1\"> ? </span></span>\n      <input type=\"text\" name=\"downloadThread\" class=\"setinput_style1 blue\" value=\"5\">\n      </p>\n\n      <p class=\"option\" data-no=\"17\">\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_自动下载的提示')}\">${lang.transl('_自动开始下载')}<span class=\"gray1\"> ? </span></span>\n      <input type=\"checkbox\" name=\"quietDownload\" id=\"setQuietDownload\" class=\"need_beautify checkbox_switch\" checked>\n      <span class=\"beautify_switch\"></span>\n      </p>\n\n      <slot data-name=\"downloadArea\"></slot>\n      <slot data-name=\"progressBar\"></slot>\n    </div>\n    <div class=\"con\">\n      \n      <slot data-name=\"otherBtns\" class=\"centerWrap_btns\"></slot>\n    </div>\n  </div>\n</form>`;\r\nexport default formHtml;\r\n","import { EVT } from './EVT';\r\nimport { DOM } from './DOM';\r\nimport { Colors } from './Colors';\r\nimport { lang } from './Lang';\r\nimport { SaveSettings } from './SaveSettings';\r\nimport formHtml from './SettingHTML';\r\n// 设置表单\r\nclass Settings {\r\n    constructor() {\r\n        this.activeClass = 'active';\r\n        this.chooseKeys = ['Enter', 'NumpadEnter']; // 让回车键可以控制复选框（浏览器默认只支持空格键）\r\n        this.form = DOM.useSlot('form', formHtml);\r\n        this.allCheckBox = this.form.querySelectorAll('input[type=\"checkbox\"]');\r\n        this.allRadio = this.form.querySelectorAll('input[type=\"radio\"]');\r\n        this.allSwitch = this.form.querySelectorAll('.checkbox_switch');\r\n        this.allLabel = this.form.querySelectorAll('label');\r\n        this.allTabTitle = this.form.querySelectorAll('.tabsTitle .title');\r\n        this.allTabCon = this.form.querySelectorAll('.tabsContnet .con');\r\n        this.bindEvents();\r\n        new SaveSettings(this.form);\r\n        // new SaveSettings 会初始化选项，但可能会有一些选项的值在初始化过程中没有发生改变，也就不会被监听到变化。所以这里需要直接初始化以下状态。\r\n        this.initFormBueatiful();\r\n        // 激活第一个选项卡\r\n        this.activeTab(0);\r\n    }\r\n    // 设置表单上美化元素的状态\r\n    initFormBueatiful() {\r\n        // 设置改变时，重设 label 激活状态\r\n        this.resetLabelActive();\r\n        // 重设该选项的子选项的显示/隐藏\r\n        this.resetSubOptionDisplay();\r\n    }\r\n    // 设置激活的选项卡\r\n    activeTab(no = 0) {\r\n        for (const title of this.allTabTitle) {\r\n            title.classList.remove(this.activeClass);\r\n        }\r\n        this.allTabTitle[no].classList.add(this.activeClass);\r\n        for (const con of this.allTabCon) {\r\n            con.style.display = 'none';\r\n        }\r\n        this.allTabCon[no].style.display = 'block';\r\n    }\r\n    bindEvents() {\r\n        // 给美化的复选框绑定功能\r\n        for (const checkbox of this.allCheckBox) {\r\n            this.bindCheckboxEvent(checkbox);\r\n        }\r\n        // 给美化的单选按钮绑定功能\r\n        for (const radio of this.allRadio) {\r\n            this.bindRadioEvent(radio);\r\n        }\r\n        // 处理 label 状态\r\n        window.addEventListener(EVT.events.settingChange, () => {\r\n            this.initFormBueatiful();\r\n        });\r\n        // 在选项卡的标题上触发事件时，激活对应的选项卡\r\n        for (let index = 0; index < this.allTabTitle.length; index++) {\r\n            ;\r\n            ['click', 'mouseenter'].forEach((name) => {\r\n                this.allTabTitle[index].addEventListener(name, () => {\r\n                    this.activeTab(index);\r\n                });\r\n            });\r\n        }\r\n        // 当抓取完毕可以开始下载时，切换到“下载”选项卡\r\n        window.addEventListener(EVT.events.crawlFinish, () => {\r\n            this.activeTab(1);\r\n        });\r\n        // 预览文件名\r\n        DOM.addBtn('namingBtns', Colors.green, lang.transl('_预览文件名')).addEventListener('click', () => {\r\n            EVT.fire(EVT.events.previewFileName);\r\n        }, false);\r\n        // 显示命名字段提示\r\n        this.form\r\n            .querySelector('.showFileNameTip')\r\n            .addEventListener('click', () => DOM.toggleEl(document.querySelector('.fileNameTip')));\r\n        // 输入框获得焦点时自动选择文本（文件名输入框例外）\r\n        const centerInputs = this.form.querySelectorAll('input[type=text]');\r\n        for (const el of centerInputs) {\r\n            if (el.name !== 'userSetName') {\r\n                el.addEventListener('focus', function () {\r\n                    this.select();\r\n                });\r\n            }\r\n        }\r\n        // 把下拉框的选择项插入到文本框里\r\n        this.insertValueToInput(this.form.fileNameSelect, this.form.userSetName);\r\n    }\r\n    // 把下拉框的选择项插入到文本框里\r\n    insertValueToInput(from, to) {\r\n        from.addEventListener('change', () => {\r\n            if (from.value !== 'default') {\r\n                // 把选择项插入到光标位置,并设置新的光标位置\r\n                const position = to.selectionStart;\r\n                to.value =\r\n                    to.value.substr(0, position) +\r\n                        from.value +\r\n                        to.value.substr(position, to.value.length);\r\n                to.selectionStart = position + from.value.length;\r\n                to.selectionEnd = position + from.value.length;\r\n                to.focus();\r\n            }\r\n        });\r\n    }\r\n    // 设置复选框的事件\r\n    bindCheckboxEvent(el) {\r\n        // 让复选框支持用回车键选择\r\n        el.addEventListener('keydown', (event) => {\r\n            if (this.chooseKeys.includes(event.code)) {\r\n                el.checked = !el.checked;\r\n                this.emitChange(el.name, el.checked);\r\n            }\r\n        });\r\n        // 点击美化按钮，反转复选框的值\r\n        el.nextElementSibling.addEventListener('click', () => {\r\n            el.checked = !el.checked;\r\n            this.emitChange(el.name, el.checked);\r\n        });\r\n        // 点击它的 label 时，传递它的值\r\n        const label = this.form.querySelector(`label[for=\"${el.id}\"]`);\r\n        if (label) {\r\n            label.addEventListener('click', () => {\r\n                // 点击复选框的 label 不要手动修改 checked ，因为浏览器会自动处理\r\n                this.emitChange(el.name, el.checked);\r\n            });\r\n        }\r\n    }\r\n    // 设置单选控件的事件\r\n    bindRadioEvent(el) {\r\n        // 点击美化按钮，选择当前单选控件\r\n        el.nextElementSibling.addEventListener('click', () => {\r\n            el.checked = true;\r\n            // 对于单选按钮，它的值是 value，不是 checked\r\n            this.emitChange(el.name, this.form[el.name].value);\r\n        });\r\n        // 点击它的 label 时，传递它的值\r\n        const label = this.form.querySelector(`label[for=\"${el.id}\"]`);\r\n        if (label) {\r\n            label.addEventListener('click', () => {\r\n                this.emitChange(el.name, this.form[el.name].value);\r\n            });\r\n        }\r\n    }\r\n    // 当选项的值被改变时，触发 settingChange 事件\r\n    emitChange(name, value) {\r\n        EVT.fire(EVT.events.settingChange, { name: name, value: value });\r\n    }\r\n    // 重设 label 的激活状态\r\n    resetLabelActive() {\r\n        // 设置复选框的 label 的激活状态\r\n        for (const checkbox of this.allCheckBox) {\r\n            this.setLabelActive(checkbox);\r\n        }\r\n        // 设置单选按钮的 label 的激活状态\r\n        for (const radio of this.allRadio) {\r\n            this.setLabelActive(radio);\r\n        }\r\n    }\r\n    // 设置 input 元素对应的 label 的激活状态\r\n    setLabelActive(input) {\r\n        const label = this.form.querySelector(`label[for=\"${input.id}\"]`);\r\n        if (label) {\r\n            const method = input.checked ? 'add' : 'remove';\r\n            label.classList[method]('active');\r\n        }\r\n    }\r\n    // 重设子选项的显示/隐藏\r\n    resetSubOptionDisplay() {\r\n        for (const _switch of this.allSwitch) {\r\n            const subOption = this.form.querySelector(`.subOptionWrap[data-show=\"${_switch.name}\"]`);\r\n            if (subOption) {\r\n                subOption.style.display = _switch.checked ? 'inline' : 'none';\r\n            }\r\n        }\r\n    }\r\n}\r\nconst settings = new Settings();\r\nconst form = settings.form;\r\nexport { form };\r\n","// 仓库\r\nimport { EVT } from './EVT';\r\n// 存储抓取结果和状态\r\nclass Store {\r\n    constructor() {\r\n        this.resultMeta = []; // 储存抓取结果的元数据\r\n        this.result = []; // 储存抓取结果\r\n        // 储存和下载有关的状态\r\n        this.states = {\r\n            allowWork: true,\r\n            quickDownload: false,\r\n        };\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        const allowWorkTrue = [\r\n            EVT.events.crawlFinish,\r\n            EVT.events.crawlEmpty,\r\n            EVT.events.crawlError,\r\n            EVT.events.downloadPause,\r\n            EVT.events.downloadStop,\r\n        ];\r\n        allowWorkTrue.forEach((type) => {\r\n            window.addEventListener(type, () => {\r\n                this.states.allowWork = true;\r\n            });\r\n        });\r\n        const allowWorkFalse = [EVT.events.crawlStart, EVT.events.downloadStart];\r\n        allowWorkFalse.forEach((type) => {\r\n            window.addEventListener(type, () => {\r\n                this.states.allowWork = false;\r\n            });\r\n        });\r\n        window.addEventListener(EVT.events.crawlStart, () => {\r\n            this.resetResult();\r\n        });\r\n        window.addEventListener(EVT.events.downloadComplete, () => {\r\n            this.resetStates();\r\n        });\r\n    }\r\n    getCommonData(data) {\r\n        return {\r\n            id: data.id,\r\n            type: data.type,\r\n            title: data.title,\r\n            date: data.date,\r\n            fee: data.fee,\r\n            user: data.user,\r\n            uid: data.uid,\r\n            tags: data.tags,\r\n        };\r\n    }\r\n    // 添加每个作品的信息。只需要传递有值的属性\r\n    addResult(data) {\r\n        this.resultMeta.push(data);\r\n        // 为投稿里的每个 files 生成一份数据\r\n        const files = data.files;\r\n        for (const fileData of files) {\r\n            const result = Object.assign(this.getCommonData(data), fileData);\r\n            this.result.push(result);\r\n        }\r\n        // 为投稿里的所有 text 生成一份数据\r\n        if (data.links.text.length > 0) {\r\n            const text = data.links.text.join('\\r\\n');\r\n            const blob = new Blob([text], {\r\n                type: 'text/plain',\r\n            });\r\n            data.links.url = URL.createObjectURL(blob);\r\n            const result = Object.assign(this.getCommonData(data), data.links);\r\n            this.result.push(result);\r\n        }\r\n    }\r\n    resetResult() {\r\n        this.resultMeta = [];\r\n        this.result = [];\r\n    }\r\n    resetStates() {\r\n        this.states.allowWork = true;\r\n        this.states.quickDownload = false;\r\n    }\r\n}\r\nconst store = new Store();\r\nexport { store };\r\n","// 显示自定义的提示\r\nclass Tip {\r\n    constructor() {\r\n        this.tipEl = document.createElement('div'); // tip 元素\r\n        this.addTipEl();\r\n    }\r\n    // 显示提示\r\n    addTipEl() {\r\n        const tipHTML = `<div id=\"tip\"></div>`;\r\n        document.body.insertAdjacentHTML('beforeend', tipHTML);\r\n        this.tipEl = document.getElementById('tip');\r\n        const tips = document.querySelectorAll('.has_tip');\r\n        for (const el of tips) {\r\n            for (const ev of ['mouseenter', 'mouseleave']) {\r\n                el.addEventListener(ev, (event) => {\r\n                    const e = (event || window.event);\r\n                    const text = el.dataset.tip;\r\n                    this.showTip(text, {\r\n                        type: ev === 'mouseenter' ? 1 : 0,\r\n                        x: e.clientX,\r\n                        y: e.clientY,\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // 显示中间面板上的提示。参数 arg 指示鼠标是移入还是移出，并包含鼠标位置\r\n    showTip(text, arg) {\r\n        if (!text) {\r\n            throw new Error('No tip text.');\r\n        }\r\n        if (arg.type === 1) {\r\n            this.tipEl.innerHTML = text;\r\n            this.tipEl.style.left = arg.x + 30 + 'px';\r\n            this.tipEl.style.top = arg.y - 30 + 'px';\r\n            this.tipEl.style.display = 'block';\r\n        }\r\n        else if (arg.type === 0) {\r\n            this.tipEl.style.display = 'none';\r\n        }\r\n    }\r\n}\r\nnew Tip();\r\n","// 在标题栏上显示下载器工作状态\r\nimport { pageType } from './PageType';\r\nclass TitleBar {\r\n    constructor() {\r\n        /*\r\n        本程序的状态会以 [string] 形式添加到 title 最前面，并闪烁提醒\r\n        string 和含义列表如下：\r\n        ↑ 抓取中\r\n        → 等待下一步操作（搜索页）\r\n        ▶ 可以开始下载\r\n        ↓ 下载中\r\n        ║ 下载暂停\r\n        ■ 下载停止\r\n        √ 下载完毕\r\n          空格，当需要闪烁标题时使用\r\n        */\r\n        this.status = ['↑', '→', '▶', '↓', '║', '■', '√', ' '];\r\n        this.timer = 0; // 修改 title 的定时器\r\n    }\r\n    // 检查标题里有没有本程序定义的状态字符\r\n    haveStatus(status = '') {\r\n        if (!status) {\r\n            // 没有传递 status，则检查所有标记\r\n            for (const status of this.status) {\r\n                const str = `[${status}]`;\r\n                if (document.title.includes(str)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // 检查指定标记\r\n            const str = `[${status}]`;\r\n            return document.title.includes(str);\r\n        }\r\n        return false;\r\n    }\r\n    // 重设 title\r\n    reset() {\r\n        const type = pageType.getPageType();\r\n        clearInterval(this.timer);\r\n        // 储存标题的 mete 元素。在某些页面不存在，有时也与实际上的标题不一致。\r\n        const ogTitle = document.querySelector('meta[property=\"og:title\"]');\r\n        // 无刷新自动加载的页面里，og:title 标签是最早更新标题的，内容也一致。\r\n        if (ogTitle && (type == 1 || type === 2)) {\r\n            document.title = ogTitle.content;\r\n        }\r\n        else {\r\n            // 如果当前 title 里有状态提醒，则设置为状态后面的文字\r\n            if (this.haveStatus()) {\r\n                const index = document.title.indexOf(']');\r\n                document.title = document.title.substr(index + 1, document.title.length);\r\n            }\r\n        }\r\n    }\r\n    // 修改title\r\n    change(string) {\r\n        const state = `[${string}]`;\r\n        // 如果 title 里没有状态，就添加状态\r\n        if (!this.haveStatus()) {\r\n            document.title = `${state} ${document.title}`;\r\n        }\r\n        else {\r\n            // 如果已经有状态了，则替换为新当前传入的状态\r\n            document.title = document.title.replace(/\\[.?\\]/, state);\r\n        }\r\n        // 闪烁提醒，其实是把 [▶] 或 [→] 与空白 [ ] 来回切换\r\n        if (string === '▶' || string === '→') {\r\n            this.timer = window.setInterval(() => {\r\n                if (this.haveStatus(string)) {\r\n                    // 如果含有状态，就替换成空白\r\n                    document.title = document.title.replace(state, '[ ]');\r\n                }\r\n                else {\r\n                    if (this.haveStatus(' ')) {\r\n                        // 如果含有空白，就替换成状态\r\n                        document.title = document.title.replace('[ ]', state);\r\n                    }\r\n                    else {\r\n                        // 如果都没有，一般是页面切换了，标题被重置了，取消执行闪烁（此时也根本无法形成闪烁效果了）\r\n                        clearInterval(this.timer);\r\n                    }\r\n                }\r\n            }, 500);\r\n        }\r\n        else {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n}\r\nconst titleBar = new TitleBar();\r\nexport { titleBar };\r\n","const langText = {\r\n    _只下载已收藏: [\r\n        '只下载已收藏',\r\n        'ブックマークのみをダウンロードする',\r\n        'Download only bookmarked works',\r\n        '只下載已收藏',\r\n    ],\r\n    _只下载已收藏的提示: [\r\n        '只下载已经收藏的作品',\r\n        'ブックマークした作品のみをダウンロードする',\r\n        'Download only bookmarked works',\r\n        '只下載已經收藏的作品',\r\n    ],\r\n    _下载作品类型: [\r\n        '下载作品类型',\r\n        'ダウンロード作品の種類',\r\n        'Download work type',\r\n        '下載作品類型',\r\n    ],\r\n    _下载作品类型的提示: [\r\n        '下载哪些类型的作品',\r\n        'どの種類の作品をダウンロードしますか',\r\n        'Which types of works to download',\r\n        '下載哪些類型的作品',\r\n    ],\r\n    _多p下载前几张: [\r\n        '设置作品张数',\r\n        '作品ごとにダウンロード画像の数',\r\n        'Number of images downloaded per work',\r\n        '設定作品張數',\r\n    ],\r\n    _多p下载前几张提示: [\r\n        '下载每个作品的前几张图片。默认值 0 表示全部下载。',\r\n        '各作品の画像が最初の何枚をダウンロードしますか？ デフォルト値の 0 は、すべてをダウンロードします。',\r\n        'Download the first few images of each piece. The default value of 0 means all downloads.',\r\n        '下載每個作品的前幾張圖片。預設值 0 表示全部下載。',\r\n    ],\r\n    _不能含有tag: [\r\n        '不能含有 tag&nbsp;',\r\n        '指定した tag を除外する',\r\n        'Exclude specified tag',\r\n        '不能含有 tag&nbsp;',\r\n    ],\r\n    _排除tag的提示文字: [\r\n        '您可在下载前设置要排除的tag，这样在下载时将不会下载含有这些tag的作品。不区分大小写；如需排除多个tag，请使用英文逗号分隔。请注意要排除的tag的优先级大于要包含的tag的优先级。',\r\n        'ダウンロード前に、除外する tag を設定できます。大文字と小文字を区別しない；複数の tag を設定する必要がある場合は、「,」で区切ってください。除外された tag は、必要な tag よりも優先されます',\r\n        \"Before downloading, you can set the tag you want to exclude. Not case sensitive; If you need to set multiple tags, you can use ',' separated. The excluded tag takes precedence over the included tag\",\r\n        '您可在下載前設定要排除的tag，這樣在下載時將不會下載含有這些tag的作品。不區分大小寫；如需排除多個tag，請使用英文逗號分隔。請注意要排除的tag的優先等級大於要包含的tag的優先等級。',\r\n    ],\r\n    _设置了排除tag之后的提示: [\r\n        '排除 tag：',\r\n        '以下の tag を除外：',\r\n        'Excludes tag: ',\r\n        '排除 tag：',\r\n    ],\r\n    _必须含有tag: [\r\n        '必须含有 tag&nbsp;',\r\n        '必要な tag&nbsp;',\r\n        'Must contain tag',\r\n        '必須含有 tag&nbsp;',\r\n    ],\r\n    _必须tag的提示文字: [\r\n        '您可在下载前设置作品里必须包含的tag，不区分大小写；如需包含多个tag，请使用英文逗号分隔。',\r\n        'ダウンロードする前に、必要な tag を設定することができます。大文字と小文字を区別しない；複数の tag を設定する必要がある場合は、「,」で区切ってください。',\r\n        \"Before downloading, you can set the tag that must be included. Not case sensitive; If you need to set multiple tags, you can use ',' separated. \",\r\n        '您可在下載前設定作品裡必須包含的tag，不區分大小寫；如需包含多個tag，請使用英文逗號分隔。',\r\n    ],\r\n    _设置了必须tag之后的提示: [\r\n        '包含 tag：',\r\n        '以下の tag を含める：',\r\n        'Include tag: ',\r\n        '包含 tag：',\r\n    ],\r\n    _筛选宽高的按钮文字: [\r\n        '设置宽高条件',\r\n        '幅と高さの条件を設定する',\r\n        'Set the width and height',\r\n        '設定寬高條件',\r\n    ],\r\n    _筛选宽高的按钮Title: [\r\n        '在下载前，您可以设置要下载的图片的宽高条件。',\r\n        'ダウンロードする前に、画像の幅と高さの条件を設定できます。',\r\n        'Before downloading, you can set the width and height conditions of the images you want to download.',\r\n        '在下載前，您可以設定要下載的圖片的寬高條件。',\r\n    ],\r\n    _设置宽高比例: [\r\n        '设置宽高比例',\r\n        '縦横比を設定する',\r\n        'Set the aspect ratio',\r\n        '設定寬高比例',\r\n    ],\r\n    _设置宽高比例Title: [\r\n        '设置宽高比例，也可以手动输入宽高比',\r\n        '縦横比を設定する、手動で縦横比を入力することもできる',\r\n        'Set the aspect ratio, or manually type the aspect ratio',\r\n        '設定寬高比，也可以手動輸入寬高比',\r\n    ],\r\n    _不限制: ['不限制', '無制限', 'not limited', '不限制'],\r\n    _横图: ['横图', '横長', 'Horizontal', '橫圖'],\r\n    _竖图: ['竖图', '縦長', 'Vertical', '豎圖'],\r\n    _输入宽高比: ['宽高比 >=', '縦横比 >=', 'Aspect ratio >=', '寬高比 >='],\r\n    _设置了宽高比之后的提示: [\r\n        '宽高比：{}',\r\n        '縦横比：{}',\r\n        'Aspect ratio: {}',\r\n        '寬高比：{}',\r\n    ],\r\n    _宽高比必须是数字: [\r\n        '宽高比必须是数字',\r\n        '縦横比は数値でなければなりません',\r\n        'The aspect ratio must be a number',\r\n        '寬高比必須是數字',\r\n    ],\r\n    _筛选宽高的提示文字: [\r\n        '请输入最小宽度和最小高度，不会下载不符合要求的图片。',\r\n        '最小幅と最小高さを入力してください。要件を満たしていない画像はダウンロードされません。',\r\n        'Please type the minimum width and minimum height. Will not download images that do not meet the requirements',\r\n        '請輸入最小寬度和最小高度，不會下載不符合要求的圖片。',\r\n    ],\r\n    _本次输入的数值无效: [\r\n        '本次输入的数值无效',\r\n        '無効な入力',\r\n        'Invalid input',\r\n        '本次輸入的數值無效',\r\n    ],\r\n    _设置了筛选宽高之后的提示文字p1: [\r\n        '宽度 >= ',\r\n        '幅 >= ',\r\n        'Width >= ',\r\n        '寬度 >= ',\r\n    ],\r\n    _或者: [' 或者 ', ' または ', ' or ', ' 或是 '],\r\n    _并且: [' 并且 ', ' そして ', ' and ', ' 並且 '],\r\n    _高度设置: ['高度 >= ', '高さ >= ', 'height >= ', '高度 >= '],\r\n    _个数: [\r\n        '设置作品数量',\r\n        '作品数を設定する',\r\n        'Set the number of works',\r\n        '設定作品數量',\r\n    ],\r\n    _页数: [\r\n        '设置页面数量',\r\n        'ページ数を設定する',\r\n        'Set the number of pages',\r\n        '設定頁面數量',\r\n    ],\r\n    _筛选收藏数的按钮文字: [\r\n        '设置收藏数量',\r\n        'ブックマークされた数を設定する',\r\n        'Set the bookmarkCount conditions',\r\n        '設定收藏數量',\r\n    ],\r\n    _筛选收藏数的按钮Title: [\r\n        '在下载前，您可以设置对收藏数量的要求。',\r\n        'ダウンロードする前に、ブックマークされた数の条件を設定することができます。',\r\n        'Before downloading, You can set the requirements for the number of bookmarks.',\r\n        '在下載前，您可以設定對收藏數量的要求。',\r\n    ],\r\n    _设置收藏数量: [\r\n        '设置收藏数量',\r\n        'ブックマークされた数を設定する',\r\n        'Set the number of bookmarks',\r\n        '設定收藏數量',\r\n    ],\r\n    _设置收藏数量的提示: [\r\n        '如果作品的收藏数小于设置的数字，作品不会被下载。',\r\n        '作品のブックマークされた数が設定された数字よりも少ない場合、作品はダウンロードされません。',\r\n        'If the number of bookmarks of the work is less than the set number, the work will not be downloaded.',\r\n        '如果作品的收藏數小於設定的數字，作品不會被下載。',\r\n    ],\r\n    _筛选收藏数的提示文字: [\r\n        '请输入一个数字，如果作品的收藏数小于这个数字，作品不会被下载。',\r\n        '数字を入力してください。 作品のブックマークされた数がこの数字より少ない場合、作品はダウンロードされません。',\r\n        'Please type a number. If the number of bookmarks of the work is less than this number, the work will not be downloaded.',\r\n        '請輸入一個數字，如果作品的收藏數小於這個數字，作品不會被下載。',\r\n    ],\r\n    _收藏数大于: [\r\n        '收藏数 >= ',\r\n        'ブックマークの数 >= ',\r\n        'Number of bookmarks >= ',\r\n        '收藏數 >= ',\r\n    ],\r\n    _收藏数小于: [\r\n        '收藏数 <= ',\r\n        'ブックマークの数 <= ',\r\n        'Number of bookmarks <= ',\r\n        '收藏數 <= ',\r\n    ],\r\n    _本次任务已全部完成: [\r\n        '本次任务已全部完成。',\r\n        'このタスクは完了しました。',\r\n        'This task has been completed.',\r\n        '本次工作已全部完成',\r\n    ],\r\n    _本次任务条件: [\r\n        '本次任务条件: ',\r\n        'このタスクの条件：',\r\n        'This task condition: ',\r\n        '本次工作條件：',\r\n    ],\r\n    _参数不合法: [\r\n        '参数不合法，本次操作已取消。',\r\n        'パラメータは有効ではありません。この操作はキャンセルされました。',\r\n        'Parameter is not legal, this operation has been canceled.',\r\n        '參數不合法，本次動作已取消。',\r\n    ],\r\n    _checkWantPageRule1Arg3: [\r\n        '从本页开始下载-num-个作品',\r\n        'このページから -num- 枚の作品をダウンロード。',\r\n        'Download -num- works from this page.',\r\n        '從本頁開始下載-num-個作品',\r\n    ],\r\n    _checkWantPageRule1Arg4: [\r\n        '向下获取所有作品',\r\n        'このページからすべての作品をダウンロードする。',\r\n        'download all the work from this page.',\r\n        '向下取得所有作品',\r\n    ],\r\n    _checkWantPageRule1Arg8: [\r\n        '从本页开始下载<br>如果要限制下载的页数，请输入从1开始的数字，1为仅下载本页。',\r\n        'このページからダウンロードする<br>ダウンロードするページを設定する場合は、1から始まる数字を入力してください。 1は現在のページのみをダウンロードする。',\r\n        'Download from this page<br>If you want to set the number of pages to download, type a number starting at 1. This page is 1.',\r\n        '從本頁開始下載<br>如果要限制下載的頁數，請輸入從1開始的數字，1為僅下載本頁。',\r\n    ],\r\n    _checkWantPageRule1Arg6: [\r\n        '从本页开始下载-num-页',\r\n        '現在のページから -num- ページをウンロードします',\r\n        'download -num- pages from the current page',\r\n        '從本頁開始下載-num-頁',\r\n    ],\r\n    _checkWantPageRule1Arg7: [\r\n        '下载所有页面',\r\n        'すべてのページをダウンロードする',\r\n        'download all pages',\r\n        '下載所有頁面',\r\n    ],\r\n    _checkWantPageRule1Arg9: [\r\n        '下载 -num- 个相关作品',\r\n        '関連作品 -num- 枚をダウンロードする。',\r\n        'download -num- related works.',\r\n        '下載 -num- 個相關作品',\r\n    ],\r\n    _checkWantPageRule1Arg10: [\r\n        '下载所有相关作品',\r\n        '関連作品をすべてダウンロードする。',\r\n        'download all related works.',\r\n        '下載所有相關作品',\r\n    ],\r\n    _checkWantPageRule1Arg11: [\r\n        '下载推荐作品',\r\n        'お勧め作品をダウンロードする',\r\n        'download recommend works',\r\n        '下載推薦作品',\r\n    ],\r\n    _checkWantPageRule1Arg12: [\r\n        '下载排行榜前 -num- 个作品',\r\n        'ランク前 -num- 位の作品をダウンロードする。',\r\n        'download the top -num- works in the ranking list',\r\n        '下載排行榜前 -num- 個作品',\r\n    ],\r\n    _请输入最低收藏数和要抓取的页数: [\r\n        '请输入最低收藏数和要抓取的页数，用英文逗号分开。\\n类似于下面的形式: \\n1000,1000',\r\n        'ボックマークの最小数とクロールするページ数を，「,」で区切って入力してください。\\n例えば：\\n1000,1000',\r\n        \"Please type the minimum number of bookmarks, and the number of pages to be crawled, separated by ','.\\nE.g:\\n1000,1000\",\r\n        '請輸入最低收藏數和要擷取的頁數，用英文逗號分開。\\n類似於下面的形式: \\n1000,1000',\r\n    ],\r\n    _wantPage弹出框文字PageType10: [\r\n        '您想要下载多少页？请输入数字。\\r\\n当前模式下，列表页的页数最多只有',\r\n        'ダウンロードしたいページ数を入力してください。 \\r\\n最大値：',\r\n        'Please type the number of pages you want to download.\\r\\n The maximum value is ',\r\n        '您想要下載多少頁？請輸入數字。\\r\\n目前模式下，清單頁的頁數最多只有',\r\n    ],\r\n    _输入超过了最大值: [\r\n        '您输入的数字超过了最大值',\r\n        '入力した番号が最大値を超えています',\r\n        'The number you entered exceeds the maximum',\r\n        '您輸入的數字超過了最大值',\r\n    ],\r\n    _任务开始1: [\r\n        '从本页开始下载{}页',\r\n        'このページから {} ページをダウンロードする',\r\n        'download {} pages from this page',\r\n        '從本頁開始下載{}頁',\r\n    ],\r\n    _任务开始0: ['任务开始', 'タスクが開始されます', 'Task starts', '工作開始'],\r\n    _checkNotdownTypeAll: [\r\n        '由于您排除了所有作品类型，本次任务已取消。',\r\n        'すべての種類の作品を除外したため、タスクはキャンセルされました。',\r\n        'Because you excluded all types of work, the task was canceled.',\r\n        '由於您排除了所有作品類型，本次工作已取消。',\r\n    ],\r\n    _checkNotdownTypeResult: [\r\n        '排除作品类型：',\r\n        'これらのタイプの作品を除外します：',\r\n        'Excludes these types of works: ',\r\n        '排除作品類型：',\r\n    ],\r\n    _多图作品: [\r\n        '多图作品',\r\n        'マルチイメージ作品',\r\n        'Multi-image works',\r\n        '多圖作品',\r\n    ],\r\n    _多图下载设置: [\r\n        '多图下载设置',\r\n        'マルチイメージ設定',\r\n        'Download multi-image works',\r\n        '多圖下載設定',\r\n    ],\r\n    _怎样下载多图作品: [\r\n        '怎样下载多图作品？',\r\n        'どのようにマルチイメージ作品をダウンロードしますか？',\r\n        'How to download multi-image works?',\r\n        '怎样下載多圖作品？',\r\n    ],\r\n    _多图建立目录: [\r\n        '多图建立目录',\r\n        'マルチイメージにフォルダを作成',\r\n        'Create directory for multi-image works',\r\n        '多圖建立目錄',\r\n    ],\r\n    _多图建立目录提示: [\r\n        '当你下载多图作品时，下载器可以自动创建一个目录，保存里面的图片。',\r\n        'マルチイメージをダウンロードする時、自動的にフォルダを作成し、イメージをその中で保存することができます。',\r\n        'When you download a multi-image work, the downloader can automatically create a directory and save the images inside.',\r\n        '當你下載多圖作品時，下載器可以自動創建一個目錄，保存裏面的圖片。',\r\n    ],\r\n    _不下载: ['不下载', '必要なし', 'No', '不下載'],\r\n    _全部下载: ['全部下载', '全部ダウンロード', 'Yes', '全部下載'],\r\n    _下载前几张图片: [\r\n        '下载前几张图片：',\r\n        '最初のいくつかの画像：',\r\n        'First few images:',\r\n        '下載前幾張圖片：',\r\n    ],\r\n    _不下载多图作品: [\r\n        '不下载多图作品',\r\n        'マルチイメージ作品をダウンロードしない',\r\n        'Do not download multi-image works',\r\n        '不下載多圖作品',\r\n    ],\r\n    _多图作品下载前n张图片: [\r\n        '多图作品下载前 {} 张图片',\r\n        'マルチイメージ作品は、最初の {} イメージをダウンロードします',\r\n        'Multi-image works download the first {} images',\r\n        '多圖作品下載前 {} 張圖片',\r\n    ],\r\n    _插画: ['插画 ', 'イラスト', 'Illustrations', '插畫 '],\r\n    _漫画: ['漫画 ', '漫画', 'Manga', '漫畫 '],\r\n    _动图: ['动图 ', 'うごイラ', 'Ugoira', '動圖 '],\r\n    _动图保存格式: [\r\n        '动图保存格式',\r\n        'うごイラをどのタイプが保存するか',\r\n        'Save the ugoira work as',\r\n        '動圖儲存格式',\r\n    ],\r\n    _动图保存格式title: [\r\n        '下载动图时，可以把它转换成视频文件',\r\n        'うごイラをダウンロードするとき、動画に変換することができます。',\r\n        'When you download a ugoira work, you can convert it to a video file.',\r\n        '下載動圖時，可以將它轉換為影片檔案',\r\n    ],\r\n    _webmVideo: ['WebM 视频', 'WebM ビデオ', 'WebM video', 'WebM 視頻'],\r\n    _gif: ['GIF 图片', 'GIF 画像', 'GIF picture', 'GIF 圖片'],\r\n    _zipFile: ['Zip 文件', 'ZIP ファイル', 'Zip file', 'Zip 檔案'],\r\n    _当前作品个数: [\r\n        '当前有 {} 个作品 ',\r\n        '今は　{}　枚の作品があります ',\r\n        'There are now {} works ',\r\n        '目前有 {} 個作品 ',\r\n    ],\r\n    _排行榜进度: [\r\n        '已抓取本页面第{}部分',\r\n        'このページの第　{}　部がクロールされました',\r\n        'Part {} of this page has been crawled',\r\n        '已擷取本頁面第{}部分',\r\n    ],\r\n    _新作品进度: [\r\n        '已抓取本页面 {} 个作品',\r\n        'このページの {} つの作品をクロールしました',\r\n        'This page has been crawled {} works',\r\n        '已擷取本頁面 {} 個作品',\r\n    ],\r\n    _抓取多少个作品: [\r\n        '抓取本页面 {} 个作品',\r\n        'このページの {} つの作品をクロールします',\r\n        'Crawl this page {} works',\r\n        '擷取本頁面 {} 個作品',\r\n    ],\r\n    _相关作品抓取完毕: [\r\n        '相关作品抓取完毕。包含有{}个作品，开始获取作品信息。',\r\n        '関連作品はクロールされました。 {} 作品を含み、その作品に関する情報の取得を開始します。',\r\n        'The related works have been crawled. Contains {} works and starts getting information about the work.',\r\n        '相關作品擷取完畢。包含有{}個作品，開始取得作品資訊。',\r\n    ],\r\n    _排行榜任务完成: [\r\n        '本页面抓取完毕。<br>当前有{}个作品，开始获取作品信息。',\r\n        'このページのクロール終了。<br>{}枚の作品があります。 作品情報の取得を開始します。',\r\n        'This page is crawled and now has {} works.<br> Start getting the works for more information.',\r\n        '本頁面擷取完畢。<br>目前有{}個作品，開始取得作品資訊。',\r\n    ],\r\n    _列表页抓取进度: [\r\n        '已抓取列表页{}个页面',\r\n        '{} のリストページを取得しました',\r\n        'Has acquired {} list pages',\r\n        '已擷取清單頁{}個頁面',\r\n    ],\r\n    _列表页抓取完成: [\r\n        '列表页面抓取完成，开始获取图片网址',\r\n        'リストページがクロールされ、画像 URL の取得が開始されます',\r\n        'The list page is crawled and starts to get the image URL',\r\n        '清單頁面擷取完成，開始取得圖片網址',\r\n    ],\r\n    _抓取结果为零: [\r\n        '抓取完毕，但没有找到符合筛选条件的作品。',\r\n        'クロールは終了しましたが、フィルタ条件に一致する作品が見つかりませんでした。',\r\n        'Crawl finished but did not find works that match the filter criteria.',\r\n        '擷取完畢，但沒有找到符合篩選條件的作品。',\r\n    ],\r\n    _当前任务尚未完成: [\r\n        '当前任务尚未完成',\r\n        '現在のタスクはまだ完了していません',\r\n        'The current task has not yet been completed',\r\n        '目前工作尚未完成',\r\n    ],\r\n    _当前任务尚未完成2: [\r\n        '当前任务尚未完成，请等待完成后再下载。',\r\n        '現在のタスクはまだ完了していません、完了するまでお待ちください',\r\n        'The current task has not yet been completed',\r\n        '目前工作尚未完成，請等待完成後再下載。',\r\n    ],\r\n    _列表抓取完成开始获取作品页: [\r\n        '当前列表中有{}张作品，开始获取作品信息',\r\n        '{} 枚の作品があります。 作品情報の取得を開始します。',\r\n        'Now has {} works. Start getting the works for more information.',\r\n        '目前清單中有{}張作品，開始取得作品資訊',\r\n    ],\r\n    _开始获取作品页面: [\r\n        '开始获取作品页面',\r\n        '作品ページの取得を開始する',\r\n        'Start getting the works page',\r\n        '開始取得作品頁面',\r\n    ],\r\n    _无权访问2: [\r\n        '无权访问 {}，跳过该作品。',\r\n        '{} のアクセス権限がありません、作品を無視する。',\r\n        'No access {}, skip.',\r\n        '無權造訪 {}，跳過該作品。',\r\n    ],\r\n    _作品页状态码0: [\r\n        '请求的url不可访问',\r\n        '要求された URL にアクセスできません',\r\n        'The requested url is not accessible',\r\n        '要求的url無法造訪',\r\n    ],\r\n    _作品页状态码400: [\r\n        '该作品已被删除',\r\n        '作品は削除されました',\r\n        'The work has been deleted',\r\n        '該作品已被刪除',\r\n    ],\r\n    _作品页状态码403: [\r\n        '无权访问请求的url 403',\r\n        'リクエストされた url にアクセスできない 403',\r\n        'Have no access to the requested url 403',\r\n        '無權造訪要求的url 403',\r\n    ],\r\n    _作品页状态码404: [\r\n        '404 not found',\r\n        '404 not found',\r\n        '404 not found',\r\n        '404 not found',\r\n    ],\r\n    _抓取图片网址的数量: [\r\n        '已获取 {} 个图片网址',\r\n        '{} つの画像 url を取得',\r\n        'Get {} image URLs',\r\n        '已取得 {} 個圖片網址',\r\n    ],\r\n    _正在抓取: [\r\n        '正在抓取，请等待……',\r\n        'クロール中、しばらくお待ちください...',\r\n        'Getting, please wait...',\r\n        '正在擷取，請等待……',\r\n    ],\r\n    _获取全部书签作品: [\r\n        '获取全部书签作品，时间可能比较长，请耐心等待。',\r\n        'ブックマークしたすべての作品を取得すると、時間がかかることがあります。お待ちください。',\r\n        'Get all bookmarked works, the time may be longer, please wait.',\r\n        '取得全部書籤作品，時間可能比較長，請耐心等待。',\r\n    ],\r\n    _抓取图片网址遇到中断: [\r\n        '当前任务已中断!',\r\n        '現在のタスクが中断されました。',\r\n        'The current task has been interrupted.',\r\n        '目前工作已中斷!',\r\n    ],\r\n    _关闭: ['关闭', 'クローズ', 'close', '關閉'],\r\n    _输出信息: ['输出信息', '出力情報', 'Output information', '輸出資訊'],\r\n    _复制: ['复制', 'コピー', 'Copy', '複製'],\r\n    _已复制到剪贴板: [\r\n        '已复制到剪贴板，可直接粘贴',\r\n        'クリップボードにコピーされました',\r\n        'Has been copied to the clipboard',\r\n        '已複製至剪貼簿，可直接貼上',\r\n    ],\r\n    _下载设置: ['下载设置', 'ダウンロード設定', 'Download settings', '下載設定'],\r\n    _收起展开设置项: [\r\n        '收起/展开设置项',\r\n        '設定の折りたたみ/展開',\r\n        'Collapse/expand settings',\r\n        '摺疊/展開設定項目',\r\n    ],\r\n    _github: [\r\n        'Github 页面，欢迎 star',\r\n        'Github のページ、star をクリックしてください',\r\n        'Github page, if you like, please star it',\r\n        'Github 頁面，歡迎 star',\r\n    ],\r\n    _wiki: ['使用手册', 'マニュアル', 'Wiki', 'Wiki'],\r\n    _快捷键切换显示隐藏: [\r\n        '使用 Alt + X，可以显示和隐藏下载面板',\r\n        'Alt + X を使用してダウンロードパネルを表示および非表示にする',\r\n        'Use Alt + X to show and hide the download panel',\r\n        '使用 Alt + X，可以顯示和隱藏下載面板',\r\n    ],\r\n    _共抓取到n个图片: [\r\n        '共抓取到 {} 个图片',\r\n        '合計 {} 枚の画像を取得し',\r\n        'Crawl a total of {} images',\r\n        '共擷取到 {} 個圖片',\r\n    ],\r\n    _设置文件名: [\r\n        '设置命名规则',\r\n        '命名規則を設定する',\r\n        'Set naming rules',\r\n        '設定命名規則',\r\n    ],\r\n    _设置文件夹名的提示: [\r\n        `可以使用 '/' 建立文件夹<br>示例：{p_title}/{user}/{id}`,\r\n        `フォルダーは '/' で作成できます<br>例：{p_title}/{user}/{id}`,\r\n        `You can create a directory with '/'<br>Example：{p_title}/{user}/{id}`,\r\n        `可以使用 '/' 建立資料夾<br>範例：{p_title}/{user}/{id}`,\r\n    ],\r\n    _添加命名标记前缀: [\r\n        '添加命名标记前缀',\r\n        '前に tag の名前を追加',\r\n        'Add named tag prefix',\r\n        '加入命名標記首碼',\r\n    ],\r\n    _添加字段名称提示: [\r\n        '例如，在用户名前面添加“user_”标记',\r\n        'たとえば、ユーザー名の前に 「user_」 tag を追加します。',\r\n        'For example, add the \"user_\" tag in front of the username',\r\n        '例如，在使用者名稱前面加入“user_”標記',\r\n    ],\r\n    _查看标记的含义: [\r\n        '查看标记的含义',\r\n        ' tag の意味を表示する',\r\n        'View the meaning of the tag',\r\n        '檢視標記的意義',\r\n    ],\r\n    _命名标记id: [\r\n        '默认文件名，如 44920385_p0',\r\n        'デフォルトのファイル名，例 44920385_p0',\r\n        'Default file name, for example 44920385_p0',\r\n        '預設檔案名稱，如 44920385_p0',\r\n    ],\r\n    _命名标记title: ['作品标题', '作品のタイトル', 'works title', '作品標題'],\r\n    _命名标记tags: [\r\n        '作品的 tag 列表',\r\n        '作品の tags',\r\n        'The tags of the work',\r\n        '作品的 tag 清單',\r\n    ],\r\n    _命名标记user: ['画师名字', 'アーティスト名', 'Artist name', '畫師名稱'],\r\n    _命名标记uid: ['画师 id', 'アーティスト ID', 'Artist id', '畫師 id'],\r\n    _命名标记px: ['宽度和高度', '幅と高さ', 'width and height', '寬度和高度'],\r\n    _命名标记bmk: [\r\n        'bookmark-count，作品的收藏数。把它放在最前面可以让文件按收藏数排序。',\r\n        'bookmark-count，作品のボックマークの数、前に追加することでボックマーク数で并べることができます。',\r\n        'bookmark-count, bookmarks number of works.',\r\n        'bookmark-count，作品的收藏數。將它放在最前面可以讓檔案依收藏數排序。',\r\n    ],\r\n    _命名标记9: [\r\n        '数字 id，如 44920385',\r\n        '44920385 などの番号 ID',\r\n        'Number id, for example 44920385',\r\n        '數字 id，如 44920385',\r\n    ],\r\n    _命名标记p_num: [\r\n        '图片在作品内的序号，如 0、1、2 …… 每个作品都会重新计数。',\r\n        '0、1、2 など、作品の画像のシリアル番号。各ピースは再集計されます。',\r\n        'The serial number of the picture in the work, such as 0, 1, 2 ... Each work will be recounted.',\r\n        '圖片在作品內的序號，如 0、1、2 …… 每個作品都將重新計數。',\r\n    ],\r\n    _命名标记tags_trans: [\r\n        '作品的 tag 列表，附带翻译后的 tag（如果有）',\r\n        '作品の tag リスト、翻訳付き tag (あれば)',\r\n        'The tags of the work, with the translated tag (if any)',\r\n        '作品的 tag 清單，附帶翻譯後的 tag（若有的話）',\r\n    ],\r\n    _命名标记date: [\r\n        '作品的创建日期，格式为 yyyy-MM-dd。如 2019-08-29',\r\n        '作品の作成日は yyyy-MM-dd の形式でした。 2019-08-29 など',\r\n        'The date the creation of the work was in the format yyyy-MM-dd. Such as 2019-08-29',\r\n        '作品的建立日期，格式為 yyyy-MM-dd。如 2019-08-29',\r\n    ],\r\n    _命名标记rank: [\r\n        '作品在排行榜中的排名。如 #1、#2 …… 只能在排行榜页面中使用。',\r\n        '作品のランキング。例え　#1、#2 …… ランキングページのみで使用できます。',\r\n        'The ranking of the work in the ranking pages. Such as #1, #2 ... Can only be used in ranking pages.',\r\n        '作品在排行榜中的排名。如 #1、#2 …… 只能在排行榜頁面中使用。',\r\n    ],\r\n    _命名标记type: [\r\n        '作品类型，分为 illustration、manga、ugoira',\r\n        '作品分類は、illustration、manga、ugoira',\r\n        'The type of work, divided into illustration, manga, ugoira',\r\n        '作品類型，分为 illustration、manga、ugoira',\r\n    ],\r\n    _命名标记提醒: [\r\n        '您可以使用多个标记；建议在不同标记之间添加分割用的字符。示例：{id}-{uid}<br>一定要包含 {id} 或者 {id_num}。<br>* 在某些情况下，会有一些标记不可用。',\r\n        '複数のタグを使用することができます；異なるタグ間の分割のために文字を追加することをお勧めします。例：{id}-{uid}<br>必ず{id}または{id_num}を含めてください。<br>* 場合によっては、一部の tag が利用できず。',\r\n        'You can use multiple tags, and you can add a separate character between different tags. Example: {id}-{uid}<br>Be sure to include {id} or {id_num}.<br>* In some cases, some tags will not be available.',\r\n        '您可以使用多個標記；建議在不同標記之間加入分隔用的字元。範例：{id}-{uid}<br>一定要包含 {id} 或者 {id_num}。<br>* 在某些情況下，會有一些標記不可用。',\r\n    ],\r\n    _文件夹标记PTag: [\r\n        '当前页面的 tag。当前页面没有 tag 时不可用。',\r\n        '現在のページの tag。現在のページの tag がないときは使用できません。',\r\n        'The tag of the current page. Not available if the current page has no tag.',\r\n        '目前頁面的 tag。目前頁面沒有 tag 時無法使用。',\r\n    ],\r\n    _文件夹标记PTitle: [\r\n        '当前页面的标题',\r\n        'ページのタイトル',\r\n        'The title of this page',\r\n        '目前頁面的標題',\r\n    ],\r\n    _预览文件名: [\r\n        '预览文件名',\r\n        'ファイル名のプレビュー',\r\n        'Preview file name',\r\n        '預覽檔案名稱',\r\n    ],\r\n    _设置下载线程: [\r\n        '设置下载线程',\r\n        'ダウンロードスレッドを設定する',\r\n        'Set the download thread',\r\n        '設定下載執行緒',\r\n    ],\r\n    _线程数字: [\r\n        '可以输入 1-5 之间的数字，设置同时下载的数量',\r\n        '同時ダウンロード数を設定、1-5 の数値を入力してください',\r\n        'You can type a number between 1-5 to set the number of concurrent downloads',\r\n        '可以輸入 1-5 之間的數字，設定同時下載的數量',\r\n    ],\r\n    _下载按钮1: ['开始下载', 'ダウンロードを開始', 'start download', '開始下載'],\r\n    _下载按钮2: [\r\n        '暂停下载',\r\n        'ダウンロードを一時停止',\r\n        'pause download',\r\n        '暫停下載',\r\n    ],\r\n    _下载按钮3: ['停止下载', 'ダウンロードを停止', 'stop download', '停止下載'],\r\n    _下载按钮4: ['复制 url', 'URL をコピー', 'copy urls', '複製url'],\r\n    _当前状态: ['当前状态 ', '現在の状態 ', 'Now state ', '目前狀態 '],\r\n    _未开始下载: [\r\n        '未开始下载',\r\n        'まだダウンロードを開始していません',\r\n        'Not yet started downloading',\r\n        '未開始下載',\r\n    ],\r\n    _下载进度: [\r\n        '下载进度：',\r\n        'ダウンロードの進行状況：',\r\n        'Download progress: ',\r\n        '下載進度：',\r\n    ],\r\n    _下载线程: ['下载线程：', 'スレッド：', 'Thread: ', '下載執行緒：'],\r\n    _常见问题: ['常见问题', 'よくある質問', 'Common problems', '常見問題'],\r\n    _uuid: [\r\n        '如果下载后的文件名异常，请禁用其他有下载功能的浏览器扩展。',\r\n        'ダウンロード後のファイル名が異常な場合は、ダウンロード機能を持つ他のブラウザ拡張機能を無効にしてください。',\r\n        'If the file name after downloading is abnormal, disable other browser extensions that have download capabilities.',\r\n        '如果下載後的檔案名稱異常，請停用其他有下載功能的瀏覽器擴充功能。',\r\n    ],\r\n    _下载说明: [\r\n        \"下载的文件保存在浏览器的下载目录里。<br>请不要在浏览器的下载选项里选中'总是询问每个文件的保存位置'。<br><b>如果下载后的文件名异常，请禁用其他有下载功能的浏览器扩展。</b><br>QQ群：853021998\",\r\n        'ダウンロードしたファイルは、ブラウザのダウンロードディレクトリに保存されます。<br><b>ダウンロード後のファイル名が異常な場合は、ダウンロード機能を持つ他のブラウザ拡張機能を無効にしてください。</b>',\r\n        'The downloaded file is saved in the browser`s download directory. <br><b>If the file name after downloading is abnormal, disable other browser extensions that have download capabilities.</b>',\r\n        \"下載的檔案儲存在瀏覽器的下載目錄裡。<br>請不要在瀏覽器的下載選項裡選取'總是詢問每個檔案的儲存位置'。<br><b>如果下載後的檔案名稱異常，請停用其他有下載功能的瀏覽器擴充功能。</b><br>QQ群：853021998\",\r\n    ],\r\n    _正在下载中: ['正在下载中', 'ダウンロード中', 'Downloading', '正在下載'],\r\n    _下载完毕: [\r\n        '√ 下载完毕!',\r\n        '√ ダウンロードが完了しました',\r\n        '√ Download finished',\r\n        '√ 下載完畢!',\r\n    ],\r\n    _已暂停: [\r\n        '下载已暂停',\r\n        'ダウンロードは一時停止中です',\r\n        'Download is paused',\r\n        '下載已暫停',\r\n    ],\r\n    _已停止: [\r\n        '下载已停止',\r\n        'ダウンロードが停止しました',\r\n        'Download stopped',\r\n        '下載已停止',\r\n    ],\r\n    _已下载: ['已下载', 'downloaded', 'downloaded', '已下載'],\r\n    _抓取完毕: [\r\n        '抓取完毕！',\r\n        'クロールが終了しました！',\r\n        'Crawl finished!',\r\n        '擷取完畢！',\r\n    ],\r\n    _快速下载本页: [\r\n        '快速下载本页作品',\r\n        'この作品をすばやくダウンロードする',\r\n        'Download this work quickly',\r\n        '快速下載本頁作品',\r\n    ],\r\n    _从本页开始抓取new: [\r\n        '从本页开始抓取新作品',\r\n        'このページから新しい作品を入手する',\r\n        'Crawl the new works from this page',\r\n        '從本頁開始擷取新作品',\r\n    ],\r\n    _从本页开始抓取old: [\r\n        '从本页开始抓取旧作品',\r\n        'このページから古い作品を入手する',\r\n        'Crawl the old works from this page',\r\n        '從本頁開始擷取舊作品',\r\n    ],\r\n    _抓取推荐作品: [\r\n        '抓取推荐作品',\r\n        '推奨作品をダウンロードする',\r\n        'Crawl the recommend works',\r\n        '擷取推薦作品',\r\n    ],\r\n    _抓取推荐作品Title: [\r\n        '抓取页面底部的的推荐作品',\r\n        'ページの下部で推奨作品をクロールします',\r\n        'Crawl the recommended works at the bottom of the page',\r\n        '擷取頁面底部的推薦作品',\r\n    ],\r\n    _抓取相关作品: [\r\n        '抓取相关作品',\r\n        '関連作品をダウンロードする',\r\n        'Crawl the related works',\r\n        '擷取相關作品',\r\n    ],\r\n    _相关作品大于0: [\r\n        ' （下载相关作品必须大于 0）',\r\n        ' 「ダウンロードする関連作品の数は0より大きくなければならない」',\r\n        '  (Download related works must be greater than 0)',\r\n        ' （下載相關作品必須大於 0）',\r\n    ],\r\n    _默认下载多页: [\r\n        ', 如有多页，默认会下载全部。',\r\n        '、複数のページがある場合、デフォルトですべてをダウンロードされます。',\r\n        ', If there are multiple pages, the default will be downloaded.',\r\n        ', 如有多頁，預設會下載全部。',\r\n    ],\r\n    _调整完毕: [\r\n        '调整完毕，当前有{}个作品。',\r\n        '調整が完了し、今、{} の作品があります。',\r\n        'The adjustment is complete and now has {} works.',\r\n        '調整完畢，目前有{}個作品。',\r\n    ],\r\n    _抓取当前作品: [\r\n        '抓取当前作品',\r\n        '現在の作品をクロールする',\r\n        'Crawl the current work',\r\n        '擷取目前作品',\r\n    ],\r\n    _抓取当前作品Title: [\r\n        '抓取当前列表里的所有作品',\r\n        '現在のリスト内のすべての作品をクロールする',\r\n        'Crawl all the works in the current list',\r\n        '擷取目前清單裡的所有作品',\r\n    ],\r\n    _清除多图作品: [\r\n        '清除多图作品',\r\n        '複数の作品を削除する',\r\n        'Remove multi-drawing works',\r\n        '清除多圖作品',\r\n    ],\r\n    _清除多图作品Title: [\r\n        '如果不需要可以清除多图作品',\r\n        '必要がない場合は、複数のグラフを削除することができます',\r\n        'If you do not need it, you can delete multiple graphs',\r\n        '如果不需要可以清除多圖作品',\r\n    ],\r\n    _清除动图作品: [\r\n        '清除动图作品',\r\n        'うごイラ作品を削除する',\r\n        'Remove ugoira work',\r\n        '清除動圖作品',\r\n    ],\r\n    _清除动图作品Title: [\r\n        '如果不需要可以清除动图作品',\r\n        '必要がない場合は、うごイラを削除することができます',\r\n        'If you do not need it, you can delete the ugoira work',\r\n        '如果不需要可以清除動圖作品',\r\n    ],\r\n    _手动删除作品: [\r\n        '手动删除作品',\r\n        '作品を手動で削除する',\r\n        'Manually delete the work',\r\n        '手動刪除作品',\r\n    ],\r\n    _手动删除作品Title: [\r\n        '可以在下载前手动删除不需要的作品',\r\n        'ダウンロードする前に不要な作品を手動で削除することができます',\r\n        'You can manually delete unwanted work before downloading',\r\n        '可以在下載前手動刪除不需要的作品',\r\n    ],\r\n    _退出手动删除: [\r\n        '退出手动删除',\r\n        '削除モードを終了する',\r\n        'Exit manually delete',\r\n        '結束手動刪除',\r\n    ],\r\n    _抓取本页作品: [\r\n        '抓取本页作品',\r\n        'このページをクロールする',\r\n        'Crawl this page works',\r\n        '擷取本頁作品',\r\n    ],\r\n    _抓取本页作品Title: [\r\n        '抓取本页列表中的所有作品',\r\n        'このページの全ての作品をクロールする',\r\n        'Crawl this page works',\r\n        '擷取本頁清單中的所有作品',\r\n    ],\r\n    _抓取本排行榜作品: [\r\n        '抓取本排行榜作品',\r\n        'このリストの作品をクロールする',\r\n        'Crawl the works in this list',\r\n        '擷取本排行榜作品',\r\n    ],\r\n    _抓取本排行榜作品Title: [\r\n        '抓取本排行榜的所有作品，包括现在尚未加载出来的。',\r\n        'まだ読み込まれていないものを含めて、このリストの作品をダウンロードする',\r\n        'Crawl all of the works in this list, including those that are not yet loaded.',\r\n        '擷取本排行榜的所有作品，包括現在尚未載入出來的。',\r\n    ],\r\n    _抓取首次登场的作品: [\r\n        '抓取首次登场作品',\r\n        '初登場作品をダウンロードする',\r\n        'Crawl the debut works',\r\n        '擷取首次登場作品',\r\n    ],\r\n    _抓取首次登场的作品Title: [\r\n        '只下载首次登场的作品',\r\n        '初登場作品のみダウンロードします',\r\n        'Download only debut works',\r\n        '只下載首次登場的作品',\r\n    ],\r\n    _抓取该页面的图片: [\r\n        '抓取该页面的图片',\r\n        'ページの画像をクロールする',\r\n        'Crawl the picture of the page',\r\n        '擷取該頁面的圖片',\r\n    ],\r\n    _抓取相似图片: [\r\n        '抓取相似图片',\r\n        '類似の作品をクロールする',\r\n        'Crawl similar works',\r\n        '擷取相似圖片',\r\n    ],\r\n    _要获取的作品个数2: [\r\n        '您想要获取多少个作品？',\r\n        'いくつの作品をダウンロードしたいですか？',\r\n        'How many works do you want to download?',\r\n        '您想要取得多少個作品？',\r\n    ],\r\n    _数字提示1: [\r\n        '-1, 或者大于 0',\r\n        '-1、または 0 より大きい',\r\n        '-1, or greater than 0',\r\n        '-1, 或是大於 0',\r\n    ],\r\n    _下载大家的新作品: [\r\n        '下载大家的新作品',\r\n        'みんなの新作をダウンロードする',\r\n        'Download everyone`s new work',\r\n        '下載大家的新作品',\r\n    ],\r\n    _屏蔽设定: ['屏蔽設定', 'ミュート設定', 'Mute settings', '封鎖設定'],\r\n    _举报: ['举报', '報告', 'Report', '回報'],\r\n    _输入id进行抓取: [\r\n        '输入id进行抓取',\r\n        'idを入力してダウンロードする',\r\n        'Enter id to fetch',\r\n        '輸入id進行擷取',\r\n    ],\r\n    _输入id进行抓取的提示文字: [\r\n        '请输入作品id。如果有多个id，则以换行分割（即每行一个id）',\r\n        'イラストレーターIDを入力してください。 複数の id がある場合は、1 行に 1 つの id を付けます。',\r\n        'Please type the illustration id. If there is more than one id, one id per line.',\r\n        '請輸入作品id。如果有多個id，則以換行分隔（即每行一個id）',\r\n    ],\r\n    _开始抓取: ['开始抓取', 'クロールを開始する', 'Start crawling', '開始擷取'],\r\n    _添加tag: [\r\n        '给未分类作品添加 tag',\r\n        '未分類の作品に tag を追加',\r\n        'Add tag to unclassified work',\r\n        '幫未分類的作品加入 tag',\r\n    ],\r\n    _id不合法: [\r\n        'id不合法，操作取消。',\r\n        'id が不正な、操作はキャンセルされます。',\r\n        'id is illegal, the operation is canceled.',\r\n        'id不合法，動作取消。',\r\n    ],\r\n    _快速收藏: [\r\n        '快速收藏',\r\n        'クイックブックマーク',\r\n        'Quick bookmarks',\r\n        '快速收藏',\r\n    ],\r\n    _启用: ['启用', '有効にする', 'Enable', '啟用'],\r\n    _自动开始下载: [\r\n        '自动开始下载',\r\n        'ダウンロードは自動的に開始されます',\r\n        'Download starts automatically',\r\n        '自動开始下載',\r\n    ],\r\n    _自动下载的提示: [\r\n        '当“开始下载”状态可用时，自动开始下载，不需要点击下载按钮。',\r\n        '「ダウンロードを開始する」ステータスが利用可能になると、ダウンロードは自動的に開始され、ダウンロードボタンをクリックする必要はありません。',\r\n        'When the &quot;Start Downloa&quot; status is available, the download starts automatically and no need to click the download button.',\r\n        '當“開始下載”狀態可用時，自動開始下載，不需要點選下載按鈕。',\r\n    ],\r\n    _转换任务提示: [\r\n        '正在转换 {} 个文件',\r\n        '{} ファイルの変換',\r\n        'Converting {} files',\r\n        '正在轉換 {} 個檔案',\r\n    ],\r\n    _最近更新: ['最近更新', '最近更新する', 'What`s new', '最近更新'],\r\n    _确定: ['确定', '確定', 'Ok', '確定'],\r\n    _file404: [\r\n        '404 错误：文件 {} 不存在。',\r\n        '404 エラー：ファイル {} は存在しません。',\r\n        '404 error: File {} does not exist.',\r\n        '404 錯誤：檔案 {} 不存在。',\r\n    ],\r\n    _文件下载失败: [\r\n        '文件 {} 下载失败',\r\n        'ファイル {} のダウンロードを失敗しました',\r\n        'File {} download failed',\r\n        '檔案 {} 下載失败',\r\n    ],\r\n    _重置设置: ['重置设置', 'リセット設定', 'Reset Settings', '重設設定'],\r\n    _是否重置设置: [\r\n        '是否重置设置？',\r\n        '設定をリセットしますか？',\r\n        'Do you want to reset the settings?',\r\n        '是否重設設定？',\r\n    ],\r\n    _newver: [\r\n        '有新版本可用',\r\n        '新しいバージョンがあります',\r\n        'A new version is available',\r\n        '有新版本可用',\r\n    ],\r\n    _快速下载建立文件夹: [\r\n        '快速下载时，始终创建文件夹',\r\n        'クイックダウンロード時、常にフォルダを作成します',\r\n        'Always create directory when downloading quickly',\r\n        '快速下載時，始終建立資料夾',\r\n    ],\r\n    _快速下载建立文件夹提示: [\r\n        '快速下载时，如果只有一张图片，也会建立文件夹',\r\n        'すばやくダウンロードとき、イラストが一枚だけでも、フォルダも作成されます',\r\n        'When downloading quickly, if there is only one picture, a directory is also created',\r\n        '快速下載時，若只有一張圖片，也會建立資料夾',\r\n    ],\r\n    _设置id范围: [\r\n        '设置 id 范围',\r\n        'id 範囲を設定',\r\n        'Set id range',\r\n        '設定 id 範圍',\r\n    ],\r\n    _设置id范围提示: [\r\n        '您可以输入一个作品 id，抓取比它新或者比它旧的作品',\r\n        '1 つの作品 id を入力することで、それより新しいあるいは古い作品をクロールことができます',\r\n        'You can enter a work id and crawl works that are newer or older than it',\r\n        '您可以輸入一個作品 id，擷取比它新或者比它舊的作品。',\r\n    ],\r\n    _大于: ['大于', 'より大きい', 'Bigger than', '大於'],\r\n    _小于: ['小于', 'より小さい', 'Less than', '小於'],\r\n    _设置投稿时间: [\r\n        '设置投稿时间',\r\n        '投稿日時を設定する',\r\n        'Set posting date',\r\n        '設定投稿時間',\r\n    ],\r\n    _设置投稿时间提示: [\r\n        '您可以下载指定时间内发布的作品',\r\n        '指定された時間内に配信された作品をダウンロードすることができます',\r\n        'You can download works posted in a specified period of time',\r\n        '您可以下載指定時間内發佈的作品',\r\n    ],\r\n    _时间范围: ['时间范围', '時間範囲', 'Time range', '時間范围'],\r\n    _必须大于0: [\r\n        '必须大于 0',\r\n        '0 より大きくなければなりません',\r\n        'must be greater than 0',\r\n        '必須大於 0',\r\n    ],\r\n    _开始筛选: ['开始筛选', 'スクリーニング開始', 'Start screening', '開始篩選'],\r\n    _开始筛选Title: [\r\n        '按照设置来筛选当前 tag 里的作品。',\r\n        '現在の tag にある作品を設定によってスクリーニングする',\r\n        'Screen the works in the current tag.',\r\n        '按照設定來篩選當前 tag 裡的作品。',\r\n    ],\r\n    _在结果中筛选: [\r\n        '在结果中筛选',\r\n        '結果の中からスクリーニング',\r\n        'Screen in results',\r\n        '在結果中篩選',\r\n    ],\r\n    _在结果中筛选Title: [\r\n        '您可以改变设置，并在结果中再次筛选。',\r\n        '設定を変えて、結果の中で再びスクリーニングすることができます。',\r\n        'You can change the settings and screen again in the results.',\r\n        '您可以變更設定，并在結果中再次篩選。',\r\n    ],\r\n    _抓取筛选结果: [\r\n        '抓取筛选结果',\r\n        'スクリーニングの結果をクロールする',\r\n        'Crawl the screening results',\r\n        '擷取篩選結果',\r\n    ],\r\n    _尚未开始筛选: [\r\n        '尚未开始筛选',\r\n        'まだスクリーニングを開始していない',\r\n        'Screening has not started',\r\n        '尚未開始篩選',\r\n    ],\r\n    _没有数据可供使用: [\r\n        '没有数据可供使用',\r\n        '使用可能なデータはない',\r\n        'No data is available.',\r\n        '沒有資料可供使用',\r\n    ],\r\n    _预览搜索结果: [\r\n        '预览搜索页面的筛选结果',\r\n        '検索ページのフィルタ結果をプレビューします',\r\n        'Preview filter results on search page',\r\n        '預覽搜尋頁面的篩選結果',\r\n    ],\r\n    _预览搜索结果说明: [\r\n        '下载器可以把符合条件的作品显示在当前页面上。如果抓取结果太多导致页面崩溃，请关闭这个功能。<br>启用预览功能时，下载器不会自动开始下载。',\r\n        'ローダは、該当する作品を現在のページに表示することができます。クロール結果が多すぎてページが崩れる場合は、この機能をオフにしてください。<br>プレビュー機能を有効にすると、ダウンロードは自動的に開始されません。',\r\n        'The downloader can display the qualified works on the current page. If too many crawling results cause the page to crash, turn off this feature.<br>When the preview feature is enabled, the downloader does not start downloading automatically.',\r\n        '下載器可以將符合條件的作品顯示在目前頁面上。如果擷取結果太多導致頁面當掉，請關閉這個功能。<br>啟用預覽功能時，下載器不會自動開始下載。',\r\n    ],\r\n    _目录名使用: [\r\n        '目录名使用：',\r\n        'ディレクトリ名の使用：',\r\n        'Folder name use: ',\r\n        '資料夾名稱使用：',\r\n    ],\r\n    _命名规则: ['命名规则', '命名規則', 'Naming rule', '命名規則'],\r\n    _启用快速收藏: [\r\n        '启用快速收藏',\r\n        'クイックボックマークを有効にする',\r\n        'Enable quick bookmark',\r\n        '啓用快速收藏',\r\n    ],\r\n    _启用快速收藏说明: [\r\n        '当你点击下载器添加的收藏按钮(☆)，把作品添加到书签时，自动添加这个作品的 tag。',\r\n        'ダウンローダーに追加されたボックマークボタン「☆」をクリックして、作品をブックマークに追加すると、自動的に作品の tag が追加されます。',\r\n        'When you click the favorite button (☆) added by the downloader to bookmark a work, the tag of the work is automatically added.',\r\n        '當你點選下載器新增的收藏按鈕(☆)，將作品加入書籤時，自動新增這個作品的 tag。',\r\n    ],\r\n    _新增设置项: [\r\n        '新增设置项',\r\n        '新たな機能を追加されました。',\r\n        'Added setting items',\r\n        '新增設定項目',\r\n    ],\r\n    _抓取: ['抓取', 'クロール', 'Crawl', '擷取'],\r\n    _下载: ['下载', 'ダウンロードする', 'Download', '下載'],\r\n    _其他: ['其他', 'その他', 'Other', '其他'],\r\n    _第一张图不带序号: [\r\n        '第一张图不带序号',\r\n        '最初のイメージの番号を削除します',\r\n        'The first picture without a serial number',\r\n        '第一張圖片不帶序號',\r\n    ],\r\n    _第一张图不带序号说明: [\r\n        '去掉每个作品第一张图的序号。例如 80036479_p0 变成 80036479',\r\n        '作品ごとの最初のイメージの番号を削除します。例えば 80036479_p0 は 80036479 になります。',\r\n        'Remove the serial number of the first picture of each work. For example 80036479_p0 becomes 80036479.',\r\n        '去掉每個作品第一張圖的序號。例如 80036479_p0 變成 80036479。',\r\n    ],\r\n    _最小值: ['最小值', '最小値', 'Minimum value', '最小值'],\r\n    _最大值: ['最大值', '最大値', 'maximum value', '最大值'],\r\n    _单图作品: [\r\n        '单图作品',\r\n        'マルチイメージ作品',\r\n        'Single image works',\r\n        '單圖作品',\r\n    ],\r\n    _彩色图片: ['彩色图片', 'カラーイメージ', 'Color picture', '彩色圖片'],\r\n    _黑白图片: [\r\n        '黑白图片',\r\n        '白黒イメージ',\r\n        'Black and white pictures',\r\n        '黑白圖片',\r\n    ],\r\n    _不保存图片因为颜色设置: [\r\n        '图片 {} 没有被保存，因为它的颜色不符合设定。',\r\n        'イメージ {} は色が設定に合わないため、保存されていません。',\r\n        'The image {} was not saved because its colors do not match the settings.',\r\n        '圖片 {} 沒有被保存，因為它的顏色不符合設定。',\r\n    ],\r\n    _同时转换多少个动图: [\r\n        '同时转换多少个动图',\r\n        '同時変換のうごイラの上限',\r\n        'How many animations are converted at the same time',\r\n        '同時轉換多少個動圖',\r\n    ],\r\n    _同时转换多少个动图警告: [\r\n        '同时转换多个动图会增加资源占用。<br>转换动图时，请保持该标签页激活，否则浏览器会降低转换速度。',\r\n        '複数の動画を同時に変換すると、リソースの占有が増加します。<br>うごイラを変換するときは、このタブを有効にしてください。そうしないと、ブラウザは変換速度を下げます。',\r\n        'Converting multiple animations at the same time will increase resource consumption. <br> Please keep the tab active when converting animation, otherwise the browser will reduce the conversion speed.',\r\n        '同時轉換多個動圖會增加資源占用。<br>轉換動圖時，請保持這個標籤頁激活，否則瀏覽器會降低轉換速度。',\r\n    ],\r\n    _提示: ['提示', 'ヒント', 'tip', '提示'],\r\n    _fbNew500: [\r\n        '新增设置项：<br>彩色图片；黑白图片。',\r\n        '新たな機能を追加されました：カラーイメージ；白黒イメージ。<br>',\r\n        'Added setting items:<br>Color picture; Black and white pictures.',\r\n        '新增設定項目：<br>彩色圖片；黑白圖片。',\r\n    ],\r\n    _投稿数量: ['投稿数量'],\r\n    _投稿数量说明: ['默认值 -1 将会抓取所有投稿'],\r\n    _文件类型: ['文件类型'],\r\n    _所有: ['所有'],\r\n    _图片: ['图片'],\r\n    _视频: ['视频'],\r\n    _音乐: ['音乐'],\r\n    _压缩文件: ['压缩文件'],\r\n    _PS文件: ['PS文件'],\r\n    _投稿类型: ['投稿类型'],\r\n    _免费投稿: ['免费投稿'],\r\n    _付费投稿: ['付费投稿'],\r\n    _设置价格范围: ['设置价格范围'],\r\n    _日元: ['日元'],\r\n    _晚于: ['晚于'],\r\n    _保存投稿中的外部链接: ['保存投稿中的外部链接'],\r\n    _当前投稿个数: [\r\n        '当前有 {} 个投稿 ',\r\n        '今は　{}　枚の作品があります ',\r\n        'There are now {} post ',\r\n        '目前有 {} 個投稿 ',\r\n    ],\r\n    _抓取文件数量: [\r\n        '已获取 {} 个文件信息',\r\n        '{} つの画像 url を取得',\r\n        'Get {} image URLs',\r\n        '已取得 {} 個圖片網址',\r\n    ],\r\n    _抓取赞助的所有用户的投稿: ['抓取赞助的所有用户的投稿'],\r\n    _抓取该用户的投稿: ['抓取该用户的投稿'],\r\n    _抓取该tag的投稿: ['抓取该 tag 的投稿'],\r\n    _抓取这篇投稿: ['抓取这篇投稿'],\r\n    _抓取商品的封面图: ['抓取商品的封面图'],\r\n};\r\nexport { langText };\r\n"],"sourceRoot":""}