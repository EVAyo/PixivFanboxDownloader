{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/API.ts","webpack:///./src/ts/BG.ts","webpack:///./src/ts/BoldKeywords.ts","webpack:///./src/ts/CenterPanel.ts","webpack:///./src/ts/CheckUnsupportBrowser.ts","webpack:///./src/ts/Colors.ts","webpack:///./src/ts/Config.ts","webpack:///./src/ts/EVT.ts","webpack:///./src/ts/FileName.ts","webpack:///./src/ts/Filter.ts","webpack:///./src/ts/FormHTML.ts","webpack:///./src/ts/InitHomePage.ts","webpack:///./src/ts/InitPage.ts","webpack:///./src/ts/InitPageBase.ts","webpack:///./src/ts/InitPostListPage.ts","webpack:///./src/ts/InitPostPage.ts","webpack:///./src/ts/InitTagPage.ts","webpack:///./src/ts/Lang.ts","webpack:///./src/ts/ListenPageSwitch.ts","webpack:///./src/ts/Log.ts","webpack:///./src/ts/MsgBox.ts","webpack:///./src/ts/OpenCenterPanel.ts","webpack:///./src/ts/OutputPanel.ts","webpack:///./src/ts/PageType.ts","webpack:///./src/ts/ProgressBar.ts","webpack:///./src/ts/QuickCrawl.ts","webpack:///./src/ts/SaveData.ts","webpack:///./src/ts/ShowHowToUse.ts","webpack:///./src/ts/ShowNotification.ts","webpack:///./src/ts/ShowWhatIsNew.ts","webpack:///./src/ts/States.ts","webpack:///./src/ts/Store.ts","webpack:///./src/ts/Tip.ts","webpack:///./src/ts/Toast.ts","webpack:///./src/ts/Tools.ts","webpack:///./src/ts/UnifiedURL.ts","webpack:///./src/ts/content.ts","webpack:///./src/ts/download/Download.ts","webpack:///./src/ts/download/DownloadControl.ts","webpack:///./src/ts/download/DownloadRecord.ts","webpack:///./src/ts/download/DownloadStates.ts","webpack:///./src/ts/download/Resume.ts","webpack:///./src/ts/download/ShowSkipCount.ts","webpack:///./src/ts/download/ShowStatusOnTitle.ts","webpack:///./src/ts/langText.ts","webpack:///./src/ts/setting/Form.ts","webpack:///./src/ts/setting/FormSettings.ts","webpack:///./src/ts/setting/NameRuleManager.ts","webpack:///./src/ts/setting/Options.ts","webpack:///./src/ts/setting/SaveNamingRule.ts","webpack:///./src/ts/setting/Settings.ts","webpack:///./src/ts/utils/DateFormat.ts","webpack:///./src/ts/utils/IndexedDB.ts","webpack:///./src/ts/utils/Utils.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,UAAU;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4EAA4E,UAAU;AACtF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAiE,IAAI,UAAU,OAAO;AACtF;AACA;AACA;AACA,8DAA8D,OAAO;AACrE;AACA;AACA;AACe;;;;;;;;;;;;;ACxFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACU;AACQ;AACA;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,uBAAuB,0DAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kDAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,6BAA6B,0DAAQ;AACrC;AACA;AACA;AACA;AACA,6BAA6B,0DAAQ;AACrC;AACA;AACA;AACA,2CAA2C,0DAAQ;AACnD;AACA;AACA,yCAAyC,0DAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACc;;;;;;;;;;;;;AC/Jd;AAAA;AAAA;AAAA;AAA4B;AACkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,0DAAQ;AACpC;AACA;AACwB;;;;;;;;;;;;;ACrBxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8B;AACF;AACD;AACD;AACoB;AACZ;AACA;AACA;AAClC;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA,QAAQ,0CAAI;AACZ,QAAQ,sCAAE;AACV,YAAY,0DAAY;AACxB,2BAA2B,0CAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU,0CAAI,MAAM;;AAEnD;AACA;AACA,QAAQ,8CAAM;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iDAAiD,0CAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf,SAAS;AACT;AACA,gCAAgC,wCAAG;AACnC,YAAY,wCAAG;AACf,SAAS;AACT;AACA,0BAA0B,wCAAG,mBAAmB,wCAAG;AACnD;AACA,qBAAqB,8CAAM;AAC3B;AACA;AACA,aAAa;AACb;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA,6CAA6C,8CAAM,MAAM,0CAAI;AAC7D,mBAAmB,0CAAI;AACvB,SAAS;AACT;AACA;AACA,6CAA6C,8CAAM,MAAM,0CAAI;AAC7D,mBAAmB,0CAAI;AACvB,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,wCAAG;AACnB;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf;AACA;AACA,YAAY,wCAAG;AACf;AACA;AACA;AACA;;;;;;;;;;;;;AC1JA;AAAA;AAAA;AAAA;AAA4B;AACE;AACF;AAC5B;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,aAAa;AACb,6CAA6C;AAC7C;AACA;AACA,aAAa;AACb,6CAA6C;AAC7C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4BAA4B,0CAAI;AAChC,gBAAgB,wCAAG;AACnB;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG,SAAS,0CAAI;AAC5B;AACA;AACA;AACA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wBAAwB;AACP;;;;;;;;;;;;;ACxBlB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM;AACrC;;;;;;;;;;;;;ACzBlB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC,SAAS;AACT;AACA;AACA;AACA;AACe;;;;;;;;;;;;;AC9Ef;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACI;AACF;AACkB;AACF;AACZ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA,eAAe,0DAAQ;AACvB,6BAA6B,0DAAQ;AACrC;AACA;AACA;AACA;AACA,qBAAqB,0DAAQ;AAC7B;AACA,2BAA2B,8CAAM;AACjC;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,aAAa;AACb,cAAc,QAAQ;AACtB;AACA;AACA,aAAa;AACb,cAAc,MAAM;AACpB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB;AACA;AACA,aAAa;AACb,cAAc,IAAI;AAClB;AACA;AACA,aAAa;AACb,cAAc,MAAM;AACpB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB,uBAAuB,4DAAU,mBAAmB,0DAAQ;AAC5D;AACA,aAAa;AACb,cAAc,UAAU;AACxB,uBAAuB,4DAAU,QAAQ,4CAAK,OAAO,0DAAQ;AAC7D;AACA;AACA,aAAa;AACb,cAAc,IAAI;AAClB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB;AACA;AACA,aAAa;AACb,cAAc,UAAU;AACxB;AACA;AACA,aAAa;AACb,cAAc,IAAI;AAClB;AACA;AACA,aAAa;AACb,cAAc,QAAQ;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA,8DAA8D,IAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB,yBAAyB,0CAAI;AAC7B;AACA;AACA;AACA,uBAAuB,4CAAK;AAC5B,uBAAuB,YAAY;AACnC,yBAAyB,4CAAK;AAC9B;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA,wDAAwD,IAAI;AAC5D;AACA;AACA;AACA,wDAAwD,IAAI;AAC5D;AACA;AACA;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA;AACA;AACA,QAAQ,wCAAG;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACoB;;;;;;;;;;;;;AC3LpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACA;AACM;AACY;AACZ;AACJ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAQ,SAAS,0DAAQ;AACrC;AACA;AACA;AACA,YAAY,0DAAQ;AACpB,qBAAqB,0CAAI,iBAAiB,IAAI,0CAAI,iBAAiB;AACnE;AACA,YAAY,0DAAQ;AACpB,qBAAqB,0CAAI,iBAAiB,IAAI,0CAAI,iBAAiB;AACnE;AACA,QAAQ,wCAAG;AACX;AACA;AACA,aAAa,0DAAQ;AACrB;AACA;AACA,uBAAuB,0CAAI,iBAAiB,IAAI,0CAAI,gBAAgB,GAAG,0DAAQ,KAAK;AACpF,QAAQ,wCAAG;AACX;AACA;AACA;AACA,aAAa,0DAAQ;AACrB;AACA;AACA,QAAQ,wCAAG,eAAe,0DAAQ,SAAS,GAAG,0DAAQ,cAAc;AACpE;AACA;AACA;AACA,aAAa,0DAAQ;AACrB;AACA;AACA,kBAAkB,0DAAQ,yBAAyB,0DAAQ;AAC3D,wBAAwB,0CAAI;AAC5B;AACA;AACA;AACA,mCAAmC,0DAAQ;AAC3C,iCAAiC,0DAAQ;AACzC,YAAY,wCAAG,YAAY,0CAAI,iBAAiB,IAAI,MAAM,KAAK,IAAI;AACnE;AACA;AACA;AACA,aAAa,0DAAQ;AACrB;AACA;AACA,uBAAuB,0CAAI,uBAAuB,IAAI,0DAAQ,0BAA0B;AACxF,QAAQ,wCAAG;AACX;AACA;AACA,aAAa,0DAAQ;AACrB;AACA;AACA,uBAAuB,0CAAI,uBAAuB,IAAI,0DAAQ,4BAA4B;AAC1F,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG,SAAS,0CAAI,mCAAmC,0CAAI;AACnE;AACA;AACA;AACA,YAAY,wCAAG,SAAS,0CAAI,mCAAmC,0CAAI;AACnE;AACA;AACA;AACA,YAAY,wCAAG,SAAS,0CAAI,mCAAmC,0CAAI;AACnE;AACA;AACA;AACA,YAAY,wCAAG,SAAS,0CAAI,mCAAmC,0CAAI;AACnE;AACA;AACA;AACA,YAAY,wCAAG,SAAS,0CAAI;AAC5B,gBAAgB,0CAAI;AACpB;AACA;AACA;AACA,YAAY,wCAAG,SAAS,0CAAI;AAC5B,gBAAgB,0CAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8CAAM;AACxD;AACA,uBAAuB,0DAAQ;AAC/B;AACA;AACA;AACA,eAAe,0DAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAQ;AAC3B;AACA;AACA,mBAAmB,0DAAQ;AAC3B;AACA;AACA;AACA,kCAAkC,0DAAQ;AAC1C;AACA;AACA,sBAAsB,0DAAQ;AAC9B;AACA;AACA,iCAAiC,0DAAQ;AACzC;AACA;AACA;AACA,sBAAsB,0DAAQ;AAC9B,YAAY,0DAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAQ;AACrB;AACA,aAAa,0DAAQ;AACrB,aAAa,0DAAQ;AACrB;AACA;AACA;AACA,qCAAqC,0DAAQ;AAC7C,iCAAiC,0DAAQ;AACzC;AACA;AACA,aAAa,0DAAQ;AACrB;AACA,YAAY,0DAAQ;AACpB;AACA;AACA;AACA,sBAAsB,0DAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAQ;AACrB;AACA,YAAY,0DAAQ;AACpB;AACA;AACA;AACA,sBAAsB,0DAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG;AACX,QAAQ,8CAAM;AACd;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACkB;;;;;;;;;;;;;AC3MlB;AAAA;AAAA;AAAkC;AAC3B;AACP;AACA;;AAEA;AACA;AACA,uDAAuD,8CAAM,uBAAuB;;AAEpF;AACA;AACA,uDAAuD,8CAAM,uBAAuB;;AAEpF;AACA;AACA,uDAAuD,8CAAM,uBAAuB;;AAEpF;AACA;AACA,uDAAuD,8CAAM,4BAA4B;;AAEzF;AACA;AACA,uDAAuD,8CAAM,oBAAoB;;AAEjF;AACA;AACA,uDAAuD,8CAAM,uBAAuB;AACpF;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+FAA+F,8CAAM,iBAAiB;AACtH;AACA;AACA;AACA,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,UAAU,GAAG,UAAU;AAC/C,wBAAwB,QAAQ,GAAG,QAAQ;AAC3C,wBAAwB,MAAM,GAAG,MAAM;AACvC,wBAAwB,QAAQ,GAAG,QAAQ;AAC3C,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,UAAU,GAAG,UAAU;AAC/C,wBAAwB,MAAM,GAAG,MAAM;AACvC,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,IAAI,GAAG,IAAI;AACnC,wBAAwB,IAAI,GAAG,IAAI;AACnC,wBAAwB,KAAK,GAAG,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAM,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAM,iBAAiB;AACvC;AACA;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA,0BAA0B,UAAU;AACpC;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA,0BAA0B,MAAM;AAChC;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA,0BAA0B,UAAU;AACpC;AACA;AACA,0BAA0B,MAAM;AAChC;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA,0BAA0B,IAAI;AAC9B;AACA;AACA,0BAA0B,IAAI;AAC9B;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG,gBAAgB;AACzH;AACA;;AAEA;AACA;AACA,yFAAyF;AACzvWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACF;AACc;AAClB;AACA;AAC5B,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK,qBAAqB,8CAAM;AACxC;AACA,SAAS;AACT,QAAQ,4CAAK,qBAAqB,8CAAM;AACxC,YAAY,wCAAG;AACf,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,wCAAG;AAC7B;AACA;AACA,yBAAyB,wCAAG;AAC5B;AACA;AACA;AACA;AACwB;;;;;;;;;;;;;AC9BxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACU;AACQ;AACQ;AACV;AACE;AAC9C;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB,kDAAQ;AACxB,iBAAiB,kDAAQ;AACzB,iBAAiB,kDAAQ;AACzB,2BAA2B,0DAAY;AACvC,iBAAiB,kDAAQ;AACzB,iBAAiB,kDAAQ;AACzB,2BAA2B,kEAAgB;AAC3C,iBAAiB,kDAAQ;AACzB,2BAA2B,0DAAY;AACvC,iBAAiB,kDAAQ;AACzB,2BAA2B,wDAAW;AACtC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8B;AACE;AACE;AACF;AACJ;AACA;AACU;AACV;AACM;AACA;AACF;AACM;AACtC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA,eAAe;AACf;AACA;AACA,QAAQ,4CAAK;AACb;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB;AACrB;AACA;AACA,YAAY,8CAAM;AAClB,yBAAyB,0CAAI;AAC7B;AACA;AACA,QAAQ,wCAAG;AACX,QAAQ,wCAAG,SAAS,0CAAI;AACxB,QAAQ,6CAAK,MAAM,0CAAI;AACvB,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8CAAM,QAAQ,uBAAuB;AAC/D;AACA,gBAAgB,4CAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,KAAK,0CAAI;AACpB,YAAY,4CAAK;AACjB;AACA;AACA,QAAQ,wCAAG,KAAK,0CAAI,mBAAmB,4CAAK;AAC5C,QAAQ,wCAAG,KAAK,0CAAI;AACpB,uBAAuB,+BAA+B;AACtD,2BAA2B,4CAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wCAAG;AAC9B;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB,QAAQ,wCAAG,QAAQ,0CAAI,gBAAgB,GAAG,4CAAK,mBAAmB;AAClE;AACA;AACA,uBAAuB,4CAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB,YAAY,wCAAG,SAAS,0CAAI,6BAA6B,4CAAK;AAC9D;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA,QAAQ,4CAAK,aAAa,mDAAK;AAC/B,QAAQ,4CAAK;AACb,QAAQ,wCAAG,KAAK,0CAAI,mBAAmB,4CAAK;AAC5C,QAAQ,wCAAG,SAAS,0CAAI;AACxB,QAAQ,wCAAG;AACX;AACA;AACA;AACA,QAAQ,wCAAG;AACX,QAAQ,wCAAG;AACX,QAAQ,wCAAG,OAAO,0CAAI;AACtB,QAAQ,8CAAM,OAAO,0CAAI;AACzB;AACA;AACwB;;;;;;;;;;;;;ACrJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACF;AACc;AAClB;AAC5B,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK,qBAAqB,8CAAM;AACxC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,wCAAG;AAC7B;AACA;AACA,yBAAyB,wCAAG,mBAAmB,wCAAG;AAClD;AACA;AACA;AACA;AAC4B;;;;;;;;;;;;;AC1B5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACF;AACc;AAClB;AACU;AACV;AACM;AAClC,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK,qBAAqB,8CAAM;AACxC;AACA,SAAS;AACT;AACA;AACA,QAAQ,wCAAG,wBAAwB,wCAAG;AACtC,iBAAiB,8CAAM;AACvB;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,4CAAK;AACb;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B,wCAAG,SAAS,kDAAK;AAC5C;AACA;AACA;AACwB;;;;;;;;;;;;;ACtCxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACF;AACc;AAClB;AACU;AACtC,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK,qBAAqB,8CAAM;AACxC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,wCAAG;AAC7B;AACA;AACA,yBAAyB,wCAAG,4BAA4B,wCAAG,WAAW,wCAAG,+BAA+B,kDAAK;AAC7G;AACA;AACA;AACA;AACuB;;;;;;;;;;;;;AC3BvB;AAAA;AAAA;AAAA;AAAsC;AACV;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG;AACnB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,4BAA4B;AAC5B;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,sBAAsB,kDAAQ;AAC9B,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACgB;;;;;;;;;;;;;AC1IhB;AAAA;AAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG;AACnB,aAAa;AACb,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAA4B;AACM;AAClC;AACA;AACA;AACA,4BAA4B;AAC5B,kDAAkD;AAClD,qDAAqD;AACrD,sDAAsD;AACtD;AACA;AACA,YAAY,8CAAM;AAClB,YAAY,8CAAM;AAClB,YAAY,8CAAM;AAClB;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACe;;;;;;;;;;;;;AC1Gf;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACM;AACJ;AACJ;AAC1B;AACA;AACA;AACA;AACA,qBAAqB,8CAAM;AAC3B,qBAAqB,8CAAM;AAC3B,mBAAmB,8CAAM;AACzB;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,QAAQ,WAAW;AACvD;AACA;AACA,mCAAmC,gCAAgC,QAAQ,WAAW;AACtF;AACA;AACA,mCAAmC,gCAAgC,QAAQ,WAAW;AACtF;AACA;AACA,mCAAmC,8BAA8B,QAAQ,WAAW;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA,2BAA2B,WAAW,GAAG,iBAAiB;AAC1D,6BAA6B,WAAW,GAAG,SAAS;AACpD,4CAA4C,YAAY,0CAAI,eAAe;AAC3E;AACA,QAAQ,0CAAI;AACZ;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,oCAAoC,wCAAG;AACvC;AACA,aAAa;AACb;AACA;AACA;AACA,QAAQ,sCAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;ACrGlB;AAAA;AAAA;AAA4B;AACE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACE;AACE;AACM;AACJ;AACA;AACF;AAChC;AACA;AACA;AACA;AACA,QAAQ,0CAAI;AACZ;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK,SAAS,0CAAI;AAC9B,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK,OAAO,0CAAI;AACnC;AACA,YAAY,4CAAK,iBAAiB,8CAAM;AACxC;AACA,YAAY,0CAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uCAAuC,4BAA4B;AACnE,YAAY,kDAAK;AACjB;AACA,YAAY,8CAAM,SAAS,0CAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAI;AACZ;AACA;AACA;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAC4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf;AACA;AACA,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AC5FpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AACA;AACF;AACF;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4CAAK;AACzB;AACA;AACA;AACA;AACA,QAAQ,0CAAI;AACZ;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4CAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4CAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACuB;;;;;;;;;;;;;ACjGvB;AAAA;AAAA;AAAA;AAAA;AAA4B;AACE;AACQ;AACJ;AAClC;AACA;AACA;AACA,yBAAyB;AACzB;AACA,+BAA+B,kDAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAI;AACZ;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA,QAAQ,8CAAM;AACd,QAAQ,wCAAG;AACX;AACA;AACA,iDAAiD,kDAAQ;AACzD;AACA;AACA;AACA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACF;AACc;AAClB;AACE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAM,QAAQ,uBAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,YAAY,0DAAQ;AACpB;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB,YAAY,wCAAG,SAAS,0CAAI,4BAA4B,0CAAI;AAC5D;AACA,gBAAgB,4CAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0DAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK;AACb;AACA;AACA,YAAY,8CAAM;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAM;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AC9VpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACI;AACA;AACN;AAC8B;AAC1D;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA,YAAY,0DAAQ;AACpB;AACA,YAAY,oEAAU;AACtB;AACA;AACA;AACA,QAAQ,8CAAM,MAAM,0CAAI;AACxB,mBAAmB,8CAAM;AACzB,iBAAiB,0CAAI;AACrB,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACE;AACgB;AACd;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA,oBAAoB,0DAAQ;AAC5B,8BAA8B,0CAAI,mBAAmB,4CAAK;AAC1D;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACI;AACA;AACN;AAC8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,iCAAiC,0CAAI,mBAAmB;AACxD;AACA,0BAA0B,UAAU,UAAU,0CAAI;AAClD;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAI,mBAAmB;AAC/B;AACA,SAAS;AACT;AACA;AACA,YAAY,0DAAQ;AACpB,YAAY,8CAAM;AAClB,uBAAuB,8CAAM,eAAe,0CAAI,iBAAiB;AACjE,qBAAqB,0CAAI;AACzB,aAAa;AACb,YAAY,oEAAU;AACtB;AACA;AACA;AACA;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,sBAAsB,wCAAG,kBAAkB,wCAAG;AAC9C;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;ACzElB;AAAA;AAAA;AAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiB;;;;;;;;;;;;;ACzDJ;AACb;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAM;AACzB,qBAAqB,8CAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAM;AACzB,qBAAqB,8CAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAM;AACzB,qBAAqB,8CAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAM;AACzB,qBAAqB,8CAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,sBAAsB;AACtB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oCAAoC,yBAAyB,WAAW;AACxE;AACA;AACA,oCAAoC,yBAAyB,WAAW;AACxE;AACA;AACA,oCAAoC,yBAAyB,WAAW;AACxE;AACA;AACA,oCAAoC,uBAAuB,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiB;;;;;;;;;;;;;ACvLjB;AAAA;AAAA;AAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,KAAK;AACnE;AACA,6CAA6C,KAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiB;;;;;;;;;;;;;AC1EjB;AAAA;AAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,UAAU;AAC3D;AACA;AACA;AACA;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,2BAA2B;AAC3B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACsB;AACM;AACR;AACG;AACC;AACJ;AACE;AACP;AACQ;AACa;AACE;AACX;AACC;AACJ;AACC;AACQ;;;;;;;;;;;;;ACzBjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC6B;AACU;AACM;AACK;AACnB;AACF;AACM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf;AACA,YAAY,8CAAM;AAClB,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA,QAAQ,wDAAW;AACnB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB,kDAAQ;AAChC;AACA;AACA;AACA,oCAAoC,8DAAc;AAClD;AACA;AACA;AACA;AACA,iBAAiB,EAAE,0CAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;ACxEpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC6B;AACI;AACA;AACJ;AACE;AACI;AACG;AACO;AACE;AACZ;AACa;AACb;AACe;AACjB;AACjC;AACA;AACA,mCAAmC;AACnC,gCAAgC;AAChC,2BAA2B;AAC3B,2BAA2B;AAC3B,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA;AACA,0BAA0B;AAC1B,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,YAAY,6DAAa;AACzB;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT,0BAA0B,wCAAG,mBAAmB,wCAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,OAAO,0CAAI;AAC9B,gBAAgB,+CAAM,oBAAoB,0CAAI;AAC9C;AACA;AACA;AACA,gBAAgB,wCAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAG,OAAO,0CAAI;AAClC;AACA;AACA;AACA;AACA,oBAAoB,wCAAG,UAAU,aAAa,yBAAyB,QAAQ;AAC/E;AACA;AACA;AACA,oBAAoB,wCAAG,UAAU,aAAa,yBAAyB,QAAQ;AAC/E;AACA;AACA;AACA,gBAAgB,wCAAG;AACnB;AACA;AACA;AACA,gBAAgB,wCAAG,OAAO,0CAAI;AAC9B;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC,YAAY,wCAAG,SAAS,0CAAI;AAC5B,YAAY,6CAAK,SAAS,0CAAI;AAC9B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,0BAA0B,+DAAc;AACxC,wBAAwB,gBAAgB,KAAK,4CAAK,eAAe;AACjE,QAAQ,wCAAG;AACX;AACA,QAAQ,wDAAW;AACnB;AACA,gCAAgC,4CAAK;AACrC;AACA;AACA,gBAAgB,wCAAG;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,8CAAM,SAAS;AACnF,oEAAoE,8CAAM,WAAW;AACrF,mEAAmE,8CAAM,QAAQ;AACjF,sEAAsE,8CAAM,UAAU;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAK;AAC5B,QAAQ,0CAAI;AACZ;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY,wCAAG;AACf,SAAS;AACT;AACA;AACA;AACA,0BAA0B,0DAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,YAAY,4CAAK;AACjB,kCAAkC,4CAAK;AACvC;AACA;AACA,QAAQ,wDAAW;AACnB;AACA;AACA;AACA,YAAY,8CAAM,SAAS,4CAAK;AAChC;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAQ,sBAAsB,8CAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAM,SAAS,4CAAK;AAChC;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAc;AAC1B;AACA;AACA;AACA;AACA,YAAY,+DAAc;AAC1B;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,QAAQ,wCAAG;AACX;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA,8BAA8B,0CAAI;AAClC,QAAQ,wCAAG,KAAK,0CAAI;AACpB;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAM;AACtB,kCAAkC;AAClC,gBAAgB,wCAAG;AACnB,sCAAsC,0CAAI;AAC1C,gBAAgB,wCAAG,SAAS,0CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA,QAAQ,wCAAG;AACX,8BAA8B,0CAAI;AAClC,QAAQ,wCAAG,OAAO,0CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAK;AACnC;AACA;AACA;AACA;AACA;AACA,4DAA4D,4CAAK;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+DAAc;AACpC;AACA;AACA;AACA;AACA,yBAAyB,4CAAK;AAC9B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAQ;AACxB;AACA;AACA;AACA;;;;;;;;;;;;;ACnWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACE;AACF;AACkB;AACA;AACR;AACN;AACE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0DAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,iBAAiB;AACrF,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAG;AACvB,iBAAiB;AACjB;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAG;AACvB,iBAAiB;AACjB;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAG;AACvB,iBAAiB;AACjB;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAQ;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,QAAQ,4CAAK,SAAS,0CAAI;AAC1B;AACA;AACA;AACA;AACA,qBAAqB,kDAAK;AAC1B;AACA,QAAQ,kDAAK,6BAA6B,kDAAK,+CAA+C;AAC9F,QAAQ,4CAAK,SAAS,0CAAI;AAC1B;AACA;AACA;AACA,QAAQ,wCAAG,SAAS,0CAAI;AACxB,QAAQ,wCAAG;AACX;AACA,QAAQ,wCAAG,SAAS,0CAAI;AACxB,QAAQ,4CAAK,SAAS,0CAAI;AAC1B,QAAQ,8CAAM,SAAS,0CAAI;AAC3B,mBAAmB,0CAAI;AACvB,SAAS;AACT;AACA;AACA;AACA,8BAA8B,kDAAK;AACnC,YAAY,8CAAM;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAM,OAAO,0CAAI;AACpC;AACA;AACA;AACA;AACA;AAC0B;;;;;;;;;;;;;ACtJ1B;AAAA;AAAA;AAAA;AAA6B;AACI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA,gCAAgC,4CAAK;AACrC;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0B;;;;;;;;;;;;;AChE1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACA;AACE;AACE;AACE;AACe;AACH;AACd;AACjC;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,uCAAuC;AACvC,kCAAkC;AAClC,mCAAmC;AACnC,uBAAuB,0DAAS;AAChC;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,mDAAmD,eAAe;AAClE,qDAAqD,eAAe;AACpE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,qDAAqD,eAAe;AACpE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,YAAY,8CAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,SAAS,0CAAI;AACxB,QAAQ,4CAAK;AACb,QAAQ,4CAAK;AACb;AACA;AACA;AACA;AACA,YAAY,8DAAc;AAC1B;AACA;AACA,QAAQ,wCAAG,SAAS,0CAAI;AACxB,QAAQ,wCAAG;AACX;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA,wBAAwB,wCAAG,uBAAuB,wCAAG;AACrD;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,6BAA6B,wCAAG,wBAAwB,wCAAG;AAC3D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4BAA4B,wCAAG,kBAAkB,wCAAG;AACpD;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA,sBAAsB,4CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAc,uBAAuB,4CAAK;AACtD;AACA;AACA;AACA,QAAQ,wCAAG,SAAS,0CAAI;AACxB;AACA;AACA;AACA,kBAAkB,4CAAK;AACvB,kBAAkB,4CAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG;AACnB;AACA;AACA;AACA;AACA;AACA,oBAAoB,8DAAc;AAClC;AACA;AACA,QAAQ,wCAAG,SAAS,0CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8DAAc;AAC1C;AACA;AACA;AACA,oBAAoB,8DAAc,uBAAuB,4CAAK;AAC9D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK,SAAS,0CAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnOA;AAAA;AAAA;AAAA;AAA6B;AACE;AAC/B;AACA;AACA;AACA,uBAAuB;AACvB;AACA,QAAQ,0CAAI;AACZ;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,QAAQ,0CAAI;AACZ;AACA;AACA;AACA,QAAQ,0CAAI;AACZ;AACA;AACyB;;;;;;;;;;;;;ACxCzB;AAAA;AAAA;AAAA;AAAA;AAAuC;AACV;AACM;AACF;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sBAAsB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,0BAA0B,wCAAG,mBAAmB,wCAAG;AACnD;AACA;AACA,aAAa;AACb;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,iBAAiB,8CAAM;AACvB;AACA;AACA,6BAA6B,4CAAK;AAClC;AACA,oBAAoB,4CAAK;AACzB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,MAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kDAAQ,gBAAgB,kDAAQ;AAC7D;AACA,iCAAiC,kDAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,KAAK;AAC7B;AACA;AACA,gCAAgC,IAAI,GAAG,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,KAAK;AAC7B,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;ACvgBAAgB;AAChB,gBAAgB;AAChB,4BAA4B;AAC5B,cAAc;AACd,aAAa;AACbwBAAwB,oBAAoB;AAC5C;AACA,eAAe,aAAa;AAC5B;AACA;AACA,cAAc;AACd,cAAc;AACd,gBAAgB;AAChB,gBAAgB;AAChB,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,eAAe;AACf,WAAW;AACX,WAAW;AACX,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,OAAO,EAAE,MAAM,gBAAgB,OAAO,IAAI,MAAM;AACzF,yCAAyC,OAAO,EAAE,MAAM,gBAAgB,OAAO,IAAI,MAAM;AACzF,mCAAmC,mFAAmF,OAAO,EAAE,MAAM,oCAAoC,OAAO,MAAM,MAAM;AAC5L,sDAAsD,OAAO,EAAE,MAAM,0BAA0B,OAAO,EAAE,MAAM;AAC9G,kEAAkE,MAAM,EAAE,OAAO,0BAA0B,OAAO,GAAG,MAAM;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,KAAK,IAAI,UAAU;AAC5D,yCAAyC,KAAK,IAAI,UAAU;AAC5D,+FAA+F,KAAK,MAAM,UAAU;AACpH,2CAA2C,KAAK,IAAI,UAAU;AAC9D,uDAAuD,KAAK,GAAG,UAAU;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,eAAe;AACf,yBAAyB;AACzB,cAAc;AACd,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,gBAAgB;AAChB,4BAA4B;AAC5B,cAAc;AACd,aAAa;AACbiBAAiB;AACjB,iBAAiB;AACjB,4CAA4C;AAC5C,kBAAkB;AAClB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,eAAe;AACfcAAc;AACd,cAAc;AACd,gBAAgB;AAChB,WAAW;AACX,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,YAAY;AACvB,WAAW,oBAAoB;AAC/B,WAAW,kBAAkB;AAC7B,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;ACx/BpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACI;AACM;AACoB;AACT;AACJ;AACP;AACR;AACK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,oBAAoB,4CAAK,iBAAiB,kDAAQ;AAClD,QAAQ,0CAAI;AACZ;AACA;AACA,QAAQ,gDAAO;AACf,YAAY,8DAAc;AAC1B,YAAY,0DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,WAAW;AAChG;AACA;AACA;AACA;AACA,iEAAiE,SAAS;AAC1E;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gCAAgC,wCAAG,qBAAqB,kDAAK;AAC7D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,oEAAU;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAG;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAG;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,0CAAI;AACtD;AACA,wBAAwB,wCAAG;AAC3B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAG;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAG;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,6CAA6C,kDAAK;AAClD;AACA;AACA;AACA,6CAA6C,kDAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0DAAQ;AAC9C;AACA;AACA;AACA;;;;;;;;;;;;;ACpMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACqB;AACD;AACG;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAe;AACvB;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAU;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAU;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAU;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA,YAAY,kDAAQ;AACpB,sCAAsC,kDAAQ;AAC9C;AACA;AACA;AACA;AACA,YAAY,kDAAQ;AACpB,oCAAoC,kDAAQ;AAC5C;AACA;AACA;AACA;AACA,YAAY,kDAAQ;AACpB;AACA,yBAAyB,kDAAQ;AACjC,oCAAoC,4DAAU;AAC9C;AACA;AACA;AACwB;;;;;;;;;;;;;ACjJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACN;AACU;AACW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,kDAAQ;AACvB;AACA;AACA;AACA;AACA,6CAA6C,8CAAM;AACnD,QAAQ,4DAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qBAAqB,kDAAQ;AAC7B,YAAY,4DAAU;AACtB;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS,IAAI,KAAK,QAAQ,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,SAAS,IAAI,GAAG,EAAE,KAAK,EAAE,QAAQ,KAAK,iBAAiB;AAC3G;AACA;AACA,cAAc,kDAAK;AACnB;AACA;AACA;AACA,8BAA8B,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC2B;;;;;;;;;;;;;AC5F3B;AAAA;AAAA;AAAA;AAAA;AAA6B;AACE;AACO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kDAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAI;AACZ;AACA,4CAA4C,0CAAI;AAChD;AACA;AACA,YAAY,0CAAI;AAChB;AACA;AACA;AACA,YAAY,0CAAI;AAChB;AACA;AACA;AACA;AACA;AACmB;;;;;;;;;;;;;ACpHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACI;AACF;AACmB;AACjB;AACmB;AACpD;AACA;AACA;AACA,wBAAwB;AACxB,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK;AACb,qBAAqB,4CAAK;AAC1B,QAAQ,0CAAI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,kDAAQ;AACpB;AACA;AACA;AACA,aAAa,kDAAQ;AACrB,oCAAoC,kDAAQ;AAC5C;AACA,YAAY,4DAAU;AACtB;AACA,QAAQ,4CAAK,SAAS,0CAAI;AAC1B;AACA;AACA,gCAAgC,kDAAQ;AACxC;AACA,QAAQ,4DAAU;AAClB;AACA;AACA;AACA,QAAQ,gEAAe;AACvB;AACA;AACA;AACA,uBAAuB,KAAK,kDAAQ,uBAAuB;AAC3D;AACA,2BAA2B,kDAAQ,mBAAmB;AACtD,oEAAoE,EAAE;AACtE;AACA;AACA;AACA,YAAY,kDAAQ;AACpB,uCAAuC,MAAM,MAAM,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0B;;;;;;;;;;;;;AC5G1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6B;AACU;AACJ;AACA;AACF;AACF;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kDAAK;AAC7B,qBAAqB,kDAAK;AAC1B;AACA;AACA,iBAAiB,8CAAM;AACvB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iCAAiC,8CAAM;AACvC,uBAAuB,8CAAM;AAC7B,qCAAqC,8CAAM;AAC3C;AACA;AACA;AACA,2DAA2D,8CAAM;AACjE;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kDAAK;AAC5B;AACA;AACA;AACA;AACA;AACA,qBAAqB,kDAAK;AAC1B;AACA,QAAQ,kDAAK,mBAAmB,8CAAM;AACtC,QAAQ,4CAAK,SAAS,0CAAI;AAC1B;AACA;AACA,kCAAkC,kDAAK;AACvC,mBAAmB,8CAAM;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAM,OAAO,0CAAI;AACpC;AACA;AACA;AACA,QAAQ,4CAAK,SAAS,0CAAI;AAC1B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG;AACX;AACA;AACA,QAAQ,8CAAM,UAAU,IAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,8CAAM;AACtD,oBAAoB,8CAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kDAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,wBAAwB,0BAA0B;AAC7D;AACA;AACA;AACA;AACA;AACgC;;;;;;;;;;;;;ACjQhC;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB;;;;;;;;;;;;;ACxEtB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,WAAW;AAC1D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,UAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjqB;;;;;;;;;;;;;AChPrB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,IAAI;AAC/D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sCAAsC,2BAA2B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiB","file":"content.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/ts/content.ts\");\n","class API {\r\n    // 组装 url 的查询参数。当该参数有值时，将其添加到 url 里\r\n    static assembleURL(baseURL, args) {\r\n        const temp = new URL(baseURL);\r\n        for (const [key, value] of Object.entries(args)) {\r\n            value && temp.searchParams.append(key, value.toString());\r\n        }\r\n        return temp.toString();\r\n    }\r\n    // 通用的请求流程\r\n    // 发送 get 请求，返回 json 数据，抛出异常\r\n    static request(url) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, {\r\n                method: 'get',\r\n                credentials: 'include',\r\n            })\r\n                .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                else {\r\n                    // 第一种异常，请求成功但状态不对\r\n                    reject({\r\n                        status: response.status,\r\n                        statusText: response.statusText,\r\n                    });\r\n                }\r\n            })\r\n                .then((data) => {\r\n                resolve(data);\r\n            })\r\n                .catch((error) => {\r\n                // 第二种异常，请求失败\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    static getCreatorId(url) {\r\n        const split = url.split('/');\r\n        // 首先获取以 @ 开头的用户名\r\n        for (const str of split) {\r\n            if (str.startsWith('@')) {\r\n                return str.split('@')[1];\r\n            }\r\n        }\r\n        // 获取自定义的用户名\r\n        for (const str of split) {\r\n            // hostname\r\n            if (str.endsWith('.fanbox.cc')) {\r\n                return str.split('.')[0];\r\n            }\r\n        }\r\n        throw new Error('GetCreatorId error!');\r\n    }\r\n    // 用 creatorId（用户名） 获取 userId\r\n    static async getUserId(creatorId) {\r\n        const baseURL = `https://api.fanbox.cc/creator.get?creatorId=${creatorId}`;\r\n        const res = (await this.request(baseURL));\r\n        return res.body.user.userId;\r\n    }\r\n    static async getPostListSupporting(limit = 10, maxPublishedDatetime = '', maxId = '') {\r\n        const baseURL = 'https://api.fanbox.cc/post.listSupporting';\r\n        const url = this.assembleURL(baseURL, {\r\n            limit,\r\n            maxPublishedDatetime,\r\n            maxId,\r\n        });\r\n        return this.request(url);\r\n    }\r\n    static async getPostListByUser(creatorId, limit = 10, maxPublishedDatetime = '', maxId = '') {\r\n        const baseURL = `https://api.fanbox.cc/post.listCreator?creatorId=${creatorId}`;\r\n        const url = this.assembleURL(baseURL, {\r\n            limit,\r\n            maxPublishedDatetime,\r\n            maxId,\r\n        });\r\n        return this.request(url);\r\n    }\r\n    static async getTagPostListByUser(userId, tag) {\r\n        const url = `https://api.fanbox.cc/post.listTagged?tag=${tag}&userId=${userId}`;\r\n        return this.request(url);\r\n    }\r\n    static async getPost(postId) {\r\n        const url = `https://api.fanbox.cc/post.info?postId=${postId}`;\r\n        return this.request(url);\r\n    }\r\n}\r\nexport { API };\r\n","import { EVT } from './EVT';\r\nimport { Utils } from './utils/Utils';\r\nimport { IndexedDB } from './utils/IndexedDB';\r\nimport { settings } from './setting/Settings';\r\nclass BG {\r\n    constructor() {\r\n        this.list = [];\r\n        this.bgModeflagClassName = 'xzBG';\r\n        this.bgLayerClassName = 'xzBGLayer';\r\n        this.bgUrl = '';\r\n        this.DBName = 'PFDBG';\r\n        this.DBVer = 1;\r\n        this.storeName = 'bg';\r\n        this.keyName = 'bg';\r\n        // 在数据库升级事件里创建表\r\n        this.onUpdate = (db) => {\r\n            if (!db.objectStoreNames.contains(this.storeName)) {\r\n                db.createObjectStore(this.storeName, {\r\n                    keyPath: 'key',\r\n                });\r\n            }\r\n        };\r\n        this.IDB = new IndexedDB();\r\n        this.initDB();\r\n        this.bindEvents();\r\n    }\r\n    async initDB() {\r\n        // 如果用户没有启用“背景图片”，就不会创建数据库\r\n        // 因为大部分用户都不会启用此功能，所以没必要创建数据库\r\n        if (settings.bgDisplay) {\r\n            await this.IDB.open(this.DBName, this.DBVer, this.onUpdate);\r\n            this.restore();\r\n        }\r\n    }\r\n    createBGLayer(wrap) {\r\n        const div = document.createElement('div');\r\n        div.classList.add(this.bgLayerClassName);\r\n        const el = wrap.insertAdjacentElement('afterbegin', div);\r\n        return el;\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.selectBG, () => {\r\n            this.selectBG();\r\n        });\r\n        window.addEventListener(EVT.list.clearBG, () => {\r\n            this.clearBG();\r\n        });\r\n        window.addEventListener(EVT.list.settingChange, (ev) => {\r\n            const data = ev.detail.data;\r\n            if (data.name === 'bgDisplay') {\r\n                this.setBGAll();\r\n                if (data.value) {\r\n                    this.initDB();\r\n                }\r\n            }\r\n            if (data.name === 'bgOpacity') {\r\n                this.setBGAll();\r\n            }\r\n            if (data.name === 'bgPositionY') {\r\n                this.setBGAll();\r\n            }\r\n        });\r\n    }\r\n    async restore() {\r\n        const data = (await this.IDB.get(this.storeName, this.keyName));\r\n        if (!data || !data.file) {\r\n            return;\r\n        }\r\n        this.bgUrl = URL.createObjectURL(data.file);\r\n        this.preload();\r\n    }\r\n    async selectBG() {\r\n        const file = (await Utils.selectFile('.jpg,.jpeg,.png,.bmp,.webp'))[0];\r\n        this.bgUrl = URL.createObjectURL(file);\r\n        this.preload();\r\n        for (const o of this.list) {\r\n            this.setBG(o);\r\n        }\r\n        const data = {\r\n            key: this.keyName,\r\n            file: file,\r\n        };\r\n        const test = await this.IDB.get(this.storeName, this.keyName);\r\n        this.IDB[test ? 'put' : 'add'](this.storeName, data);\r\n    }\r\n    clearBG() {\r\n        this.IDB.clear(this.storeName);\r\n        this.bgUrl = '';\r\n        for (const o of this.list) {\r\n            o.bg.style.backgroundImage = 'none';\r\n            this.setDisplay(o);\r\n        }\r\n    }\r\n    // 预加载背景图片\r\n    preload() {\r\n        // 由于浏览器的工作原理，背景图片在未被显示之前是不会加载的，在显示时才会进行加载。这会导致背景层显示之后出现短暂的空白（因为在加载图片）。为了避免空白，需要预加载图片\r\n        const img = new Image();\r\n        img.src = this.bgUrl;\r\n        img.style.display = 'none';\r\n        document.body.append(img);\r\n    }\r\n    async setBG(o) {\r\n        this.setPositionY(o);\r\n        this.setOpacity(o);\r\n        this.setBGURL(o);\r\n        this.setDisplay(o);\r\n    }\r\n    async setBGAll() {\r\n        for (const o of this.list) {\r\n            this.setPositionY(o);\r\n            this.setOpacity(o);\r\n            this.setBGURL(o);\r\n            this.setDisplay(o);\r\n        }\r\n    }\r\n    setBGURL(o) {\r\n        o.bg.style.backgroundImage = `url(${this.bgUrl})`;\r\n    }\r\n    setDisplay(o) {\r\n        o.bg.style.display = settings.bgDisplay ? 'block' : 'none';\r\n        if (!this.bgUrl) {\r\n            o.wrap.classList.remove(this.bgModeflagClassName);\r\n        }\r\n        else {\r\n            o.wrap.classList[settings.bgDisplay ? 'add' : 'remove'](this.bgModeflagClassName);\r\n        }\r\n    }\r\n    setOpacity(o) {\r\n        o.bg.style.opacity = (o.opacity || settings.bgOpacity / 100).toString();\r\n    }\r\n    setPositionY(o) {\r\n        o.bg.style.backgroundPositionY = settings.bgPositionY;\r\n    }\r\n    // 其他模块可以调用这个方法，为一个元素添加背景层\r\n    // 如果传入一个真值的不透明度，会始终使用传入的不透明度，忽略用户用户设置的不透明度\r\n    useBG(wrap, opacity) {\r\n        if (this.bgUrl) {\r\n            this.readySet(wrap, opacity);\r\n        }\r\n        else {\r\n            let timer = window.setInterval(() => {\r\n                if (this.bgUrl) {\r\n                    window.clearInterval(timer);\r\n                    this.readySet(wrap);\r\n                }\r\n            }, 300);\r\n        }\r\n    }\r\n    readySet(wrap, opacity) {\r\n        const o = {\r\n            wrap,\r\n            bg: this.createBGLayer(wrap),\r\n            opacity,\r\n        };\r\n        this.list.push(o);\r\n        this.setBG(o);\r\n    }\r\n}\r\nconst bg = new BG();\r\nexport { bg };\r\n","import { EVT } from './EVT';\r\nimport { settings } from './setting/Settings';\r\nclass BoldKeywords {\r\n    constructor(wrap) {\r\n        this.className = 'showBlobKeywords';\r\n        this.wrap = wrap;\r\n        this.bindEvent();\r\n        this.setClassName();\r\n    }\r\n    bindEvent() {\r\n        window.addEventListener(EVT.list.settingChange, (ev) => {\r\n            const data = ev.detail.data;\r\n            if (data.name === 'boldKeywords') {\r\n                this.setClassName();\r\n            }\r\n        });\r\n    }\r\n    setClassName() {\r\n        this.wrap.classList[settings.boldKeywords ? 'add' : 'remove'](this.className);\r\n    }\r\n}\r\nexport { BoldKeywords };\r\n","// 用户界面\r\nimport { lang } from './Lang';\r\nimport { EVT } from './EVT';\r\nimport './OpenCenterPanel';\r\nimport { bg } from './BG';\r\nimport { BoldKeywords } from './BoldKeywords';\r\nimport { states } from './States';\r\nimport { msgBox } from './MsgBox';\r\nimport { Config } from './Config';\r\n// 中间面板\r\nclass CenterPanel {\r\n    constructor() {\r\n        this.centerPanel = document.createElement('div'); // 中间面板\r\n        this.allLangFlag = [];\r\n        this.addCenterPanel();\r\n        lang.register(this.centerPanel);\r\n        bg.useBG(this.centerPanel);\r\n        new BoldKeywords(this.centerPanel);\r\n        this.allLangFlag = lang.langTypes.map((type) => 'lang_' + type);\r\n        this.setLangFlag();\r\n        this.bindEvents();\r\n    }\r\n    // 添加中间面板\r\n    addCenterPanel() {\r\n        const centerPanelHTML = `\n      <div class=\"centerWrap ${'lang_' + lang.type}\">\n\n      <div class=\"centerWrap_head\">\n      <div class=\"centerWrap_title blue\">\n      ${Config.appName}\n      <div class=\"btns\">\n      <a class=\"has_tip centerWrap_top_btn\" data-xztip=\"_github\" href=\"https://github.com/xuejianxianzun/PixivFanboxDownloader\" target=\"_blank\">\n      <svg class=\"icon\" aria-hidden=\"true\">\n        <use xlink:href=\"#icon-github\"></use>\n      </svg>\n      </a>\n      \n      <button class=\"textButton has_tip centerWrap_top_btn centerWrap_close\" data-xztip=\"_隐藏下载面板\" data-xztitle=\"_隐藏下载面板\">\n      <svg class=\"icon\" aria-hidden=\"true\">\n        <use xlink:href=\"#icon-guanbi\"></use>\n      </svg>\n      </button>\n\n      </div>\n      </div>\n\n      </div>\n\n      <div class=\"centerWrap_con beautify_scrollbar\">\n      <slot data-name=\"form\"></slot>\n\n      <div class=\"help_bar gray1\"> \n      <button class=\"textButton gray1\" id=\"showDownTip\" type=\"button\" data-xztext=\"_常见问题\"></button>\n      <a class=\"gray1\" href=\"https://discord.gg/u4wVMy7xJM\" target=\"_blank\">Discord</a>\n      <a class=\"gray1\" href=\"https://chrome.google.com/webstore/detail/powerful-pixiv-downloader/dkndmhgdcmjdmkdonmbgjpijejdcilfh\" target=\"_blank\" data-xztext=\"_pixivDownloader\"></a>\n      <button class=\"textButton gray1\" id=\"showPatronTip\" type=\"button\" data-xztext=\"_赞助我\"></button>\n      </div>\n      \n      </div>\n\n      </div>\n      `;\r\n        document.body.insertAdjacentHTML('beforebegin', centerPanelHTML);\r\n        this.centerPanel = document.querySelector('.centerWrap');\r\n    }\r\n    setLangFlag() {\r\n        this.allLangFlag.forEach((flag) => {\r\n            this.centerPanel.classList.remove(flag);\r\n        });\r\n        this.centerPanel.classList.add('lang_' + lang.type);\r\n    }\r\n    // 绑定中间面板上的事件\r\n    bindEvents() {\r\n        // 监听点击扩展图标的消息，开关中间面板\r\n        chrome.runtime.onMessage.addListener((msg) => {\r\n            if (msg.msg === 'click_icon') {\r\n                this.toggle();\r\n            }\r\n        });\r\n        // 使用快捷键 Alt + x 切换中间面板显示隐藏\r\n        window.addEventListener('keydown', (ev) => {\r\n            if (ev.altKey && ev.code === 'KeyX') {\r\n                this.toggle();\r\n            }\r\n        }, false);\r\n        // 关闭按钮\r\n        document\r\n            .querySelector('.centerWrap_close')\r\n            .addEventListener('click', () => {\r\n            EVT.fire('closeCenterPanel');\r\n        });\r\n        // 开始抓取作品时，隐藏\r\n        window.addEventListener(EVT.list.crawlStart, () => {\r\n            EVT.fire('closeCenterPanel');\r\n        });\r\n        // 抓取完作品详细数据时，显示\r\n        for (const ev of [EVT.list.crawlFinish, EVT.list.resume]) {\r\n            window.addEventListener(ev, () => {\r\n                if (!states.quickCrawl) {\r\n                    this.show();\r\n                }\r\n            });\r\n        }\r\n        window.addEventListener(EVT.list.openCenterPanel, () => {\r\n            this.show();\r\n        });\r\n        window.addEventListener(EVT.list.closeCenterPanel, () => {\r\n            this.close();\r\n        });\r\n        // 显示常见问题\r\n        this.centerPanel\r\n            .querySelector('#showDownTip')\r\n            .addEventListener('click', () => msgBox.show(lang.transl('_常见问题说明'), {\r\n            title: lang.transl('_常见问题'),\r\n        }));\r\n        this.centerPanel\r\n            .querySelector('#showPatronTip')\r\n            .addEventListener('click', () => msgBox.show(lang.transl('_赞助方式提示'), {\r\n            title: lang.transl('_赞助我'),\r\n        }));\r\n        this.centerPanel.addEventListener('click', (e) => {\r\n            const ev = e || window.event;\r\n            ev.stopPropagation();\r\n        });\r\n        document.addEventListener('click', () => {\r\n            if (getComputedStyle(this.centerPanel)['display'] !== 'none') {\r\n                EVT.fire('closeCenterPanel');\r\n            }\r\n        });\r\n        window.addEventListener(EVT.list.langChange, () => {\r\n            this.setLangFlag();\r\n        });\r\n    }\r\n    // 显示中间区域\r\n    show() {\r\n        this.centerPanel.style.display = 'block';\r\n        EVT.fire('centerPanelOpened');\r\n    }\r\n    // 隐藏中间区域\r\n    close() {\r\n        this.centerPanel.style.display = 'none';\r\n        EVT.fire('centerPanelClosed');\r\n    }\r\n    toggle() {\r\n        const nowDisplay = this.centerPanel.style.display;\r\n        nowDisplay === 'block' ? this.close() : this.show();\r\n        if (nowDisplay === 'block') {\r\n            EVT.fire('closeCenterPanel');\r\n        }\r\n        else {\r\n            EVT.fire('openCenterPanel');\r\n        }\r\n    }\r\n}\r\nnew CenterPanel();\r\n","import { EVT } from './EVT';\r\nimport { lang } from './Lang';\r\nimport { log } from './Log';\r\n// 某些国产套壳浏览器不能正常使用本程序。如果检测到该浏览器，则显示提示\r\n// 相关文档： notes/一些国产套壳浏览器使用本程序的情况.md\r\nclass CheckUnsupportBrowser {\r\n    constructor() {\r\n        this.rules = {\r\n            // \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36 SE 2.X MetaSr 1.0\"\r\n            Sougou: function () {\r\n                return navigator.userAgent.includes(' SE ');\r\n            },\r\n            // \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3872.400 QQBrowser/10.8.4455.400\"\r\n            QQ: function () {\r\n                return navigator.userAgent.includes('QQBrowser');\r\n            },\r\n            // \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3947.100 Safari/537.36 2345Explorer/10.21.0.21486\"\r\n            '2345': function () {\r\n                return navigator.userAgent.includes('2345Explorer');\r\n            },\r\n            All: function () {\r\n                // 如果这个浏览器的 Chrome 内核的版本号较低，也会显示提示\r\n                // 为什么设置为 88：\r\n                // 1. 下载器使用的 Manifest V2 需要的内核版本最低为 79\r\n                // 2. Cent 浏览器的内核版本是 86，但它即使使用 V2，仍然会在转换 GIF 时出现问题，所以需要提高版本号\r\n                // 3. 未来升级到 Manifest V3 需要的内核版本最低为 88\r\n                const minChromeVer = 88;\r\n                const test = navigator.userAgent.match(/Chrome\\/(\\d*)/);\r\n                if (test && test[1]) {\r\n                    const ver = Number.parseInt(test[1]);\r\n                    if (ver < minChromeVer) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n        };\r\n        window.addEventListener(EVT.list.settingInitialized, () => {\r\n            this.check();\r\n        });\r\n    }\r\n    check() {\r\n        for (const func of Object.values(this.rules)) {\r\n            if (func()) {\r\n                const msg = lang.transl('_不支持的浏览器');\r\n                log.error(msg);\r\n                // msgBox.error(msg)\r\n                return;\r\n            }\r\n        }\r\n        if (navigator.userAgent.includes('YaBrowser')) {\r\n            log.warning(lang.transl('_yandex浏览器的警告'));\r\n        }\r\n    }\r\n}\r\nnew CheckUnsupportBrowser();\r\n","var Colors;\r\n(function (Colors) {\r\n    // 通用颜色\r\n    Colors[\"white\"] = \"#fff\";\r\n    Colors[\"black\"] = \"#000\";\r\n    Colors[\"red\"] = \"#f00\";\r\n    Colors[\"theme\"] = \"#0ea8ef\";\r\n    // 带有语义的字体颜色\r\n    Colors[\"textSuccess\"] = \"#00BD17\";\r\n    Colors[\"textWarning\"] = \"#d27e00\";\r\n    Colors[\"textError\"] = \"#f00\";\r\n    // 背景颜色\r\n    // 稍暗，适合在颜色区域的面积较大时使用\r\n    Colors[\"bgBlue\"] = \"#0ea8ef\";\r\n    Colors[\"bgGreen\"] = \"#14ad27\";\r\n    Colors[\"bgYellow\"] = \"#e49d00\";\r\n    Colors[\"bgRed\"] = \"#f33939\";\r\n    // 带有语义的背景颜色\r\n    // 稍亮，适合在小区域使用\r\n    Colors[\"bgBrightBlue\"] = \"#29b3f3\";\r\n    Colors[\"bgSuccess\"] = \"#00BD17\";\r\n    Colors[\"bgWarning\"] = \"#e49d00\";\r\n    Colors[\"bgError\"] = \"#f00\";\r\n})(Colors || (Colors = {}));\r\nexport { Colors };\r\n","// 储存一些配置\r\n// 用户不可以修改这里的配置\r\nclass Config {\r\n}\r\n/**使用输出面板显示内容时，如果文件数量大于这个值，就不再显示内容，而是保存到 txt 文件 */\r\nConfig.outputMax = 5000;\r\n/**同时下载的文件数量的最大值 */\r\nConfig.downloadThreadMax = 6;\r\n/**下载某个文件出错时，最大重试次数 */\r\nConfig.retryMax = 10;\r\n/**程序名 */\r\nConfig.appName = 'Pixiv Fanbox Downloader';\r\n/**下载器设置在 localStorage 里储存时的 name */\r\nConfig.settingStoreName = 'fanboxSetting';\r\n/**文件类型。fanbox 允许直接上传在投稿里的文件类型只有这些 */\r\nConfig.fileType = {\r\n    image: ['jpg', 'jpeg', 'png', 'gif', 'bmp'],\r\n    music: ['wav', 'mp3', 'flac'],\r\n    video: ['mp4', 'mov', 'avi'],\r\n    compressed: ['zip'],\r\n    ps: ['psd', 'clip'],\r\n    other: ['txt', 'pdf'],\r\n};\r\n/**默认的命名规则 */\r\nConfig.defaultNameRule = '{user}/{date}-{title}/{index}';\r\nexport { Config };\r\n","// 管理自定义事件\r\nclass EVENT {\r\n    constructor() {\r\n        this.bindOnceFlagList = [];\r\n        this.list = {\r\n            crawlStart: 'crawlStart',\r\n            crawlFinish: 'crawlFinish',\r\n            crawlEmpty: 'crawlEmpty',\r\n            crawlError: 'crawlError',\r\n            addResult: 'addResult',\r\n            downloadStart: 'downloadStart',\r\n            downloadPause: 'downloadPause',\r\n            downloadStop: 'downloadStop',\r\n            download: 'download',\r\n            downloadSuccess: 'downloadSuccess',\r\n            downloadError: 'downloadError',\r\n            downloadComplete: 'downloadComplete',\r\n            pageSwitch: 'pageSwitch',\r\n            pageTypeChange: 'pageTypeChange',\r\n            resetOption: 'resetOption',\r\n            convertChange: 'convertChange',\r\n            previewFileName: 'previewFileName',\r\n            output: 'output',\r\n            hideCenterPanel: 'hideCenterPanel',\r\n            showCenterPanel: 'showCenterPanel',\r\n            clearMultiple: 'clearMultiple',\r\n            clearUgoira: 'clearUgoira',\r\n            deleteWork: 'deleteWork',\r\n            worksUpdate: 'worksUpdate',\r\n            settingChange: 'settingChange',\r\n            clickRightIcon: 'clickRightIcon',\r\n            convertError: 'convertError',\r\n            skipDownload: 'skipDownload',\r\n            resetSettings: 'resetSettings',\r\n            exportSettings: 'exportSettings',\r\n            importSettings: 'importSettings',\r\n            settingInitialized: 'settingInitialized',\r\n            resetSettingsEnd: 'resetSettingsEnd',\r\n            pageSwitchedTypeChange: 'pageSwitchedTypeChange',\r\n            pageSwitchedTypeNotChange: 'pageSwitchedTypeNotChange',\r\n            openCenterPanel: 'openCenterPanel',\r\n            closeCenterPanel: 'closeCenterPanel',\r\n            centerPanelOpened: 'centerPanelOpened',\r\n            centerPanelClosed: 'centerPanelClosed',\r\n            showMsg: 'showMsg',\r\n            langChange: 'langChange',\r\n            selectBG: 'selectBG',\r\n            clearBG: 'clearBG',\r\n            wrongSetting: 'wrongSetting',\r\n            clearLog: 'clearLog',\r\n            quickCrawl: 'quickCrawl',\r\n            importDownloadRecord: 'importDownloadRecord',\r\n            exportDownloadRecord: 'exportDownloadRecord',\r\n            clearDownloadRecord: 'clearDownloadRecord',\r\n            resume: 'resume',\r\n            clearSavedCrawl: 'clearSavedCrawl',\r\n        };\r\n    }\r\n    // 只绑定某个事件一次，用于防止事件重复绑定\r\n    // 通过 flag 确认是否是同一个事件\r\n    // 可以执行多次，不会自动解绑\r\n    bindOnce(flag, targetEvt, evtFun) {\r\n        const query = this.bindOnceFlagList.includes(flag);\r\n        if (!query) {\r\n            this.bindOnceFlagList.push(flag);\r\n            window.addEventListener(targetEvt, function (ev) {\r\n                evtFun(ev);\r\n            });\r\n        }\r\n    }\r\n    fire(type, data = '') {\r\n        const event = new CustomEvent(type, {\r\n            detail: { data: data },\r\n        });\r\n        window.dispatchEvent(event);\r\n    }\r\n}\r\nconst EVT = new EVENT();\r\nexport { EVT };\r\n","import { EVT } from './EVT';\r\nimport { store } from './Store';\r\nimport { lang } from './Lang';\r\nimport { DateFormat } from './utils/DateFormat';\r\nimport { settings } from './setting/Settings';\r\nimport { Config } from './Config';\r\nclass FileName {\r\n    constructor() {\r\n        // 用正则过滤不安全的字符，（Chrome 和 Windows 不允许做文件名的字符）\r\n        // 不安全的字符，这里多数是控制字符，需要替换掉\r\n        this.unsafeStr = new RegExp(/[\\u0001-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0605\\u061c\\u06dd\\u070f\\u08e2\\u180e\\u200b-\\u200f\\u202a-\\u202e\\u2060-\\u2064\\u2066-\\u206f\\ufdd0-\\ufdef\\ufeff\\ufff9-\\ufffb\\ufffe\\uffff]/g);\r\n        // 一些需要替换成全角字符的符号，左边是正则表达式的字符\r\n        this.fullWidthDict = [\r\n            ['\\\\\\\\', '＼'],\r\n            ['/', '／'],\r\n            [':', '：'],\r\n            ['\\\\?', '？'],\r\n            ['\"', '＂'],\r\n            ['<', '＜'],\r\n            ['>', '＞'],\r\n            ['\\\\*', '＊'],\r\n            ['\\\\|', '｜'],\r\n            ['~', '～'],\r\n        ];\r\n        window.addEventListener(EVT.list.previewFileName, () => {\r\n            this.previewFileName();\r\n        });\r\n    }\r\n    // 把一些特殊字符替换成全角字符\r\n    replaceUnsafeStr(str) {\r\n        str = str.replace(this.unsafeStr, '');\r\n        for (let index = 0; index < this.fullWidthDict.length; index++) {\r\n            const rule = this.fullWidthDict[index];\r\n            const reg = new RegExp(rule[0], 'g');\r\n            str = str.replace(reg, rule[1]);\r\n        }\r\n        return str;\r\n    }\r\n    // 生成 {index} 标记的值\r\n    createIndex(data) {\r\n        let index = data.index.toString();\r\n        // 处理在前面填充 0 的情况\r\n        return settings.zeroPadding\r\n            ? index.padStart(settings.zeroPaddingLength, '0')\r\n            : index;\r\n    }\r\n    // 生成文件名，传入参数为图片信息\r\n    getFileName(data) {\r\n        let result = settings.userSetName;\r\n        // 为空时使用预设的命名规则\r\n        result = result || Config.defaultNameRule;\r\n        // 配置所有命名标记\r\n        const cfg = {\r\n            '{postid}': {\r\n                value: data.postId,\r\n                safe: true,\r\n            },\r\n            '{post_id}': {\r\n                value: data.postId,\r\n                safe: true,\r\n            },\r\n            '{title}': {\r\n                value: data.title,\r\n                safe: false,\r\n            },\r\n            '{name}': {\r\n                value: data.name,\r\n                safe: false,\r\n            },\r\n            '{ext}': {\r\n                value: data.ext,\r\n                safe: false,\r\n            },\r\n            '{index}': {\r\n                value: this.createIndex(data),\r\n                safe: false,\r\n            },\r\n            '{tags}': {\r\n                value: data.tags,\r\n                safe: false,\r\n            },\r\n            '{date}': {\r\n                value: DateFormat.format(data.date, settings.dateFormat),\r\n                safe: false,\r\n            },\r\n            '{task_date}': {\r\n                value: DateFormat.format(store.date, settings.dateFormat),\r\n                prefix: '',\r\n                safe: false,\r\n            },\r\n            '{fee}': {\r\n                value: data.fee,\r\n                safe: true,\r\n            },\r\n            '{user}': {\r\n                value: data.user,\r\n                safe: false,\r\n            },\r\n            '{create_id}': {\r\n                value: data.createID,\r\n                safe: true,\r\n            },\r\n            '{uid}': {\r\n                value: data.uid,\r\n                safe: true,\r\n            },\r\n            '{user_id}': {\r\n                value: data.uid,\r\n                safe: true,\r\n            },\r\n        };\r\n        // 替换命名规则里的特殊字符\r\n        result = this.replaceUnsafeStr(result);\r\n        // 上一步会把斜线 / 替换成全角的斜线 ／，这里再替换回来，否则就不能建立文件夹了\r\n        result = result.replace(/／/g, '/');\r\n        // 把命名规则的标记替换成实际值\r\n        for (const [key, val] of Object.entries(cfg)) {\r\n            // 只有当标记有值时才会进行替换，所以没有值的标记会原样保留\r\n            if (result.includes(key) && val.value !== '' && val.value !== null) {\r\n                let once = String(val.value);\r\n                // 处理标记值中的特殊字符\r\n                if (!val.safe) {\r\n                    once = this.replaceUnsafeStr(once);\r\n                }\r\n                result = result.replace(new RegExp(key, 'g'), once); // 将标记替换成最终值，如果有重复的标记，全部替换\r\n            }\r\n        }\r\n        // 处理空值，连续的 '//'。 有时候两个斜线中间的字段是空值，最后就变成两个斜线挨在一起了\r\n        result = result.replace(/undefined/g, '').replace(/\\/{2,9}/, '/');\r\n        // 对每一层路径进行处理\r\n        let tempArr = result.split('/');\r\n        tempArr.forEach((str, index, arr) => {\r\n            // 替换路径首尾的空格\r\n            // 把每层路径头尾的 . 变成全角的．因为 Chrome 不允许头尾使用 .\r\n            arr[index] = str.trim().replace(/^\\./g, '．').replace(/\\.$/g, '．');\r\n        });\r\n        result = tempArr.join('/');\r\n        // 去掉头尾的 /\r\n        if (result.startsWith('/')) {\r\n            result = result.replace('/', '');\r\n        }\r\n        if (result.endsWith('/')) {\r\n            result = result.substr(0, result.length - 1);\r\n        }\r\n        // 添加后缀名\r\n        result += '.' + data.ext;\r\n        return result;\r\n    }\r\n    // 预览文件名\r\n    previewFileName() {\r\n        if (store.result.length === 0) {\r\n            return alert(lang.transl('_没有数据可供使用'));\r\n        }\r\n        // 使用数组储存和拼接字符串，提高性能\r\n        const resultArr = [];\r\n        const length = store.result.length;\r\n        for (let i = 0; i < length; i++) {\r\n            const data = store.result[i];\r\n            // 为生成的文件名添加颜色\r\n            const fullName = this.getFileName(data);\r\n            const part = fullName.split('/');\r\n            const length = part.length;\r\n            for (let i = 0; i < length; i++) {\r\n                const str = part[i];\r\n                if (i < length - 1) {\r\n                    // 如果不是最后一项，说明是文件夹名，添加颜色\r\n                    part[i] = `<span class=\"color666\">${str}</span>`;\r\n                }\r\n                else {\r\n                    // 最后一项，是文件名，添加颜色\r\n                    part[i] = `<span class=\"color000\">${str}</span>`;\r\n                }\r\n            }\r\n            const fullNameHtml = part.join('/');\r\n            // 保存本条结果\r\n            const nowResult = `<p class=\"result\">${fullNameHtml}</p>`;\r\n            resultArr.push(nowResult);\r\n        }\r\n        // 拼接所有结果\r\n        const result = resultArr.join('');\r\n        EVT.fire('output', {\r\n            content: result,\r\n            title: '_预览文件名',\r\n        });\r\n    }\r\n}\r\nconst fileName = new FileName();\r\nexport { fileName };\r\n","import { log } from './Log';\r\nimport { EVT } from './EVT';\r\nimport { Config } from './Config';\r\nimport { settings } from './setting/Settings';\r\nimport { msgBox } from './MsgBox';\r\nimport { lang } from './Lang';\r\n// 审查每个文件的数据，决定是否要下载它\r\nclass Filter {\r\n    constructor() {\r\n        this.bindEvents();\r\n    }\r\n    // 对启用了的过滤选项显示提示\r\n    showTip() {\r\n        this.getFeeType();\r\n        this.getFeeRange();\r\n        this.getIdRange();\r\n        this.getPostDate();\r\n        this.getTitleMustText();\r\n        this.getTitleCannotText();\r\n    }\r\n    getFeeType() {\r\n        if (settings.free && settings.pay) {\r\n            return;\r\n        }\r\n        let msg = '';\r\n        if (settings.free) {\r\n            msg = `${lang.transl('_费用类型')}: ${lang.transl('_免费投稿')}`;\r\n        }\r\n        if (settings.pay) {\r\n            msg = `${lang.transl('_费用类型')}: ${lang.transl('_付费投稿')}`;\r\n        }\r\n        log.warning(msg);\r\n    }\r\n    getFeeRange() {\r\n        if (!settings.feeSwitch) {\r\n            return;\r\n        }\r\n        const msg = `${lang.transl('_价格范围')}: ${lang.transl('_最小值')} ${settings.fee}¥`;\r\n        log.warning(msg);\r\n    }\r\n    // 提示 id 范围设置\r\n    getIdRange() {\r\n        if (!settings.idRangeSwitch) {\r\n            return;\r\n        }\r\n        log.warning(`id ${settings.idRange} ${settings.idRangeInput}`);\r\n    }\r\n    // 提示投稿时间设置\r\n    getPostDate() {\r\n        if (!settings.postDate) {\r\n            return;\r\n        }\r\n        if (isNaN(settings.postDateStart) || isNaN(settings.postDateStart)) {\r\n            const msg = lang.transl('_日期时间格式错误');\r\n            this.showWarning(msg);\r\n        }\r\n        else {\r\n            const start = new Date(settings.postDateStart).toLocaleString();\r\n            const end = new Date(settings.postDateEnd).toLocaleString();\r\n            log.warning(`${lang.transl('_时间范围')}: ${start} - ${end}`);\r\n        }\r\n    }\r\n    getTitleMustText() {\r\n        if (!settings.titleMustTextSwitch) {\r\n            return;\r\n        }\r\n        const msg = `${lang.transl('_投稿标题必须含有文字')}: ${settings.titleMustText.toString()}`;\r\n        log.warning(msg);\r\n    }\r\n    getTitleCannotText() {\r\n        if (!settings.titleCannotTextSwitch) {\r\n            return;\r\n        }\r\n        const msg = `${lang.transl('_投稿标题不能含有文字')}: ${settings.titleCannotText.toString()}`;\r\n        log.warning(msg);\r\n    }\r\n    // 检查投稿是否符合过滤器的要求\r\n    // 想要检查哪些数据就传递哪些数据，不需要传递 FilterOption 的所有选项\r\n    check(option) {\r\n        if (!this.checkFileType(option.ext)) {\r\n            return false;\r\n        }\r\n        if (!this.checkfeeType(option.fee)) {\r\n            log.warning(lang.transl('_跳过文章因为', option.title) + lang.transl('_费用类型'));\r\n            return false;\r\n        }\r\n        if (!this.checkfeeRange(option.fee)) {\r\n            log.warning(lang.transl('_跳过文章因为', option.title) + lang.transl('_价格范围'));\r\n            return false;\r\n        }\r\n        if (!this.checkIdRange(option.id)) {\r\n            log.warning(lang.transl('_跳过文章因为', option.title) + lang.transl('_id范围'));\r\n            return false;\r\n        }\r\n        if (!this.checkPostDate(option.date)) {\r\n            log.warning(lang.transl('_跳过文章因为', option.title) + lang.transl('_投稿时间'));\r\n            return false;\r\n        }\r\n        if (!this.checkTitltMustText(option.title)) {\r\n            log.warning(lang.transl('_跳过文章因为', option.title) +\r\n                lang.transl('_投稿标题必须含有文字'));\r\n            return false;\r\n        }\r\n        if (!this.checkTitltCannotText(option.title)) {\r\n            log.warning(lang.transl('_跳过文章因为', option.title) +\r\n                lang.transl('_投稿标题不能含有文字'));\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    checkFileType(ext) {\r\n        // 如果没有传递 ext，则保留这个文件\r\n        if (!ext) {\r\n            return true;\r\n        }\r\n        // 检查 ext 存在于哪种类型里，然后检查这个类型是否被选中\r\n        for (const [key, value] of Object.entries(Config.fileType)) {\r\n            if (value.includes(ext)) {\r\n                return settings[key];\r\n            }\r\n        }\r\n        // 如果这个 ext 不存在任何规定的类型里，则把它当作 other 类型，决定是否保留\r\n        return settings.other;\r\n    }\r\n    checkfeeType(fee) {\r\n        if (fee === undefined) {\r\n            return true;\r\n        }\r\n        if (fee > 0) {\r\n            return settings.pay;\r\n        }\r\n        else {\r\n            return settings.free;\r\n        }\r\n    }\r\n    checkfeeRange(fee) {\r\n        if (fee === undefined || !settings.feeSwitch) {\r\n            return true;\r\n        }\r\n        return fee >= settings.fee;\r\n    }\r\n    checkIdRange(id) {\r\n        if (id === undefined || !settings.idRangeSwitch) {\r\n            return true;\r\n        }\r\n        const nowId = parseInt(id.toString());\r\n        const setId = settings.idRangeInput;\r\n        if (settings.idRange === '>') {\r\n            return nowId > setId;\r\n        }\r\n        else {\r\n            return nowId < setId;\r\n        }\r\n    }\r\n    checkPostDate(date) {\r\n        if (!settings.postDate ||\r\n            date === undefined ||\r\n            !settings.postDateStart ||\r\n            !settings.postDateEnd) {\r\n            return true;\r\n        }\r\n        const nowDate = new Date(date);\r\n        return (nowDate.getTime() >= settings.postDateStart &&\r\n            nowDate.getTime() <= settings.postDateEnd);\r\n    }\r\n    checkTitltMustText(title) {\r\n        if (!settings.titleMustTextSwitch ||\r\n            !title ||\r\n            settings.titleMustText.length === 0) {\r\n            return true;\r\n        }\r\n        title = title.toLowerCase();\r\n        const match = settings.titleMustText.filter((str) => title.includes(str.toLowerCase()));\r\n        if (match.length === 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    checkTitltCannotText(title) {\r\n        if (!settings.titleCannotTextSwitch ||\r\n            !title ||\r\n            settings.titleCannotText.length === 0) {\r\n            return true;\r\n        }\r\n        title = title.toLowerCase();\r\n        const match = settings.titleCannotText.filter((str) => title.includes(str.toLowerCase()));\r\n        if (match.length > 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    // 如果设置项的值不合法，则显示提示\r\n    showWarning(msg) {\r\n        EVT.fire('wrongSetting');\r\n        msgBox.error(msg);\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.crawlStart, () => {\r\n            this.showTip();\r\n        });\r\n    }\r\n}\r\nconst filter = new Filter();\r\nexport { filter };\r\n","import { Config } from './Config';\r\nexport const formHtml = `<form class=\"settingForm\">\n    <p class=\"option\" data-no=\"2\">\n    <span class=\"settingNameStyle1\" data-xztext=\"_文件类型\"></span>\n\n    <input type=\"checkbox\" name=\"image\" id=\"fileType1\" class=\"need_beautify checkbox_common\" checked>\n    <span class=\"beautify_checkbox\"></span>\n    <label for=\"fileType1\" class=\"has_tip\" data-tip=\"${Config.fileType.image.join()}\" data-xztext=\"_图片\"></label>\n    \n    <input type=\"checkbox\" name=\"music\" id=\"fileType2\" class=\"need_beautify checkbox_common\" checked>\n    <span class=\"beautify_checkbox\"></span>\n    <label for=\"fileType2\" class=\"has_tip\" data-tip=\"${Config.fileType.music.join()}\" data-xztext=\"_音乐\"></label>\n\n    <input type=\"checkbox\" name=\"video\" id=\"fileType3\" class=\"need_beautify checkbox_common\" checked>\n    <span class=\"beautify_checkbox\"></span>\n    <label for=\"fileType3\" class=\"has_tip\" data-tip=\"${Config.fileType.video.join()}\" data-xztext=\"_视频\"></label>\n    \n    <input type=\"checkbox\" name=\"compressed\" id=\"fileType4\" class=\"need_beautify checkbox_common\" checked>\n    <span class=\"beautify_checkbox\"></span>\n    <label for=\"fileType4\" class=\"has_tip\" data-tip=\"${Config.fileType.compressed.join()}\" data-xztext=\"_压缩文件\"></label>\n    \n    <input type=\"checkbox\" name=\"ps\" id=\"fileType5\" class=\"need_beautify checkbox_common\" checked>\n    <span class=\"beautify_checkbox\"></span>\n    <label for=\"fileType5\" class=\"has_tip\" data-tip=\"${Config.fileType.ps.join()}\" data-xztext=\"_PS文件\"></label>\n\n    <input type=\"checkbox\" name=\"other\" id=\"fileType6\" class=\"need_beautify checkbox_common\" checked>\n    <span class=\"beautify_checkbox\"></span>\n    <label for=\"fileType6\" class=\"has_tip\" data-tip=\"${Config.fileType.other.join()}\" data-xztext=\"_其他\"></label>\n    </p>\n\n    <p class=\"option\" data-no=\"21\">\n    <span class=\"settingNameStyle1\" data-xztext=\"_费用类型\"></span>\n\n    <input type=\"checkbox\" name=\"free\" id=\"postType1\" class=\"need_beautify checkbox_common\" checked>\n    <span class=\"beautify_checkbox\"></span>\n    <label for=\"postType1\" data-xztext=\"_免费投稿\"></label>\n\n    <input type=\"checkbox\" name=\"pay\" id=\"postType2\" class=\"need_beautify checkbox_common\" checked>\n    <span class=\"beautify_checkbox\"></span>\n    <label for=\"postType2\" data-xztext=\"_付费投稿\"></label>\n    </p>\n\n    <p class=\"option\" data-no=\"9\">\n    <span class=\"settingNameStyle1\" data-xztext=\"_价格范围\"></span>\n    <input type=\"checkbox\" name=\"feeSwitch\" class=\"need_beautify checkbox_switch\">\n    <span class=\"beautify_switch\"></span>\n    <span class=\"subOptionWrap\" data-show=\"feeSwitch\">\n    <span data-xztext=\"_最小值\"></span>\n    <input type=\"text\" name=\"fee\" class=\"setinput_style1 blue\" value=\"500\"> ¥\n    </span>\n    </p>\n    \n    <p class=\"option\" data-no=\"7\">\n    <span class=\"has_tip settingNameStyle1\" data-xztip=\"_设置id范围提示\">\n    <span data-xztext=\"_id范围\"></span>\n    <span class=\"gray1\"> ? </span>\n    </span>\n    <input type=\"checkbox\" name=\"idRangeSwitch\" class=\"need_beautify checkbox_switch\">\n    <span class=\"beautify_switch\"></span>\n    <span class=\"subOptionWrap\" data-show=\"idRangeSwitch\">\n    <input type=\"radio\" name=\"idRange\" id=\"idRange2\" class=\"need_beautify radio\" value=\"<\" checked>\n    <span class=\"beautify_radio\"></span>\n    <label for=\"idRange2\" data-xztext=\"_小于\"></label>\n    <input type=\"radio\" name=\"idRange\" id=\"idRange1\" class=\"need_beautify radio\" value=\">\">\n    <span class=\"beautify_radio\"></span>\n    <label for=\"idRange1\" data-xztext=\"_大于\"></label>\n    <input type=\"text\" name=\"idRangeInput\" class=\"setinput_style1 w100 blue\" value=\"0\">\n    </span>\n    </p>\n\n    <p class=\"option\" data-no=\"10\">\n    <span class=\"has_tip settingNameStyle1\" data-xztip=\"_设置投稿时间提示\">\n    <span data-xztext=\"_投稿时间\"></span>\n    <span class=\"gray1\"> ? </span>\n    </span>\n\n    <input type=\"checkbox\" name=\"postDate\" class=\"need_beautify checkbox_switch\">\n    <span class=\"beautify_switch\"></span>\n    <span class=\"subOptionWrap\" data-show=\"postDate\">\n    <input type=\"datetime-local\" name=\"postDateStart\" placeholder=\"yyyy-MM-dd HH:mm\" class=\"setinput_style1 postDate blue\" value=\"\">\n    &nbsp;-&nbsp;\n    <input type=\"datetime-local\" name=\"postDateEnd\" placeholder=\"yyyy-MM-dd HH:mm\" class=\"setinput_style1 postDate blue\" value=\"\">\n    </span>\n    </p>\n\n    <p class=\"option\" data-no=\"19\">\n    <span class=\"settingNameStyle1\" data-xztext=\"_保存投稿中的外部链接\"></span>\n    <input type=\"checkbox\" name=\"saveLink\" class=\"need_beautify checkbox_switch\" checked>\n    <span class=\"beautify_switch\"></span>\n    </p>\n    \n    <p class=\"option\" data-no=\"22\">\n    <span class=\"settingNameStyle1\" data-xztext=\"_保存投稿中的封面图片\"></span>\n    <input type=\"checkbox\" name=\"savePostCover\" class=\"need_beautify checkbox_switch\" checked>\n    <span class=\"beautify_switch\"></span>\n    </p>\n\n    <p class=\"option\" data-no=\"20\">\n    <span class=\"settingNameStyle1\" data-xztext=\"_保存投稿中的文字\"></span>\n    <input type=\"checkbox\" name=\"saveText\" class=\"need_beautify checkbox_switch\">\n    <span class=\"beautify_switch\"></span>\n    </p>\n\n    <p class=\"option\" data-no=\"23\">\n    <span class=\"has_tip settingNameStyle1\" data-xztip=\"_多条文字用逗号分割\">\n    <span data-xztext=\"_投稿标题必须含有文字\"></span>\n    <span class=\"gray1\"> ? </span>\n    </span>\n    <input type=\"checkbox\" name=\"titleMustTextSwitch\" class=\"need_beautify checkbox_switch\">\n    <span class=\"beautify_switch\"></span>\n    <span class=\"subOptionWrap\" data-show=\"titleMustTextSwitch\">\n    <input type=\"text\" name=\"titleMustText\" class=\"setinput_style1 blue fileNameRule\" value=\"\">\n    </span>\n    </p>\n\n    <p class=\"option\" data-no=\"24\">\n    <span class=\"has_tip settingNameStyle1\" data-xztip=\"_多条文字用逗号分割\">\n    <span data-xztext=\"_投稿标题不能含有文字\"></span>\n    <span class=\"gray1\"> ? </span>\n    </span>\n    <input type=\"checkbox\" name=\"titleCannotTextSwitch\" class=\"need_beautify checkbox_switch\">\n    <span class=\"beautify_switch\"></span>\n    <span class=\"subOptionWrap\" data-show=\"titleCannotTextSwitch\">\n    <input type=\"text\" name=\"titleCannotText\" class=\"setinput_style1 blue fileNameRule\" value=\"\">\n    </span>\n    </p>\n\n    <p class=\"option\" data-no=\"13\">\n      <span class=\"settingNameStyle1\">\n      <span data-xztext=\"_命名规则\"></span>\n      </span>\n      <input type=\"text\" name=\"userSetName\" class=\"setinput_style1 blue fileNameRule\" value=\"${Config.defaultNameRule}\">\n      &nbsp;\n      <select name=\"fileNameSelect\" class=\"beautify_scrollbar\">\n        <option value=\"default\">…</option>\n        <option value=\"{user}\">{user}</option>\n        <option value=\"{create_id}\">{create_id}</option>\n        <option value=\"{user_id}\">{user_id}</option>\n        <option value=\"{title}\">{title}</option>\n        <option value=\"{post_id}\">{post_id}</option>\n        <option value=\"{date}\">{date}</option>\n        <option value=\"{task_date}\">{task_date}</option>\n        <option value=\"{index}\">{index}</option>\n        <option value=\"{name}\">{name}</option>\n        <option value=\"{ext}\">{ext}</option>\n        <option value=\"{fee}\">{fee}</option>\n        <option value=\"{tags}\">{tags}</option>\n        </select>\n      &nbsp;\n      <slot data-name=\"saveNamingRule\"></slot>\n      <button class=\"showFileNameTip textButton\" type=\"button\" data-xztext=\"_提示\"></button>\n      </p>\n      <p class=\"tip tipWithBtn\" id=\"tipCreateFolder\">\n      <span class=\"left\">\n      <span data-xztext=\"_设置文件夹名的提示\"></span>\n      <strong>${Config.defaultNameRule}</strong>\n      </span>\n      <span class=\"right\">\n        <button type=\"button\" class=\"textButton gray1\" id=\"tipCreateFolderBtn\" data-xztext=\"_我知道了\">\n        </button>\n      </span>\n    </p>\n    <p class=\"fileNameTip tip\">\n      <span data-xztext=\"_设置文件夹名的提示\"></span>\n      <strong>${Config.defaultNameRule}</strong>\n      <br>\n      <span data-xztext=\"_命名标记提醒\"></span>\n      <br>\n      <span class=\"blue\">{user}</span>\n    <span data-xztext=\"_命名标记user\"></span>\n      <br>\n      <span class=\"blue\">{create_id}</span>\n    <span data-xztext=\"_命名标记create_id\"></span>\n      <br>\n      <span class=\"blue\">{user_id}</span>\n    <span data-xztext=\"_命名标记uid\"></span>\n      <br>\n      <span class=\"blue\">{title}</span>\n    <span data-xztext=\"_命名标记title\"></span>\n      <br>\n      <span class=\"blue\">{post_id}</span>\n    <span data-xztext=\"_命名标记postid\"></span>\n      <br>\n      <span class=\"blue\">{date}</span>\n    <span data-xztext=\"_命名标记date\"></span>\n      <br>\n      <span class=\"blue\">{task_date}</span>\n    <span data-xztext=\"_命名标记taskDate\"></span>\n      <br>\n      <span class=\"blue\">{index}</span>\n    <span data-xztext=\"_命名标记index\"></span>\n      <br>\n      <span class=\"blue\">{name}</span>\n    <span data-xztext=\"_命名标记name\"></span>\n      <br>\n      <span class=\"blue\">{ext}</span>\n    <span data-xztext=\"_命名标记ext\"></span>\n      <br>\n      <span class=\"blue\">{fee}</span>\n    <span data-xztext=\"_命名标记fee\"></span>\n      <br>\n      <span class=\"blue\">{tags}</span>\n    <span data-xztext=\"_命名标记tags\"></span>\n    </p>\n    \n    <p class=\"option\" data-no=\"46\">\n    <span class=\"has_tip settingNameStyle1\" data-xztip=\"_在序号前面填充0的说明\">\n    <span data-xztext=\"_在序号前面填充0\"></span>\n    <span class=\"gray1\"> ? </span></span>\n    <input type=\"checkbox\" name=\"zeroPadding\" class=\"need_beautify checkbox_switch\" >\n    <span class=\"beautify_switch\" tabindex=\"0\"></span>\n    <span class=\"subOptionWrap\" data-show=\"zeroPadding\">\n    <span data-xztext=\"_序号总长度\"></span>\n    <input type=\"text\" name=\"zeroPaddingLength\" class=\"setinput_style1 blue\" value=\"3\" style=\"width:30px;min-width: 30px;\">\n    </span>\n    </p>\n\n    <p class=\"option\" data-no=\"31\">\n    <span class=\"settingNameStyle1\" data-xztext=\"_日期格式\"></span>\n    <input type=\"text\" name=\"dateFormat\" class=\"setinput_style1 blue\" style=\"width:250px;\" value=\"YYYY-MM-DD\">\n    <button type=\"button\" class=\"gray1 textButton showDateTip\" data-xztext=\"_提示\"></button>\n    </p>\n    <p class=\"dateFormatTip tip\" style=\"display:none\">\n    <span data-xztext=\"_日期格式提示\"></span>\n    <br>\n    <span class=\"blue\">YYYY</span> <span>2021</span>\n    <br>\n    <span class=\"blue\">YY</span> <span>21</span>\n    <br>\n    <span class=\"blue\">MM</span> <span>04</span>\n    <br>\n    <span class=\"blue\">MMM</span> <span>Apr</span>\n    <br>\n    <span class=\"blue\">MMMM</span> <span>April</span>\n    <br>\n    <span class=\"blue\">DD</span> <span>30</span>\n    <br>\n    <span class=\"blue\">hh</span> <span>06</span>\n    <br>\n    <span class=\"blue\">mm</span> <span>40</span>\n    <br>\n    <span class=\"blue\">ss</span> <span>08</span>\n    <br>\n    </p>\n\n    <p class=\"option\" data-no=\"16\">\n    <span class=\"settingNameStyle1\"\">\n    <span data-xztext=\"_下载线程\"></span>\n    </span>\n    <input type=\"text\" name=\"downloadThread\" class=\"has_tip setinput_style1 blue\" data-xztip=\"_线程数字\" value=\"3\">\n    </p>\n\n    <p class=\"option\" data-no=\"17\">\n    <span class=\"has_tip settingNameStyle1\" data-xztip=\"_自动下载的提示\">\n    <span data-xztext=\"_自动开始下载\"></span>\n    <span class=\"gray1\"> ? </span>\n    </span>\n    <input type=\"checkbox\" name=\"autoStartDownload\" id=\"setQuietDownload\" class=\"need_beautify checkbox_switch\" checked>\n    <span class=\"beautify_switch\"></span>\n    </p>\n\n    <p class=\"option\" data-no=\"52\">\n    <span class=\"settingNameStyle1\" data-xztext=\"_下载完成后显示通知\"></span>\n    <input type=\"checkbox\" name=\"showNotificationAfterDownloadComplete\" class=\"need_beautify checkbox_switch\">\n    <span class=\"beautify_switch\" tabindex=\"0\"></span>\n    </p>\n      \n    <p class=\"option\" data-no=\"28\">\n    <span class=\"has_tip settingNameStyle1\" data-xztip=\"_不下载重复文件的提示\">\n    <span data-xztext=\"_不下载重复文件\"></span>\n    <span class=\"gray1\"> ? </span></span>\n    <input type=\"checkbox\" name=\"deduplication\" class=\"need_beautify checkbox_switch\">\n    <span class=\"beautify_switch\" tabindex=\"0\"></span>\n    <span class=\"subOptionWrap\" data-show=\"deduplication\">\n    <button class=\"textButton gray1\" type=\"button\" id=\"exportDownloadRecord\" data-xztext=\"_导出\"></button>\n    <button class=\"textButton gray1\" type=\"button\" id=\"importDownloadRecord\" data-xztext=\"_导入\"></button>\n    <button class=\"textButton gray1\" type=\"button\" id=\"clearDownloadRecord\" data-xztext=\"_清除\"></button>\n    </span>\n    </p>\n\n    <slot data-name=\"crawlBtns\" class=\"centerWrap_btns crawlBtns\"></slot>\n    <slot data-name=\"downloadArea\"></slot>\n    <slot data-name=\"progressBar\"></slot>\n\n    <p class=\"option\" data-no=\"18\">\n    <span class=\"has_tip settingNameStyle1\" data-xztip=\"_统一网址格式的说明\">\n    <span data-xztext=\"_统一网址格式\"></span>\n    <span class=\"gray1\"> ? </span>\n    </span>\n    <input type=\"checkbox\" name=\"unifiedURL\" class=\"need_beautify checkbox_switch\" checked>\n    <span class=\"beautify_switch\"></span>\n    </p>\n      \n    <p class=\"option\" data-no=\"53\">\n    <span class=\"settingNameStyle1\" data-xztext=\"_高亮显示关键字\"></span>\n    <input type=\"checkbox\" name=\"boldKeywords\" class=\"need_beautify checkbox_switch\">\n    <span class=\"beautify_switch\" tabindex=\"0\"></span>\n    </p>\n\n    <p class=\"option\" data-no=\"41\">\n    <span class=\"settingNameStyle1\" data-xztext=\"_背景图片\"> </span>\n    <input type=\"checkbox\" name=\"bgDisplay\" class=\"need_beautify checkbox_switch\">\n    <span class=\"beautify_switch\" tabindex=\"0\"></span>\n\n    <span class=\"subOptionWrap\" data-show=\"bgDisplay\">\n\n    <button class=\"textButton gray1\" type=\"button\" id=\"selectBG\" data-xztext=\"_选择文件\"></button>\n    <button class=\"textButton gray1\" type=\"button\" id=\"clearBG\" data-xztext=\"_清除\"></button>\n    \n    &nbsp;\n    <span data-xztext=\"_对齐方式\"></span>&nbsp;\n    <input type=\"radio\" name=\"bgPositionY\" id=\"bgPosition1\" class=\"need_beautify radio\" value=\"center\" checked>\n    <span class=\"beautify_radio\" tabindex=\"0\"></span>\n    <label for=\"bgPosition1\" data-xztext=\"_居中\"></label>\n    <input type=\"radio\" name=\"bgPositionY\" id=\"bgPosition2\" class=\"need_beautify radio\" value=\"top\">\n    <span class=\"beautify_radio\" tabindex=\"0\"></span>\n    <label for=\"bgPosition2\" data-xztext=\"_顶部\"></label>\n    <span data-xztext=\"_不透明度\"></span>&nbsp;\n    <input name=\"bgOpacity\" type=\"range\" />\n    </span>\n    </p>\n    \n    <p class=\"option\" data-no=\"32\">\n    <span class=\"settingNameStyle1\"><span class=\"key\">Language</span></span>\n    <input type=\"radio\" name=\"userSetLang\" id=\"userSetLang1\" class=\"need_beautify radio\" value=\"auto\" checked>\n    <span class=\"beautify_radio\" tabindex=\"0\"></span>\n    <label for=\"userSetLang1\" data-xztext=\"_自动检测\"></label>\n    <input type=\"radio\" name=\"userSetLang\" id=\"userSetLang2\" class=\"need_beautify radio\" value=\"zh-cn\">\n    <span class=\"beautify_radio\" tabindex=\"0\"></span>\n    <label for=\"userSetLang2\">简体中文</label>\n    <input type=\"radio\" name=\"userSetLang\" id=\"userSetLang3\" class=\"need_beautify radio\" value=\"zh-tw\">\n    <span class=\"beautify_radio\" tabindex=\"0\"></span>\n    <label for=\"userSetLang3\">繁體中文</label>\n    <input type=\"radio\" name=\"userSetLang\" id=\"userSetLang4\" class=\"need_beautify radio\" value=\"ja\">\n    <span class=\"beautify_radio\" tabindex=\"0\"></span>\n    <label for=\"userSetLang4\">日本語</label>\n    <input type=\"radio\" name=\"userSetLang\" id=\"userSetLang5\" class=\"need_beautify radio\" value=\"en\">\n    <span class=\"beautify_radio\" tabindex=\"0\"></span>\n    <label for=\"userSetLang5\">English</label>\n    <input type=\"radio\" name=\"userSetLang\" id=\"userSetLang6\" class=\"need_beautify radio\" value=\"ko\">\n    <span class=\"beautify_radio\" tabindex=\"0\"></span>\n    <label for=\"userSetLang6\">한국어</label>\n    </p>\n\n    <p class=\"option\" data-no=\"37\">\n    <span class=\"settingNameStyle1\" data-xztext=\"_管理设置\"></span>\n    <button class=\"textButton gray1\" type=\"button\" id=\"exportSettings\" data-xztext=\"_导出设置\"></button>\n    <button class=\"textButton gray1\" type=\"button\" id=\"importSettings\" data-xztext=\"_导入设置\"></button>\n    <button class=\"textButton gray1\" type=\"button\" id=\"resetSettings\" data-xztext=\"_重置设置\"></button>\n    </p>\n    \n    <p class=\"option\" data-no=\"51\">\n    <span class=\"has_tip settingNameStyle1\" data-xztip=\"_显示高级设置说明\">\n    <span data-xztext=\"_显示高级设置\"></span>\n    <span class=\"gray1\"> ? </span></span>\n    <input type=\"checkbox\" name=\"showAdvancedSettings\" class=\"need_beautify checkbox_switch\">\n    <span class=\"beautify_switch\" tabindex=\"0\"></span>\n    </p>\n\n</form>`;\r\n","import { Colors } from './Colors';\r\nimport { Tools } from './Tools';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nimport { EVT } from './EVT';\r\nclass InitHomePage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    addCrawlBtns() {\r\n        Tools.addBtn('crawlBtns', Colors.bgBlue, '_抓取赞助的所有用户的投稿').addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n        Tools.addBtn('crawlBtns', Colors.bgGreen, '_清空已保存的抓取结果').addEventListener('click', () => {\r\n            EVT.fire('clearSavedCrawl');\r\n        });\r\n    }\r\n    async FetchPostList() {\r\n        let data;\r\n        if (this.nextUrl) {\r\n            data = (await API.request(this.nextUrl));\r\n        }\r\n        else {\r\n            data = await API.getPostListSupporting(300);\r\n        }\r\n        this.afterFetchPostList(data);\r\n    }\r\n}\r\nexport { InitHomePage };\r\n","// 初始化页面，初始化抓取流程\r\nimport { EVT } from './EVT';\r\nimport { pageType } from './PageType';\r\nimport { InitHomePage } from './InitHomePage';\r\nimport { InitPostListPage } from './InitPostListPage';\r\nimport { InitTagPage } from './InitTagPage';\r\nimport { InitPostPage } from './InitPostPage';\r\nclass InitPage {\r\n    constructor() {\r\n        this.initPage();\r\n        // 页面类型变化时，初始化抓取流程\r\n        window.addEventListener(EVT.list.pageSwitchedTypeChange, () => {\r\n            setTimeout(() => {\r\n                this.initPage();\r\n            }, 0);\r\n        });\r\n    }\r\n    initPage() {\r\n        switch (pageType.type) {\r\n            case pageType.list.Home:\r\n            case pageType.list.Supporting:\r\n                return new InitHomePage();\r\n            case pageType.list.UserHome:\r\n            case pageType.list.UserPostList:\r\n                return new InitPostListPage();\r\n            case pageType.list.Post:\r\n                return new InitPostPage();\r\n            case pageType.list.Tags:\r\n                return new InitTagPage();\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n}\r\nnew InitPage();\r\n","// 初始化抓取页面的流程\r\nimport { lang } from './Lang';\r\nimport { Tools } from './Tools';\r\nimport { filter } from './Filter';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nimport { EVT } from './EVT';\r\nimport { saveData } from './SaveData';\r\nimport { API } from './API';\r\nimport { states } from './States';\r\nimport { msgBox } from './MsgBox';\r\nimport { toast } from './Toast';\r\nimport { Utils } from './utils/Utils';\r\nclass InitPageBase {\r\n    constructor() {\r\n        this.crawlNumber = 0; // 要抓取的个数/页数\r\n        this.nextUrl = null;\r\n        this.getPostDataThreadMax = 6;\r\n        this.getPostDataThreadNum = 0;\r\n        this.getPostDatafinished = 0;\r\n    }\r\n    // 初始化\r\n    init() {\r\n        this.addCrawlBtns();\r\n        this.addAnyElement();\r\n        this.initAny();\r\n        window.addEventListener(EVT.list.pageSwitchedTypeChange, () => {\r\n            this.destroy();\r\n        });\r\n    }\r\n    // 各个子类私有的初始化内容\r\n    initAny() { }\r\n    // 销毁初始化页面时添加的元素和事件，恢复设置项等\r\n    destroy() {\r\n        Tools.clearSlot('crawlBtns');\r\n    }\r\n    // 添加中间按钮\r\n    addCrawlBtns() { }\r\n    // 添加其他元素（如果有）\r\n    addAnyElement() { }\r\n    // 准备抓取，进行抓取之前的一些检查工作。必要时可以在子类中改写\r\n    async readyCrawl() {\r\n        if (states.busy) {\r\n            window.alert(lang.transl('_当前任务尚未完成2'));\r\n            return;\r\n        }\r\n        log.clear();\r\n        log.success(lang.transl('_开始抓取'));\r\n        toast.show(lang.transl('_开始抓取'));\r\n        EVT.fire('crawlStart');\r\n        this.getPostDataThreadNum = 0;\r\n        this.getPostDatafinished = 0;\r\n        this.nextUrl = null;\r\n        // 进入第一个抓取方法\r\n        this.nextStep();\r\n    }\r\n    // 当可以开始抓取时，进入下一个流程。默认情况下，开始获取作品列表。如有不同，由子类具体定义\r\n    nextStep() {\r\n        this.FetchPostList();\r\n    }\r\n    afterFetchPostList(data) {\r\n        if (data.body.items.length === 0) {\r\n            return this.noResult();\r\n        }\r\n        const items = data.body.items;\r\n        this.nextUrl = data.body.nextUrl;\r\n        for (const item of items) {\r\n            if (item.body === null) {\r\n                continue;\r\n            }\r\n            // 针对投稿进行检查，决定是否保留它\r\n            const id = item.id;\r\n            const fee = item.feeRequired;\r\n            const date = item.publishedDatetime;\r\n            const title = item.title;\r\n            const check = filter.check({ id, fee, date, title });\r\n            if (check) {\r\n                store.postIdList.push(id);\r\n            }\r\n        }\r\n        if (this.nextUrl) {\r\n            this.FetchPostList();\r\n        }\r\n        else {\r\n            this.FetchPostListFinished();\r\n        }\r\n    }\r\n    // 抓取文章列表之后，建立并发抓取线程，逐个获取文章数据\r\n    FetchPostListFinished() {\r\n        log.log(lang.transl('_列表页抓取完成'));\r\n        if (store.postIdList.length === 0) {\r\n            return this.noResult();\r\n        }\r\n        log.log(lang.transl('_当前作品个数', store.postIdList.length.toString()));\r\n        log.log(lang.transl('_开始获取投稿信息'));\r\n        for (let i = 0; i < this.getPostDataThreadMax; i++) {\r\n            const postId = store.postIdList.shift();\r\n            if (postId) {\r\n                this.getPostDataThreadNum++;\r\n                this.fetchPost(postId);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    async fetchPost(postId) {\r\n        const data = await API.getPost(postId);\r\n        this.afterFetchPost(data);\r\n    }\r\n    afterFetchPost(data) {\r\n        saveData.receive(data.body);\r\n        log.log(`${lang.transl('_待处理')} ${store.postIdList.length}`, 1, false);\r\n        // 当抓取完一个文章之后，如果还有等待抓取的文章就继续抓取\r\n        // 否则当前抓取线程结束。等待所有抓取线程完成之后，文章数据就全部获取了\r\n        const postId = store.postIdList.shift();\r\n        if (postId) {\r\n            this.fetchPost(postId);\r\n        }\r\n        else {\r\n            this.getPostDatafinished++;\r\n            if (this.getPostDatafinished == this.getPostDataThreadNum) {\r\n                this.crawlFinished();\r\n            }\r\n        }\r\n    }\r\n    // 抓取完毕\r\n    crawlFinished() {\r\n        if (store.skipDueToFee > 0) {\r\n            log.warning(lang.transl('_因为价格限制而跳过的投稿数量') + store.skipDueToFee);\r\n        }\r\n        if (store.result.length === 0) {\r\n            return this.noResult();\r\n        }\r\n        // 把抓取结果按照 postid 升序排列\r\n        store.result.sort(Utils.sortByProperty('postId', 'asc'));\r\n        store.date = new Date();\r\n        log.log(lang.transl('_抓取文件数量', store.result.length.toString()));\r\n        log.success(lang.transl('_抓取完毕'), 2);\r\n        EVT.fire('crawlFinish');\r\n    }\r\n    // 抓取结果为 0 时输出提示\r\n    noResult() {\r\n        EVT.fire('crawlFinish');\r\n        EVT.fire('crawlEmpty');\r\n        log.error(lang.transl('_抓取结果为零'), 2);\r\n        msgBox.error(lang.transl('_抓取结果为零'));\r\n    }\r\n}\r\nexport { InitPageBase };\r\n","import { Colors } from './Colors';\r\nimport { Tools } from './Tools';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nclass InitPostListPage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    addCrawlBtns() {\r\n        Tools.addBtn('crawlBtns', Colors.bgBlue, '_抓取该用户的投稿').addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    async FetchPostList() {\r\n        let data;\r\n        if (this.nextUrl) {\r\n            data = (await API.request(this.nextUrl));\r\n        }\r\n        else {\r\n            data = await API.getPostListByUser(API.getCreatorId(location.href), 300);\r\n        }\r\n        this.afterFetchPostList(data);\r\n    }\r\n}\r\nexport { InitPostListPage };\r\n","import { Colors } from './Colors';\r\nimport { Tools } from './Tools';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nimport { Utils } from './utils/Utils';\r\nimport { EVT } from './EVT';\r\nimport { states } from './States';\r\nclass InitPostPage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    addCrawlBtns() {\r\n        Tools.addBtn('crawlBtns', Colors.bgBlue, '_抓取这篇投稿').addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    initAny() {\r\n        EVT.bindOnce('quickCrawl', EVT.list.quickCrawl, () => {\r\n            if (!states.busy) {\r\n                this.readyCrawl();\r\n            }\r\n        });\r\n    }\r\n    destroy() {\r\n        Tools.clearSlot('crawlBtns');\r\n    }\r\n    nextStep() {\r\n        this.getPostDataThreadNum = 1;\r\n        this.fetchPost();\r\n    }\r\n    async FetchPostList() { }\r\n    async fetchPost() {\r\n        const data = await API.getPost(Utils.getURLPathField(window.location.pathname, 'posts'));\r\n        this.afterFetchPost(data);\r\n    }\r\n}\r\nexport { InitPostPage };\r\n","import { Colors } from './Colors';\r\nimport { Tools } from './Tools';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nimport { Utils } from './utils/Utils';\r\nclass InitTagPage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    addCrawlBtns() {\r\n        Tools.addBtn('crawlBtns', Colors.bgBlue, '_抓取该tag的投稿').addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    async FetchPostList() {\r\n        let data;\r\n        if (this.nextUrl) {\r\n            data = (await API.request(this.nextUrl));\r\n        }\r\n        else {\r\n            data = await API.getTagPostListByUser(await API.getUserId(API.getCreatorId(location.href)), Utils.getURLPathField(window.location.pathname, 'tags'));\r\n        }\r\n        this.afterFetchPostList(data);\r\n    }\r\n}\r\nexport { InitTagPage };\r\n","import { langText } from './langText';\r\nimport { EVT } from './EVT';\r\n// 语言类\r\nclass Lang {\r\n    constructor() {\r\n        this.langTypes = ['zh-cn', 'zh-tw', 'en', 'ja', 'ko'];\r\n        this.flagIndex = new Map([\r\n            ['zh-cn', 0],\r\n            ['zh-tw', 1],\r\n            ['en', 2],\r\n            ['ja', 3],\r\n            ['ko', 4],\r\n        ]);\r\n        // 保存注册的元素\r\n        // 在注册的元素里设置特殊的标记，让本模块可以动态更新其文本\r\n        this.elList = [];\r\n        this.type = this.getHtmlLangType();\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.settingChange, (ev) => {\r\n            const data = ev.detail.data;\r\n            if (data.name !== 'userSetLang') {\r\n                return;\r\n            }\r\n            const old = this.type;\r\n            this.type = data.value === 'auto' ? this.getHtmlLangType() : data.value;\r\n            if (this.type !== old) {\r\n                EVT.fire('langChange');\r\n                this.elList.forEach((el) => {\r\n                    this.handleMark(el);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    // 获取页面使用的语言，返回语言标记\r\n    getHtmlLangType() {\r\n        const flag = document.documentElement.lang;\r\n        switch (flag) {\r\n            case 'zh':\r\n            case 'zh-CN':\r\n            case 'zh-Hans':\r\n                return 'zh-cn'; // 简体中文\r\n            case 'ja':\r\n                return 'ja'; // 日本語\r\n            case 'zh-Hant':\r\n            case 'zh-tw':\r\n            case 'zh-TW':\r\n                return 'zh-tw'; // 繁體中文\r\n            case 'ko':\r\n                return 'ko'; // 한국어\r\n            default:\r\n                return 'en'; // English\r\n        }\r\n    }\r\n    // translate\r\n    transl(name, ...arg) {\r\n        let content = langText[name][this.flagIndex.get(this.type)];\r\n        arg.forEach((val) => (content = content.replace('{}', val)));\r\n        return content;\r\n    }\r\n    register(el) {\r\n        this.elList.push(el);\r\n        this.handleMark(el);\r\n    }\r\n    // 查找元素上的标记，设置其文本和属性\r\n    handleMark(wrap) {\r\n        // 设置 innerHTML\r\n        const textEl = wrap.querySelectorAll('*[data-xztext]');\r\n        for (const el of textEl) {\r\n            // 因为有些文本中含有 html 标签，所以这里需要使用 innerHTML 而不是 textContent\r\n            el.innerHTML = this.transl(el.dataset.xztext);\r\n        }\r\n        // 元素自身存在 xztext 标记的情况\r\n        const text = wrap.dataset.xztext;\r\n        if (text) {\r\n            wrap.innerHTML = this.transl(text);\r\n        }\r\n        // 设置带参数的 innerHTML\r\n        const textArgsEl = wrap.querySelectorAll('*[data-xztextargs]');\r\n        textArgsEl.forEach((el) => this.handleTextArgs(el));\r\n        // 元素自身存在 xztextargs 标记的情况\r\n        const textargs = wrap.dataset.xztextargs;\r\n        if (textargs) {\r\n            this.handleTextArgs(wrap);\r\n        }\r\n        // 设置 tip\r\n        const tipEl = wrap.querySelectorAll('*[data-xztip]');\r\n        for (const el of tipEl) {\r\n            el.dataset.tip = this.transl(el.dataset.xztip);\r\n        }\r\n        // 设置 placeholder\r\n        const placeholderEl = wrap.querySelectorAll('*[data-xzplaceholder]');\r\n        for (const el of placeholderEl) {\r\n            el.setAttribute('placeholder', this.transl(el.dataset.xzplaceholder));\r\n        }\r\n        // 设置 title\r\n        const titleEl = wrap.querySelectorAll('*[data-xztitle]');\r\n        for (const el of titleEl) {\r\n            el.setAttribute('title', this.transl(el.dataset.xztitle));\r\n        }\r\n        // 元素自身存在 title 标记的情况\r\n        const title = wrap.dataset.xztitle;\r\n        if (title) {\r\n            wrap.setAttribute('title', this.transl(title));\r\n        }\r\n    }\r\n    handleTextArgs(el) {\r\n        let args = el.dataset.xztextargs.split(',');\r\n        const first = args.shift();\r\n        el.innerHTML = this.transl(first, ...args);\r\n    }\r\n    // 需要更新已注册元素的文本时调用此方法\r\n    updateText(el, ...args) {\r\n        // 清空文本的情况\r\n        if (args === undefined || args[0] === '') {\r\n            delete el.dataset.xztext;\r\n            delete el.dataset.xztextargs;\r\n            el.innerHTML = '';\r\n            return;\r\n        }\r\n        // 设置文本\r\n        if (args.length === 1) {\r\n            // 无参数文本\r\n            el.dataset.xztext = args[0];\r\n            el.innerHTML = this.transl(args[0]);\r\n            delete el.dataset.xztextargs;\r\n        }\r\n        else {\r\n            // 有参数文本\r\n            el.dataset.xztextargs = args.join(',');\r\n            const first = args.shift();\r\n            el.innerHTML = this.transl(first, ...args);\r\n            delete el.dataset.xztext;\r\n        }\r\n    }\r\n}\r\nconst lang = new Lang();\r\nexport { lang };\r\n","import { EVT } from './EVT';\r\n// 监听页面的无刷新切换\r\nclass ListenPageSwitch {\r\n    constructor() {\r\n        this.supportListenHistory();\r\n        this.listenPageSwitch();\r\n    }\r\n    // 为监听 url 变化的事件提供支持\r\n    supportListenHistory() {\r\n        const s = document.createElement('script');\r\n        const url = chrome.runtime.getURL('lib/listen_history_change.js');\r\n        s.src = url;\r\n        document.head.appendChild(s);\r\n    }\r\n    // 无刷新切换页面时派发事件\r\n    listenPageSwitch() {\r\n        // 点击浏览器的前进或后退按钮会触发 popstate 事件\r\n        // 点击链接进入一个 url 不同的页面是 pushState 操作\r\n        // 现在还没有遇到 replaceState 操作\r\n        ;\r\n        ['pushState', 'popstate', 'replaceState'].forEach((item) => {\r\n            window.addEventListener(item, () => {\r\n                EVT.fire('pageSwitch');\r\n            });\r\n        });\r\n    }\r\n}\r\nnew ListenPageSwitch();\r\n","import { EVT } from './EVT';\r\nimport { Colors } from './Colors';\r\n// 日志\r\nclass Log {\r\n    constructor() {\r\n        this.id = 'logWrap'; // 日志区域元素的 id\r\n        this.wrap = document.createElement('div'); // 日志容器的区域\r\n        this.logArea = document.createElement('div'); // 日志主体区域\r\n        this.refresh = document.createElement('span'); // 刷新时使用的元素\r\n        this.levelColor = [\r\n            'inherit',\r\n            Colors.textSuccess,\r\n            Colors.textWarning,\r\n            Colors.textError,\r\n        ];\r\n        this.max = 200;\r\n        this.count = 0;\r\n        this.toBottom = false; // 指示是否需要把日志滚动到底部。当有日志被添加或刷新，则为 true。滚动到底部之后复位到 false，避免一直滚动到底部。\r\n        this.scrollToBottom();\r\n        window.addEventListener(EVT.list.clearLog, () => {\r\n            this.clear();\r\n        });\r\n    }\r\n    // 添加日志\r\n    /*\r\n    str 日志文本\r\n    level 日志等级\r\n    br 换行标签的个数\r\n    keepShow 追加日志的模式，默认为 true，把这一条日志添加后不再修改。false 则是刷新显示这条消息。\r\n  \r\n    level 日志等级：\r\n    0 normal\r\n    1 success\r\n    2 warning\r\n    3 error\r\n    */\r\n    add(str, level, br, keepShow) {\r\n        this.checkElement();\r\n        let span = document.createElement('span');\r\n        if (!keepShow) {\r\n            span = this.refresh;\r\n        }\r\n        else {\r\n            this.count++;\r\n        }\r\n        span.innerHTML = str;\r\n        span.style.color = this.levelColor[level];\r\n        while (br > 0) {\r\n            span.appendChild(document.createElement('br'));\r\n            br--;\r\n        }\r\n        this.logArea.appendChild(span);\r\n        this.toBottom = true; // 需要把日志滚动到底部\r\n    }\r\n    log(str, br = 1, keepShow = true) {\r\n        this.add(str, 0, br, keepShow);\r\n    }\r\n    success(str, br = 1, keepShow = true) {\r\n        this.add(str, 1, br, keepShow);\r\n    }\r\n    warning(str, br = 1, keepShow = true) {\r\n        this.add(str, 2, br, keepShow);\r\n    }\r\n    error(str, br = 1, keepShow = true) {\r\n        this.add(str, 3, br, keepShow);\r\n    }\r\n    checkElement() {\r\n        // 如果日志区域没有被添加到页面上，则添加\r\n        let test = document.getElementById(this.id);\r\n        if (test === null) {\r\n            this.wrap = document.createElement('div');\r\n            this.wrap.id = this.id;\r\n            this.logArea = document.createElement('div');\r\n            this.logArea.classList.add('beautify_scrollbar', 'logContent');\r\n            this.wrap.append(this.logArea);\r\n            document.body.insertAdjacentElement('beforebegin', this.wrap);\r\n            // 虽然可以应用背景图片，但是由于日志区域比较狭长，背景图片的视觉效果不佳，看起来比较粗糙，所以还是不应用背景图片了\r\n            // bg.useBG(this.wrap, 0.9)\r\n        }\r\n        // 如果页面上的日志条数超过指定数量，则清空\r\n        // 因为日志数量太多的话会占用很大的内存。同时显示 8000 条日志可能占用接近 1 GB 的内存\r\n        if (this.count > this.max) {\r\n            this.clear();\r\n        }\r\n    }\r\n    /**移除日志区域 */\r\n    remove() {\r\n        this.count = 0;\r\n        this.wrap.remove();\r\n    }\r\n    /**清空日志内容 */\r\n    clear() {\r\n        this.count = 0;\r\n        this.logArea.innerHTML = '';\r\n    }\r\n    // 因为日志区域限制了最大高度，可能会出现滚动条，这里使日志总是滚动到底部\r\n    scrollToBottom() {\r\n        window.setInterval(() => {\r\n            if (this.toBottom) {\r\n                this.logArea.scrollTop = this.logArea.scrollHeight;\r\n                this.toBottom = false;\r\n            }\r\n        }, 800);\r\n    }\r\n}\r\nconst log = new Log();\r\nexport { log };\r\n","import { EVT } from './EVT';\r\nimport { Colors } from './Colors';\r\nimport { lang } from './Lang';\r\nimport { bg } from './BG';\r\n// 简单的消息框\r\nclass MsgBox {\r\n    constructor() {\r\n        this.typeColor = {\r\n            success: Colors.textSuccess,\r\n            warning: Colors.textWarning,\r\n            error: Colors.textError,\r\n        };\r\n        this.onceFlags = [];\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.showMsg, (ev) => {\r\n            const msg = ev.detail.data;\r\n            this.create(msg);\r\n        });\r\n    }\r\n    /** 在当前标签页中只会显示一次的消息\r\n     */\r\n    once(flag, msg, type = 'show', arg) {\r\n        if (this.onceFlags.includes(flag)) {\r\n            return;\r\n        }\r\n        this.onceFlags.push(flag);\r\n        switch (type) {\r\n            case 'show':\r\n                this.show(msg, arg);\r\n                break;\r\n            case 'warning':\r\n                this.warning(msg, arg);\r\n                break;\r\n            case 'success':\r\n                this.success(msg, arg);\r\n                break;\r\n            case 'error':\r\n                this.error(msg, arg);\r\n                break;\r\n            default:\r\n                this.show(msg, arg);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * 清除某个 once 标记，使其对应的消息可以再次显示\r\n     */\r\n    resetOnce(flag) {\r\n        const index = this.onceFlags.findIndex((str) => str === flag);\r\n        if (index > -1) {\r\n            this.onceFlags.splice(index);\r\n        }\r\n    }\r\n    show(msg, arg) {\r\n        this.create(Object.assign({}, arg, { msg: msg }));\r\n    }\r\n    success(msg, arg) {\r\n        this.create(Object.assign({ color: this.typeColor.success }, arg, { msg: msg }));\r\n    }\r\n    warning(msg, arg) {\r\n        this.create(Object.assign({ color: this.typeColor.warning }, arg, { msg: msg }));\r\n    }\r\n    error(msg, arg) {\r\n        this.create(Object.assign({ color: this.typeColor.error }, arg, { msg: msg }));\r\n    }\r\n    create(data) {\r\n        const wrap = document.createElement('div');\r\n        wrap.classList.add('xz_msg_box');\r\n        let colorStyle = '';\r\n        if (data.color) {\r\n            colorStyle = `style=\"color:${data.color}\"`;\r\n        }\r\n        wrap.innerHTML = `\n        <p class=\"title\" ${colorStyle}>${data.title || ''}</p>\n        <p class=\"content\" ${colorStyle}>${data.msg}</p>\n        <button class=\"btn\" type=\"button\">${data.btn || lang.transl('_确定')}</button>\n      `;\r\n        lang.register(wrap);\r\n        const btn = wrap.querySelector('.btn');\r\n        if (btn) {\r\n            wrap.addEventListener('click', (ev) => {\r\n                ev.stopPropagation();\r\n            });\r\n            btn.addEventListener('click', () => {\r\n                this.remove(wrap);\r\n            });\r\n            window.addEventListener(EVT.list.closeCenterPanel, () => {\r\n                this.remove(wrap);\r\n            });\r\n        }\r\n        document.body.append(wrap);\r\n        btn.focus();\r\n        bg.useBG(wrap);\r\n    }\r\n    remove(el) {\r\n        el && el.parentNode && el.parentNode.removeChild(el);\r\n    }\r\n}\r\nconst msgBox = new MsgBox();\r\nexport { msgBox };\r\n","import { EVT } from './EVT';\r\nimport { lang } from './Lang';\r\n// 页面右侧的按钮，点击可以打开中间面板\r\nclass OpenCenterPanel {\r\n    constructor() {\r\n        this.btn = document.createElement('button');\r\n        this.addBtn();\r\n        this.show();\r\n        this.bindEvents();\r\n    }\r\n    addBtn() {\r\n        this.btn = document.createElement('button');\r\n        this.btn.classList.add('rightButton');\r\n        this.btn.id = 'openCenterPanelBtn';\r\n        this.btn.setAttribute('data-xztitle', '_显示下载面板');\r\n        this.btn.innerHTML = `<svg class=\"icon\" aria-hidden=\"true\">\n  <use xlink:href=\"#icon-dakai\"></use>\n</svg>`;\r\n        document.body.append(this.btn);\r\n        lang.register(this.btn);\r\n    }\r\n    bindEvents() {\r\n        // 这里阻止事件冒泡是为了配合 CenterPanel 的“点击页面其他部分隐藏 CenterPanel”的效果\r\n        this.btn.addEventListener('click', (e) => {\r\n            const ev = e || window.event;\r\n            ev.stopPropagation();\r\n            EVT.fire('openCenterPanel');\r\n        });\r\n        window.addEventListener(EVT.list.centerPanelClosed, () => {\r\n            this.show();\r\n        });\r\n        window.addEventListener(EVT.list.centerPanelOpened, () => {\r\n            this.hide();\r\n        });\r\n    }\r\n    show() {\r\n        this.btn.style.display = 'flex';\r\n    }\r\n    hide() {\r\n        this.btn.style.display = 'none';\r\n    }\r\n}\r\nnew OpenCenterPanel();\r\n","import { EVT } from './EVT';\r\nimport { lang } from './Lang';\r\nimport { store } from './Store';\r\nimport { Utils } from './utils/Utils';\r\nimport { Config } from './Config';\r\nimport { msgBox } from './MsgBox';\r\nimport { toast } from './Toast';\r\n// 输出面板\r\nclass OutputPanel {\r\n    constructor() {\r\n        this.addOutPutPanel();\r\n        lang.register(this.outputPanel);\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        this.closeBtn.addEventListener('click', () => {\r\n            this.close();\r\n        });\r\n        this.outputPanel.addEventListener('click', (e) => {\r\n            const ev = e || window.event;\r\n            ev.stopPropagation();\r\n        });\r\n        document.addEventListener('click', () => {\r\n            if (this.outputPanel.style.display !== 'none') {\r\n                this.close();\r\n            }\r\n        });\r\n        window.addEventListener(EVT.list.closeCenterPanel, () => {\r\n            this.close();\r\n        });\r\n        // 复制输出内容\r\n        this.copyBtn.addEventListener('click', () => {\r\n            const range = document.createRange();\r\n            range.selectNodeContents(this.outputContent);\r\n            window.getSelection().removeAllRanges();\r\n            window.getSelection().addRange(range);\r\n            document.execCommand('copy');\r\n            toast.success(lang.transl('_已复制到剪贴板'));\r\n        });\r\n        window.addEventListener(EVT.list.output, (ev) => {\r\n            this.output(ev.detail.data);\r\n        });\r\n    }\r\n    addOutPutPanel() {\r\n        const html = `\n    <div class=\"outputWrap\">\n    <div class=\"outputClose\" data-xztitle=\"_关闭\">×</div>\n    <div class=\"outputTitle\" data-xztext=\"_输出信息\"></div>\n    <div class=\"outputContent beautify_scrollbar\"></div>\n    <div class=\"outputFooter\">\n    <button class=\"outputCopy\" data-xztext=\"_复制\"></button>\n    </div>\n    </div>\n    `;\r\n        document.body.insertAdjacentHTML('beforebegin', html);\r\n        this.outputPanel = document.querySelector('.outputWrap');\r\n        this.outputTitle = this.outputPanel.querySelector('.outputTitle');\r\n        this.outputContent = this.outputPanel.querySelector('.outputContent');\r\n        this.copyBtn = this.outputPanel.querySelector('.outputCopy');\r\n        this.closeBtn = this.outputPanel.querySelector('.outputClose');\r\n    }\r\n    // 输出内容\r\n    output(data) {\r\n        if (!data.content) {\r\n            return toast.error(lang.transl('_没有数据可供使用'));\r\n        }\r\n        if (store.result.length < Config.outputMax) {\r\n            this.copyBtn.disabled = false;\r\n            lang.updateText(this.outputTitle, data.title);\r\n            this.outputContent.innerHTML = data.content;\r\n            this.outputPanel.style.display = 'block';\r\n        }\r\n        else {\r\n            // 如果结果较多，则不直接输出，改为保存 txt 文件\r\n            const file = new Blob([data.content], {\r\n                type: 'text/plain',\r\n            });\r\n            const url = URL.createObjectURL(file);\r\n            const fileName = `Output-${new Date().toLocaleString()}.txt`;\r\n            Utils.downloadFile(url, fileName);\r\n            this.copyBtn.disabled = true;\r\n            msgBox.warning(lang.transl('_输出内容太多已经为你保存到文件'));\r\n        }\r\n    }\r\n    // 关闭输出面板\r\n    close() {\r\n        this.outputPanel.style.display = 'none';\r\n        this.outputContent.innerHTML = '';\r\n        lang.updateText(this.outputTitle, '_输出信息');\r\n    }\r\n}\r\nnew OutputPanel();\r\n","// 获取页面类型\r\nimport { EVT } from './EVT';\r\n// 所有页面类型及对应的数字编号\r\n// 可以通过 pageType.list 使用\r\nvar PageName;\r\n(function (PageName) {\r\n    PageName[PageName[\"Unsupported\"] = -1] = \"Unsupported\";\r\n    PageName[PageName[\"Home\"] = 0] = \"Home\";\r\n    PageName[PageName[\"Supporting\"] = 1] = \"Supporting\";\r\n    PageName[PageName[\"UserHome\"] = 2] = \"UserHome\";\r\n    PageName[PageName[\"UserPostList\"] = 3] = \"UserPostList\";\r\n    PageName[PageName[\"Post\"] = 4] = \"Post\";\r\n    PageName[PageName[\"Tags\"] = 5] = \"Tags\";\r\n    PageName[PageName[\"Shop\"] = 6] = \"Shop\";\r\n})(PageName || (PageName = {}));\r\nclass PageType {\r\n    constructor() {\r\n        this.type = 0;\r\n        // 所有页面类型\r\n        this.list = PageName;\r\n        this.type = this.getType();\r\n        // 页面切换时检查新旧页面是否不同\r\n        window.addEventListener(EVT.list.pageSwitch, () => {\r\n            this.checkTypeChange();\r\n        });\r\n    }\r\n    getType() {\r\n        const host = window.location.hostname;\r\n        const path = window.location.pathname;\r\n        const userPage = (!host.startsWith('www.') &&\r\n            !host.startsWith('api.') &&\r\n            !host.startsWith('downloads.')) ||\r\n            path.startsWith('/@');\r\n        if (host === 'www.fanbox.cc' && path === '/') {\r\n            // https://www.fanbox.cc/\r\n            // 自己主页\r\n            return PageName.Home;\r\n        }\r\n        else if (path === '/home/supporting') {\r\n            // https://www.fanbox.cc/home/supporting\r\n            // 正在赞助\r\n            return PageName.Supporting;\r\n        }\r\n        else if (userPage &&\r\n            !path.includes('/posts') &&\r\n            !path.includes('/tags/') &&\r\n            !path.includes('/shop')) {\r\n            // https://kyomoneko.fanbox.cc/\r\n            // https://www.fanbox.cc/@official\r\n            // 画师主页\r\n            return PageName.UserHome;\r\n        }\r\n        else if (userPage && path.endsWith('/posts')) {\r\n            // https://kyomoneko.fanbox.cc/posts\r\n            // https://www.fanbox.cc/@official/posts\r\n            // 画师投稿列表页\r\n            return PageName.UserPostList;\r\n        }\r\n        else if (userPage && path.includes('/posts/')) {\r\n            // https://kyomoneko.fanbox.cc/posts/904593\r\n            // https://www.fanbox.cc/@official/posts/996286\r\n            // 投稿内容页\r\n            return PageName.Post;\r\n        }\r\n        else if (userPage && path.includes('/tags/')) {\r\n            // https://eto13.fanbox.cc/tags/%E5%8B%95%E7%94%BB\r\n            // tag 页面\r\n            return PageName.Tags;\r\n        }\r\n        else if (userPage && path.endsWith('/shop')) {\r\n            // https://yajirushikey.fanbox.cc/shop\r\n            // 商店页面\r\n            return PageName.Shop;\r\n        }\r\n        else {\r\n            // 没有匹配到可用的页面类型\r\n            return PageName.Unsupported;\r\n        }\r\n    }\r\n    // 页面切换时，检查页面类型是否变化\r\n    checkTypeChange() {\r\n        const old = this.type;\r\n        this.type = this.getType();\r\n        if (this.type !== old) {\r\n            EVT.fire('pageSwitchedTypeChange', this.type);\r\n        }\r\n        else {\r\n            EVT.fire('pageSwitchedTypeNotChange', this.type);\r\n        }\r\n    }\r\n}\r\nconst pageType = new PageType();\r\nexport { pageType };\r\n","import { store } from './Store';\r\nimport { Tools } from './Tools';\r\nimport { lang } from './Lang';\r\nimport { EVT } from './EVT';\r\n// 进度条\r\nclass ProgressBar {\r\n    constructor() {\r\n        this.wrapHTML = `\n  <div class=\"progressBarWrap\">\n  <div class=\"total\">\n  <span class=\"text\" data-xztext=\"_下载进度\"></span>\n  <div class=\"right1\">\n  <div class=\"progressBar progressBar1\">\n  <div class=\"progress progress1\"></div>\n  </div>\n  <div class=\"totalNumberWrap\">\n  <span class=\"downloaded\">0</span>\n  /\n  <span class=\"imgNum totalNumber\">0</span>\n  </div>\n  </div>\n  </div>\n\n  <ul class=\"progressBarList\"></ul>\n  </div>\n  `;\r\n        this.barHTML = `<li class=\"downloadBar\">\n  <div class=\"progressBar progressBar2\">\n  <div class=\"progress progress2\"></div>\n  </div>\n  <div class=\"progressTip progressTip2\">\n  <span class=\"fileName\"></span>\n  </div>\n  </li>`;\r\n        this.allProgressBar = [];\r\n        this.wrap = Tools.useSlot('progressBar', this.wrapHTML);\r\n        this.downloadedEl = this.wrap.querySelector('.downloaded');\r\n        this.progressColorEl = this.wrap.querySelector('.progress1');\r\n        this.listWrap = this.wrap.querySelector('.progressBarList');\r\n        this.totalNumberEl = this.wrap.querySelector('.totalNumber');\r\n        lang.register(this.wrap);\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.crawlStart, () => {\r\n            this.hide();\r\n        });\r\n    }\r\n    // 重设所有进度\r\n    reset(progressBarNum, downloaded = 0) {\r\n        if (progressBarNum === 0) {\r\n            // 如果进度条数量为 0（抓取结果为空），则隐藏进度条区域\r\n            return this.hide();\r\n        }\r\n        // 重置总进度条\r\n        this.setTotalProgress(downloaded);\r\n        this.totalNumberEl.textContent = store.result.length.toString();\r\n        // 重置子进度条\r\n        this.listWrap.innerHTML = this.barHTML.repeat(progressBarNum);\r\n        this.show();\r\n        // 保存子进度条上需要使用到的元素\r\n        const allProgressBar = this.listWrap.querySelectorAll('.downloadBar');\r\n        this.allProgressBar = [];\r\n        for (const bar of allProgressBar) {\r\n            const data = {\r\n                name: bar.querySelector('.fileName'),\r\n                progress: bar.querySelector('.progress'),\r\n            };\r\n            this.allProgressBar.push(data);\r\n        }\r\n    }\r\n    // 设置总进度条的进度\r\n    setTotalProgress(downloaded) {\r\n        this.downloadedEl.textContent = downloaded.toString();\r\n        const progress = (downloaded / store.result.length) * 100;\r\n        this.progressColorEl.style.width = progress + '%';\r\n    }\r\n    // 设置子进度条的进度\r\n    setProgress(index, data) {\r\n        const bar = this.allProgressBar[index];\r\n        bar.name.textContent = data.name;\r\n        const progress = data.loaded / data.total || 0; // 若结果为 NaN 则设为 0\r\n        bar.progress.style.width = progress * 100 + '%';\r\n    }\r\n    // 让某个子进度条显示警告色\r\n    showErrorColor(index, show) {\r\n        const bar = this.allProgressBar[index];\r\n        bar.name.classList[show ? 'add' : 'remove']('downloadError');\r\n    }\r\n    show() {\r\n        this.wrap.style.display = 'block';\r\n    }\r\n    hide() {\r\n        this.wrap.style.display = 'none';\r\n    }\r\n}\r\nconst progressBar = new ProgressBar();\r\nexport { progressBar };\r\n","import { EVT } from './EVT';\r\nimport { lang } from './Lang';\r\nimport { pageType } from './PageType';\r\nimport { states } from './States';\r\n// 快速抓取\r\nclass QuickCrawl {\r\n    constructor() {\r\n        this.show = true; // 是否显示\r\n        // 指定在哪些页面类型里启用\r\n        this.enablePageType = [pageType.list.Post];\r\n        this.addBtn();\r\n        this.setVisible();\r\n        this.bindEvents();\r\n    }\r\n    addBtn() {\r\n        // 在右侧添加快速抓取按钮\r\n        this.btn = document.createElement('button');\r\n        this.btn.classList.add('rightButton');\r\n        this.btn.id = 'quickCrawlBtn';\r\n        this.btn.setAttribute('data-xztitle', '_快速下载本页');\r\n        this.btn.innerHTML = `<svg class=\"icon\" aria-hidden=\"true\">\n  <use xlink:href=\"#icon-download\"></use>\n</svg>`;\r\n        document.body.append(this.btn);\r\n        lang.register(this.btn);\r\n    }\r\n    bindEvents() {\r\n        // 点击按钮启动快速抓取\r\n        this.btn.addEventListener('click', () => {\r\n            this.sendDownload();\r\n        }, false);\r\n        // 使用快捷键 Alt + q 启动快速抓取\r\n        window.addEventListener('keydown', (ev) => {\r\n            if (this.show && ev.altKey && ev.code === 'KeyQ') {\r\n                this.sendDownload();\r\n            }\r\n        }, false);\r\n        // 页面类型改变时设置按钮的显示隐藏\r\n        window.addEventListener(EVT.list.pageSwitch, () => {\r\n            this.setVisible();\r\n        });\r\n    }\r\n    sendDownload() {\r\n        states.quickCrawl = true;\r\n        EVT.fire('quickCrawl');\r\n    }\r\n    setVisible() {\r\n        this.show = this.enablePageType.includes(pageType.type);\r\n        this.btn.style.display = this.show ? 'flex' : 'none';\r\n    }\r\n}\r\nnew QuickCrawl();\r\n","import { filter } from './Filter';\r\nimport { store } from './Store';\r\nimport { settings } from './setting/Settings';\r\nimport { log } from './Log';\r\nimport { lang } from './Lang';\r\nclass SaveData {\r\n    constructor() {\r\n        // 嵌入的文件只支持指定的网站，每个网站有固定的前缀\r\n        this.providerDict = {\r\n            youtube: 'https://www.youtube.com/watch?v=',\r\n            fanbox: 'https://www.fanbox.cc/',\r\n            gist: 'https://gist.github.com/',\r\n            soundcloud: 'https://soundcloud.com/',\r\n            vimeo: 'https://vimeo.com/',\r\n            twitter: 'https://twitter.com/i/web/status/',\r\n            google_forms: 'https://docs.google.com/forms/d/e/',\r\n        };\r\n        this.extractTextReg = new RegExp(/<[^<>]+>/g);\r\n        this.matchImgSrc = new RegExp(/(?<=src=\")https.*?(jpeg|jpg|png|gif|bmp)/g);\r\n    }\r\n    receive(data) {\r\n        this.parsePost(data);\r\n    }\r\n    parsePost(data) {\r\n        // 针对投稿进行检查，决定是否保留它\r\n        const id = data.id;\r\n        const fee = data.feeRequired;\r\n        const date = data.publishedDatetime;\r\n        const title = data.title;\r\n        const check = filter.check({ id, fee, date, title });\r\n        if (!check) {\r\n            return;\r\n        }\r\n        // 如果投稿检查通过，保存投稿信息\r\n        const result = {\r\n            postId: data.id,\r\n            type: data.type,\r\n            title: data.title,\r\n            date,\r\n            fee,\r\n            user: data.user.name,\r\n            uid: data.user.userId,\r\n            createID: data.creatorId,\r\n            tags: data.tags.join(','),\r\n            files: [],\r\n            links: {\r\n                fileId: '',\r\n                name: 'links-' + data.id,\r\n                ext: 'txt',\r\n                size: null,\r\n                index: 0,\r\n                text: [],\r\n                url: '',\r\n                retryUrl: null,\r\n            },\r\n        };\r\n        // 提取它的资源文件，并对每个资源进行检查，决定是否保存\r\n        let index = 0; // 资源的序号\r\n        // 封面图和文本资源的序号是 0，其他文件的序号自增\r\n        // 提取投稿的封面图片\r\n        // 封面图片的序号设置为 0，所以它里面不需要对 index 进行操作\r\n        if (settings.savePostCover) {\r\n            const cover = data.coverImageUrl;\r\n            if (cover) {\r\n                const { name, ext } = this.getUrlNameAndExt(cover);\r\n                const r = {\r\n                    fileId: this.createFileId(),\r\n                    name,\r\n                    ext,\r\n                    size: null,\r\n                    index,\r\n                    url: cover,\r\n                    retryUrl: null,\r\n                };\r\n                result.files.push(r);\r\n            }\r\n        }\r\n        // 对于因为价格限制不能抓取文章，在此时返回，但是会保存封面图\r\n        if (data.body === null) {\r\n            store.skipDueToFee++;\r\n            log.warning(lang.transl('_跳过文章因为', title) + lang.transl('_价格限制'));\r\n            if (result.files.length > 0) {\r\n                store.addResult(result);\r\n            }\r\n            return;\r\n        }\r\n        // 非 article 投稿都有 text 字段，这这里统一提取里面的链接\r\n        // 但是因为正则没有分组，所以非 article 投稿中如果有多个链接，可能会有遗漏，待考\r\n        // 提取文本中的链接有两种来源，一种是文章正文里的文本，一种是嵌入资源。先从正文提取链接，后提取嵌入资源的链接。这样链接保存下来的顺序比较合理。\r\n        if (data.type !== 'article') {\r\n            let text = '';\r\n            if (data.type === 'entry') {\r\n                text = data.body.html.replace(this.extractTextReg, '');\r\n            }\r\n            else {\r\n                text = data.body.text;\r\n            }\r\n            if (text) {\r\n                const links = this.getTextLinks(text);\r\n                result.links.text = result.links.text.concat(links);\r\n                result.links.fileId = this.createFileId();\r\n                // 保存文章正文里的文字\r\n                if (settings.saveText) {\r\n                    result.links.text.push(text);\r\n                }\r\n            }\r\n        }\r\n        // 提取 article 投稿的资源\r\n        if (data.type === 'article') {\r\n            // 从正文文本里提取链接\r\n            let linkTexts = [];\r\n            let text = ''; // 正文文本\r\n            for (const block of data.body.blocks) {\r\n                if (block.type === 'p' && block.text) {\r\n                    linkTexts.push(block.text);\r\n                    if (block.links && block.links.length > 0) {\r\n                        for (const links of block.links) {\r\n                            linkTexts.push(links.url);\r\n                        }\r\n                    }\r\n                    // 保存文章正文里的文字，每个段落后面添加换行\r\n                    text += block.text + '\\r\\n\\r\\n';\r\n                }\r\n            }\r\n            for (const link of linkTexts) {\r\n                const links = this.getTextLinks(link);\r\n                result.links.text = result.links.text.concat(links);\r\n                result.links.fileId = this.createFileId();\r\n            }\r\n            if (settings.saveText && text) {\r\n                result.links.text.push(text);\r\n            }\r\n            // 保存图片资源\r\n            for (const block of data.body.blocks) {\r\n                if (block.type === 'image') {\r\n                    const imageData = data.body.imageMap[block.imageId];\r\n                    if (!imageData) {\r\n                        continue;\r\n                    }\r\n                    index++;\r\n                    const resource = this.getImageData(imageData, index);\r\n                    resource !== null && result.files.push(resource);\r\n                }\r\n            }\r\n            // 保存 file 资源\r\n            for (const block of data.body.blocks) {\r\n                if (block.type === 'file') {\r\n                    const fileData = data.body.fileMap[block.fileId];\r\n                    if (!fileData) {\r\n                        continue;\r\n                    }\r\n                    index++;\r\n                    const resource = this.getFileData(fileData, index);\r\n                    resource !== null && result.files.push(resource);\r\n                }\r\n            }\r\n            // 保存嵌入的资源，只能保存到文本\r\n            const embedDataArr = [];\r\n            for (const [id, embedData] of Object.entries(data.body.embedMap)) {\r\n                embedDataArr.push([embedData.serviceProvider, embedData.contentId]);\r\n            }\r\n            const embedLinks = this.getEmbedLinks(embedDataArr, data.id);\r\n            result.links.text = result.links.text.concat(embedLinks);\r\n            result.links.fileId = this.createFileId();\r\n            // 保存嵌入的 URL，只能保存到文本\r\n            if (settings.saveLink) {\r\n                const urlArr = [];\r\n                for (const val of Object.values(data.body.urlEmbedMap)) {\r\n                    if (val.type === 'default') {\r\n                        urlArr.push(val.url);\r\n                    }\r\n                    else if (val.type === 'html') {\r\n                        // 尝试从 html 代码中提取 url\r\n                        const testURL = val.html.match('iframe src=\"(http.*)\"');\r\n                        if (testURL && testURL.length > 1) {\r\n                            urlArr.push(testURL[1]);\r\n                        }\r\n                        else {\r\n                            urlArr.push(val.html);\r\n                        }\r\n                    }\r\n                }\r\n                if (urlArr.length > 0) {\r\n                    result.links.text = result.links.text.concat(urlArr.join('\\n\\n'));\r\n                    result.links.fileId = this.createFileId();\r\n                }\r\n            }\r\n        }\r\n        // 提取 image 投稿的资源\r\n        if (data.type === 'image') {\r\n            // 保存图片资源\r\n            for (const imageData of data.body.images) {\r\n                if (!imageData) {\r\n                    continue;\r\n                }\r\n                index++;\r\n                const resource = this.getImageData(imageData, index);\r\n                resource !== null && result.files.push(resource);\r\n            }\r\n        }\r\n        // 提取 entry 投稿的图片资源\r\n        // 不知道此类型投稿中是否有其他类型的资源\r\n        if (data.type === 'entry') {\r\n            const LinkList = data.body.html.match(/<a.*?>/g);\r\n            if (LinkList) {\r\n                for (const a of LinkList) {\r\n                    const matchUrl = a.match('https.*(jpeg|jpg|png|gif|bmp)');\r\n                    if (!matchUrl) {\r\n                        continue;\r\n                    }\r\n                    // 组合出 imageData，添加到结果中\r\n                    index++;\r\n                    const url = matchUrl[0];\r\n                    const { name, ext } = this.getUrlNameAndExt(url);\r\n                    let width = 0;\r\n                    const widthMatch = a.match(/width=\"(\\d*?)\"/);\r\n                    if (widthMatch && widthMatch.length > 1) {\r\n                        width = parseInt(widthMatch[1]);\r\n                    }\r\n                    let height = 0;\r\n                    const heightMatch = a.match(/height=\"(\\d*?)\"/);\r\n                    if (heightMatch && heightMatch.length > 1) {\r\n                        height = parseInt(heightMatch[1]);\r\n                    }\r\n                    const imageData = {\r\n                        id: name,\r\n                        extension: ext,\r\n                        originalUrl: url,\r\n                        thumbnailUrl: url,\r\n                        width: width,\r\n                        height: height,\r\n                    };\r\n                    const resource = this.getImageData(imageData, index);\r\n                    resource !== null && result.files.push(resource);\r\n                }\r\n            }\r\n        }\r\n        // 提取 file 投稿的资源\r\n        if (data.type === 'file') {\r\n            // 保存 file 资源\r\n            for (const fileData of data.body.files) {\r\n                if (!fileData) {\r\n                    continue;\r\n                }\r\n                index++;\r\n                const resource = this.getFileData(fileData, index);\r\n                resource !== null && result.files.push(resource);\r\n            }\r\n        }\r\n        // 提取 video 投稿的资源\r\n        // video 数据保存到文本\r\n        if (data.type === 'video') {\r\n            const video = data.body.video;\r\n            const embedDataArr = [\r\n                [video.serviceProvider, video.videoId],\r\n            ];\r\n            const embedLinks = this.getEmbedLinks(embedDataArr, data.id);\r\n            result.links.text = result.links.text.concat(embedLinks);\r\n            result.links.fileId = this.createFileId();\r\n        }\r\n        store.addResult(result);\r\n    }\r\n    getImageData(imageData, index) {\r\n        if (filter.check({\r\n            ext: imageData.extension,\r\n        })) {\r\n            return {\r\n                fileId: imageData.id,\r\n                name: imageData.id,\r\n                ext: imageData.extension,\r\n                size: null,\r\n                index,\r\n                url: imageData.originalUrl,\r\n                retryUrl: imageData.thumbnailUrl,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    getFileData(fileData, index) {\r\n        if (filter.check({\r\n            ext: fileData.extension,\r\n        })) {\r\n            return {\r\n                fileId: fileData.id,\r\n                name: fileData.name,\r\n                ext: fileData.extension,\r\n                size: fileData.size,\r\n                index,\r\n                url: fileData.url,\r\n                retryUrl: null,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    // 从文本里提取链接\r\n    getTextLinks(text) {\r\n        const links = [];\r\n        if (!settings.saveLink) {\r\n            return links;\r\n        }\r\n        // 一个段落里可能包含多个链接（啊好麻烦），所以用换行符来尝试分割一下\r\n        const textArray = text.split('\\n');\r\n        const Reg = /http[s]*:\\/\\/[\\w=\\?\\.\\/&\\-\\#\\!\\%]+/g;\r\n        for (const str of textArray) {\r\n            const match = Reg.exec(str);\r\n            Reg.lastIndex = 0;\r\n            if (match && match.length > 0) {\r\n                for (const link of match) {\r\n                    links.push(link);\r\n                }\r\n            }\r\n        }\r\n        return links;\r\n    }\r\n    // 从嵌入的资源里，获取资源的原网址\r\n    getEmbedLinks(dataArr, postId) {\r\n        const links = [];\r\n        if (!settings.saveLink) {\r\n            return links;\r\n        }\r\n        for (const data of dataArr) {\r\n            const [serviceProvider, contentId] = data;\r\n            let link = this.providerDict[serviceProvider] + contentId;\r\n            // 谷歌表单需要在链接后面添加特定后缀\r\n            if (serviceProvider === 'google_forms') {\r\n                link = link + '/viewform';\r\n            }\r\n            links.push(link);\r\n        }\r\n        return links;\r\n    }\r\n    // 下载器自己生成的 txt 文件没有 id，所以这里需要自己给它生成一个 id\r\n    // 使用时间戳并不保险，因为有时候代码执行太快，会生成重复的时间戳。所以后面加上随机字符\r\n    createFileId() {\r\n        return (new Date().getTime().toString() +\r\n            Math.random().toString(16).replace('.', ''));\r\n    }\r\n    // 传入文件 url，提取文件名和扩展名\r\n    getUrlNameAndExt(url) {\r\n        const split = url.split('/');\r\n        const fileName = split[split.length - 1];\r\n        const name = fileName.split('.')[0];\r\n        const ext = fileName.split('.')[1];\r\n        return {\r\n            name,\r\n            ext,\r\n        };\r\n    }\r\n}\r\nconst saveData = new SaveData();\r\nexport { saveData };\r\n","import { lang } from './Lang';\r\nimport { Config } from './Config';\r\nimport { msgBox } from './MsgBox';\r\nimport { EVT } from './EVT';\r\nimport { settings, setSetting } from './setting/Settings';\r\nclass ShowHowToUse {\r\n    constructor() {\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.settingInitialized, () => {\r\n            this.check();\r\n        });\r\n    }\r\n    check() {\r\n        if (settings.showHowToUse) {\r\n            this.show();\r\n            setSetting('showHowToUse', false);\r\n        }\r\n    }\r\n    show() {\r\n        msgBox.show(lang.transl('_HowToUse'), {\r\n            title: Config.appName,\r\n            btn: lang.transl('_我知道了'),\r\n        });\r\n    }\r\n}\r\nnew ShowHowToUse();\r\n","import { EVT } from './EVT';\r\nimport { lang } from './Lang';\r\nimport { settings } from './setting/Settings';\r\nimport { Tools } from './Tools';\r\nclass ShowNotification {\r\n    constructor() {\r\n        this.iconURL = '';\r\n        this.iconURL = chrome.runtime.getURL('icon/logo128.png');\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        // 当用户开启“下载完成后显示通知”的提示时，请求权限\r\n        window.addEventListener(EVT.list.settingChange, (ev) => {\r\n            const data = ev.detail.data;\r\n            if (data.name === 'showNotificationAfterDownloadComplete' && data.value) {\r\n                this.requstPremission();\r\n            }\r\n        });\r\n        // 当下载任务完毕时，显示通知\r\n        window.addEventListener(EVT.list.downloadComplete, () => {\r\n            window.setTimeout(() => {\r\n                // 如果抓取标签列表没有完成，则不显示通知\r\n                // 在一次抓取多个标签时，当最后一个标签下载完之后会解除 crawlTagList 状态，这时可以显示一条通知\r\n                // 如果有等待下载的任务，则不显示通知\r\n                if (settings.showNotificationAfterDownloadComplete) {\r\n                    this.show(lang.transl('_下载完毕2'), Tools.getPageTitle());\r\n                }\r\n            }, 0);\r\n        });\r\n    }\r\n    async show(title, text) {\r\n        await this.requstPremission();\r\n        new Notification(title, {\r\n            body: text,\r\n            // 不设置 tag。如果设置了相同的 tag，那么新的通知会覆盖旧的通知，导致如果有多个页面下载完毕，用户只能看到最后一个页面的通知\r\n            // tag: '',\r\n            icon: this.iconURL,\r\n        });\r\n    }\r\n    requstPremission() {\r\n        if (Notification.permission !== 'granted') {\r\n            return Notification.requestPermission();\r\n        }\r\n    }\r\n}\r\nnew ShowNotification();\r\n","import { lang } from './Lang';\r\nimport { Config } from './Config';\r\nimport { msgBox } from './MsgBox';\r\nimport { EVT } from './EVT';\r\nimport { setSetting, settings } from './setting/Settings';\r\n// 显示最近更新内容\r\nclass ShowWhatIsNew {\r\n    constructor() {\r\n        this.flag = '3.3.0';\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.settingInitialized, () => {\r\n            // 消息文本要写在 settingInitialized 事件回调里，否则它们可能会被翻译成错误的语言\r\n            let msg = `<strong>${lang.transl('_新增命名标记')}</strong>：\n      <br>\n      <span class=\"blue\">{create_id}</span> ${lang.transl('_命名标记create_id')}\n      `;\r\n            // 在更新说明的下方显示赞助提示\r\n            msg += `\n      <br>\n      <br>\n      ${lang.transl('_赞助方式提示')}`;\r\n            this.show(msg);\r\n        });\r\n    }\r\n    show(msg) {\r\n        if (settings.whatIsNewFlag !== this.flag) {\r\n            msgBox.show(msg, {\r\n                title: Config.appName + ` ${lang.transl('_最近更新')}`,\r\n                btn: lang.transl('_我知道了'),\r\n            });\r\n            setSetting('whatIsNewFlag', this.flag);\r\n        }\r\n    }\r\n}\r\nnew ShowWhatIsNew();\r\n","import { EVT } from './EVT';\r\n// 储存需要跨模块使用的、会变化的状态\r\n// 这里的状态不需要持久化保存\r\n// 状态的值通常只由单一的模块修改\r\nclass States {\r\n    constructor() {\r\n        /**指示 settings 是否初始化完毕 */\r\n        this.settingInitialized = false;\r\n        /**表示下载器是否处于繁忙状态\r\n         *\r\n         * 繁忙：下载器正在抓取作品，或者正在下载文件\r\n         */\r\n        this.busy = false;\r\n        /**快速下载标记\r\n         *\r\n         * 快速下载模式中不会显示下载面板，并且总是会自动开始下载\r\n         *\r\n         * 启动快速下载时设为 true，下载完成或中止时复位到 false\r\n         */\r\n        this.quickCrawl = false;\r\n        /**是否处于下载中 */\r\n        this.downloading = false;\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.settingInitialized, () => {\r\n            this.settingInitialized = true;\r\n        });\r\n        const idle = [\r\n            EVT.list.crawlFinish,\r\n            EVT.list.downloadPause,\r\n            EVT.list.downloadStop,\r\n            EVT.list.downloadComplete,\r\n        ];\r\n        idle.forEach((type) => {\r\n            window.addEventListener(type, () => {\r\n                this.busy = false;\r\n            });\r\n        });\r\n        const busy = [EVT.list.crawlStart, EVT.list.downloadStart];\r\n        busy.forEach((type) => {\r\n            window.addEventListener(type, () => {\r\n                this.busy = true;\r\n            });\r\n        });\r\n        // 下载完成，或者下载中止时，复位快速下载类状态\r\n        const resetQuickState = [\r\n            EVT.list.crawlEmpty,\r\n            EVT.list.downloadStop,\r\n            EVT.list.downloadPause,\r\n            EVT.list.downloadComplete,\r\n        ];\r\n        for (const ev of resetQuickState) {\r\n            window.addEventListener(ev, () => {\r\n                this.quickCrawl = false;\r\n            });\r\n        }\r\n        window.addEventListener(EVT.list.downloadStart, () => {\r\n            this.downloading = true;\r\n        });\r\n        const downloadIdle = [\r\n            EVT.list.downloadPause,\r\n            EVT.list.downloadStop,\r\n            EVT.list.downloadComplete,\r\n        ];\r\n        for (const ev of downloadIdle) {\r\n            window.addEventListener(ev, () => {\r\n                this.downloading = false;\r\n            });\r\n        }\r\n    }\r\n}\r\nconst states = new States();\r\nexport { states };\r\n","import { EVT } from './EVT';\r\n// 存储抓取结果和状态\r\nclass Store {\r\n    constructor() {\r\n        this.postIdList = [];\r\n        /**抓取结果的元数据 */\r\n        this.resultMeta = [];\r\n        /**抓取结果 */\r\n        this.result = [];\r\n        /**抓取完成的时间 */\r\n        this.date = new Date();\r\n        /**因为价格限制而不能抓取的文章 */\r\n        this.skipDueToFee = 0;\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.crawlStart, () => {\r\n            this.resetResult();\r\n        });\r\n    }\r\n    getCommonData(data) {\r\n        return {\r\n            postId: data.postId,\r\n            type: data.type,\r\n            title: data.title,\r\n            date: data.date,\r\n            fee: data.fee,\r\n            user: data.user,\r\n            uid: data.uid,\r\n            createID: data.createID,\r\n            tags: data.tags,\r\n        };\r\n    }\r\n    // 添加每个作品的信息。只需要传递有值的属性\r\n    addResult(data) {\r\n        this.resultMeta.push(data);\r\n        // 为投稿里的所有的 文本内容 生成一份数据\r\n        // 但是此时并不会生成文本的 URL，等到下载时才会为其生成 URL\r\n        if (data.links.text.length > 0) {\r\n            const result = Object.assign(this.getCommonData(data), data.links);\r\n            this.result.push(result);\r\n        }\r\n        // 为投稿里的每个 files 生成一份数据\r\n        const files = data.files;\r\n        for (const fileData of files) {\r\n            const result = Object.assign(this.getCommonData(data), fileData);\r\n            this.result.push(result);\r\n        }\r\n    }\r\n    resetResult() {\r\n        this.postIdList = [];\r\n        this.resultMeta = [];\r\n        this.result = [];\r\n        this.skipDueToFee = 0;\r\n    }\r\n}\r\nconst store = new Store();\r\nexport { store };\r\n","\"use strict\";\r\n// 显示自定义的提示\r\nclass Tip {\r\n    constructor() {\r\n        this.tipEl = document.createElement('div'); // tip 元素\r\n        this.addTipEl();\r\n    }\r\n    // 显示提示\r\n    addTipEl() {\r\n        const tipHTML = `<div id=\"tip\"></div>`;\r\n        document.body.insertAdjacentHTML('beforeend', tipHTML);\r\n        this.tipEl = document.getElementById('tip');\r\n        const tips = document.querySelectorAll('.has_tip');\r\n        for (const el of tips) {\r\n            for (const ev of ['mouseenter', 'mouseleave']) {\r\n                el.addEventListener(ev, (event) => {\r\n                    const e = (event || window.event);\r\n                    const text = el.dataset.tip;\r\n                    if (!text) {\r\n                        console.log(el);\r\n                    }\r\n                    this.showTip(text, {\r\n                        type: ev === 'mouseenter' ? 1 : 0,\r\n                        x: e.clientX,\r\n                        y: e.clientY,\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // 显示中间面板上的提示。参数 arg 指示鼠标是移入还是移出，并包含鼠标位置\r\n    showTip(text, arg) {\r\n        if (!text) {\r\n            throw new Error('No tip text.');\r\n        }\r\n        if (arg.type === 1) {\r\n            this.tipEl.innerHTML = text;\r\n            this.tipEl.style.left = arg.x + 30 + 'px';\r\n            this.tipEl.style.top = arg.y - 30 + 'px';\r\n            this.tipEl.style.display = 'block';\r\n        }\r\n        else if (arg.type === 0) {\r\n            this.tipEl.style.display = 'none';\r\n        }\r\n    }\r\n}\r\nnew Tip();\r\n","import { Colors } from './Colors';\r\n// 轻提示，只显示文字和背景颜色\r\n// 适用于无需用户进行确认的提示\r\nclass Toast {\r\n    constructor() {\r\n        this.defaultCfg = {\r\n            msg: '',\r\n            color: Colors.white,\r\n            bgColor: Colors.bgBrightBlue,\r\n            dealy: 1500,\r\n            enter: 'up',\r\n            leave: 'fade',\r\n            position: 'mouse',\r\n        };\r\n        this.successCfg = {\r\n            msg: '',\r\n            color: Colors.white,\r\n            bgColor: Colors.bgSuccess,\r\n            dealy: 1500,\r\n            enter: 'up',\r\n            leave: 'fade',\r\n            position: 'mouse',\r\n        };\r\n        this.warningCfg = {\r\n            msg: '',\r\n            color: Colors.white,\r\n            bgColor: Colors.bgWarning,\r\n            dealy: 1500,\r\n            enter: 'up',\r\n            leave: 'fade',\r\n            position: 'mouse',\r\n        };\r\n        this.errorCfg = {\r\n            msg: '',\r\n            color: Colors.white,\r\n            bgColor: Colors.bgError,\r\n            dealy: 1500,\r\n            enter: 'up',\r\n            leave: 'fade',\r\n            position: 'mouse',\r\n        };\r\n        this.tipClassName = 'xzToast';\r\n        this.mousePosition = { x: 0, y: 0 };\r\n        this.minTop = 20;\r\n        this.once = 1; // 每一帧移动多少像素\r\n        this.total = 20; // 移动多少像素后消失\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        // 必须是监听 mousemove 而不是 click\r\n        window.addEventListener('mousemove', (ev) => {\r\n            this.mousePosition.x = ev.x;\r\n            this.mousePosition.y = ev.y;\r\n        });\r\n    }\r\n    show(msg, arg) {\r\n        this.create(Object.assign({}, this.defaultCfg, arg, { msg: msg }));\r\n    }\r\n    success(msg, arg) {\r\n        this.create(Object.assign({}, this.successCfg, arg, { msg: msg }));\r\n    }\r\n    warning(msg, arg) {\r\n        this.create(Object.assign({}, this.warningCfg, arg, { msg: msg }));\r\n    }\r\n    error(msg, arg) {\r\n        this.create(Object.assign({}, this.errorCfg, arg, { msg: msg }));\r\n    }\r\n    create(arg) {\r\n        const span = document.createElement('span');\r\n        span.textContent = arg.msg;\r\n        span.style.color = arg.color;\r\n        // 设置背景颜色，优先使用 color\r\n        span.style.backgroundColor = arg.bgColor;\r\n        span.style.opacity = '0'; // 先使提示完全透明\r\n        // 把提示添加到页面上\r\n        span.classList.add(this.tipClassName);\r\n        document.body.appendChild(span);\r\n        // 设置 left，使其居中\r\n        // 默认的中间点是窗口的中间\r\n        let centerPoint = window.innerWidth / 2;\r\n        if (arg.position === 'mouse') {\r\n            // 把中间点设置为鼠标所处的位置\r\n            centerPoint = this.mousePosition.x;\r\n        }\r\n        // 设置 left\r\n        const rect = span.getBoundingClientRect();\r\n        let left = centerPoint - rect.width / 2;\r\n        const minLeft = 0; // 防止提示左侧超出窗口\r\n        const maxLeft = window.innerWidth - rect.width; // 防止提示右侧超出窗口\r\n        if (left < minLeft) {\r\n            left = minLeft;\r\n        }\r\n        if (left > maxLeft) {\r\n            left = maxLeft;\r\n        }\r\n        span.style.left = left + 'px';\r\n        // 设置 top\r\n        let lastTop = 0;\r\n        if (arg.position === 'topCenter') {\r\n            lastTop = this.minTop;\r\n        }\r\n        if (arg.position === 'center') {\r\n            lastTop = window.innerHeight / 2 - this.minTop;\r\n        }\r\n        if (arg.position === 'mouse') {\r\n            // 跟随鼠标位置\r\n            // top 值减去一点高度，使文字出现在鼠标上方\r\n            let y = this.mousePosition.y - 40;\r\n            if (y < this.minTop) {\r\n                y = this.minTop;\r\n            }\r\n            lastTop = y;\r\n        }\r\n        // 出现动画\r\n        if (arg.enter === 'none') {\r\n            span.style.top = lastTop + 'px';\r\n            span.style.opacity = '1';\r\n        }\r\n        else {\r\n            this.enter(span, arg.enter, lastTop);\r\n        }\r\n        // 消失动画\r\n        window.setTimeout(() => {\r\n            if (arg.leave === 'none') {\r\n                span.remove();\r\n            }\r\n            else {\r\n                this.leave(span, arg.leave, lastTop);\r\n            }\r\n        }, arg.dealy);\r\n    }\r\n    // 提示出现的动画\r\n    enter(el, way, lastTop) {\r\n        const startTop = lastTop + this.total; // 初始 top 值\r\n        const once = 2;\r\n        const total = this.total;\r\n        let numberOfTimes = 0; // 执行次数\r\n        const frame = function (timestamp) {\r\n            numberOfTimes++;\r\n            // 计算总共上移了多少像素\r\n            const move = once * numberOfTimes;\r\n            // 计算不透明度\r\n            const opacity = move / total;\r\n            if (move <= total && opacity <= 1) {\r\n                if (way === 'up') {\r\n                    el.style.top = startTop - move + 'px';\r\n                }\r\n                el.style.opacity = opacity.toString();\r\n                // 请求下一帧\r\n                window.requestAnimationFrame(frame);\r\n            }\r\n        };\r\n        window.requestAnimationFrame(frame);\r\n    }\r\n    // 提示消失的动画\r\n    leave(el, way, lastTop) {\r\n        const startTop = lastTop; // 初始 top 值\r\n        const once = this.once;\r\n        const total = this.total;\r\n        let numberOfTimes = 0; // 执行次数\r\n        const frame = function (timestamp) {\r\n            numberOfTimes++;\r\n            // 计算总共上移了多少像素\r\n            const move = once * numberOfTimes;\r\n            // 计算不透明度\r\n            const opacity = 1 - move / total;\r\n            if (move < total && opacity > 0) {\r\n                if (way === 'up') {\r\n                    el.style.top = startTop - move + 'px';\r\n                }\r\n                el.style.opacity = opacity.toString();\r\n                // 请求下一帧\r\n                window.requestAnimationFrame(frame);\r\n            }\r\n            else {\r\n                // 动画执行完毕，删除元素\r\n                el.remove();\r\n            }\r\n        };\r\n        window.requestAnimationFrame(frame);\r\n    }\r\n}\r\nconst toast = new Toast();\r\nexport { toast };\r\n","import { lang } from './Lang';\r\nclass Tools {\r\n    static getUserId() {\r\n        const Reg = /creator\\/(\\d*)?/;\r\n        const testString = [location.href, document.head.innerHTML];\r\n        for (const string of testString) {\r\n            const result = Reg.exec(string);\r\n            if (result && result.length > 1) {\r\n                return result[1];\r\n            }\r\n        }\r\n        throw new Error('getUserId failed!');\r\n    }\r\n    // 动态添加 css 样式\r\n    static addStyle(css) {\r\n        const e = document.createElement('style');\r\n        e.innerHTML = css;\r\n        document.body.append(e);\r\n    }\r\n    // 寻找 slot，本程序使用的 slot 都要有 data-name 属性\r\n    static findSlot(name) {\r\n        const slot = document.querySelector(`slot[data-name=${name}]`);\r\n        if (!slot) {\r\n            throw new Error(`No such slot: ${name}`);\r\n        }\r\n        return slot;\r\n    }\r\n    // 使用指定的插槽\r\n    static useSlot(name, element) {\r\n        const slot = this.findSlot(name);\r\n        if (typeof element === 'string') {\r\n            // 插入字符串形式的元素\r\n            const wrap = document.createElement('div');\r\n            wrap.innerHTML = element;\r\n            const el = wrap.children[0];\r\n            slot.appendChild(el);\r\n            return el;\r\n        }\r\n        else {\r\n            // 插入 html 元素\r\n            slot.appendChild(element);\r\n            return element;\r\n        }\r\n    }\r\n    // 清空指定的插槽\r\n    static clearSlot(name) {\r\n        this.findSlot(name).innerHTML = '';\r\n    }\r\n    // 创建下载面板上的通用按钮\r\n    // 注意 textFlag 和 titleFlag 必须是 LangText 里存在的属性，这是为了能根据语言设置动态切换文本\r\n    // 如果 text 和 title 是直接设置的字符串，那么不应该使用这个方法设置，而是由调用者自行设置\r\n    static addBtn(slot, bg = '', textFlag = '', titleFlag = '') {\r\n        const e = document.createElement('button');\r\n        e.type = 'button';\r\n        e.style.backgroundColor = bg;\r\n        textFlag && e.setAttribute('data-xztext', textFlag);\r\n        titleFlag && e.setAttribute('data-xztitle', titleFlag);\r\n        this.useSlot(slot, e);\r\n        lang.register(e);\r\n        return e;\r\n    }\r\n    /**获取页面标题 */\r\n    // 删除了下载器在标题上添加的状态\r\n    static getPageTitle() {\r\n        let result = document.title\r\n            .replace(/\\[(↑|→|▶|↓|║|■|✓| )\\]/, '')\r\n            .replace(/^ (\\d+) /, '');\r\n        // 如果开头有空格则去掉空格\r\n        if (result.startsWith(' ')) {\r\n            result = result.replace(/ */, '');\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { Tools };\r\n","import { EVT } from './EVT';\r\nclass UnifiedURL {\r\n    constructor() {\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.settingChange, (ev) => {\r\n            const data = ev.detail.data;\r\n            if (data.name === 'unifiedURL' && data.value) {\r\n                this.check();\r\n            }\r\n        });\r\n    }\r\n    check() {\r\n        // 首先取出二级域名\r\n        // https://www.fanbox.cc/\r\n        const test = location.hostname.match(/(.*)\\.fanbox.cc/);\r\n        if (!test || test.length < 2) {\r\n            return;\r\n        }\r\n        const subDomain = test[1];\r\n        // 对于一些特定的二级域名，不会跳转\r\n        if (subDomain === 'www' ||\r\n            subDomain === 'api' ||\r\n            subDomain === 'downloads') {\r\n            return;\r\n        }\r\n        // 如果二级域名不符合上面的条件，那么就是用户名。\r\n        // 判断用户是否登录，如果未登录，则不会跳转\r\n        // 因为未登录时，fanbox 会强制把网址改为用户名在前的形式，下载器无法把网址改成用户名在后的形式\r\n        const metaElement = document.head.querySelector('meta#metadata');\r\n        if (!metaElement) {\r\n            return;\r\n        }\r\n        const content = metaElement.getAttribute('content');\r\n        if (!content) {\r\n            return;\r\n        }\r\n        const data = JSON.parse(content);\r\n        // null 说明用户未登录。登录后是 string id\r\n        if (data.context.user.userId === null) {\r\n            return;\r\n        }\r\n        // 用户名在后面时，path 不能以斜线结尾，否则会 404。（用户名在前且处于用户主页时，path 就只有一个斜线）\r\n        let path = location.pathname;\r\n        if (path.endsWith('/')) {\r\n            path = path.substring(0, path.length - 1);\r\n        }\r\n        // 在 https://www.fanbox.cc/ 后面插入用户名\r\n        const newURL = `https://www.fanbox.cc/@${subDomain}` + path;\r\n        location.href = newURL;\r\n    }\r\n}\r\nnew UnifiedURL();\r\n","/*\r\n * project: Pixiv Fanbox Downloader\r\n * author:  xuejianxianzun; 雪见仙尊\r\n * license: GPL-3.0-or-later; http://www.gnu.org/licenses/gpl-3.0.txt\r\n * Github： https://github.com/xuejianxianzun/PixivFanboxDownloader\r\n * Releases: https://github.com/xuejianxianzun/PixivFanboxDownloader/releases\r\n * Wiki:    https://github.com/xuejianxianzun/PixivFanboxDownloader/wiki\r\n * E-mail:  xuejianxianzun@gmail.com\r\n * QQ group:  853021998\r\n */\r\nimport './UnifiedURL';\r\nimport './ListenPageSwitch';\r\nimport './PageType';\r\nimport './CenterPanel';\r\nimport './setting/Form';\r\nimport './InitPage';\r\nimport './QuickCrawl';\r\nimport './Tip';\r\nimport './OutputPanel';\r\nimport './download/DownloadControl';\r\nimport './download/ShowStatusOnTitle';\r\nimport './download/Resume';\r\nimport './ShowNotification';\r\nimport './ShowHowToUse';\r\nimport './ShowWhatIsNew';\r\nimport './CheckUnsupportBrowser';\r\n","// 下载文件，并发送给浏览器下载\r\nimport { EVT } from '../EVT';\r\nimport { fileName } from '../FileName';\r\nimport { progressBar } from '../ProgressBar';\r\nimport { downloadRecord } from './DownloadRecord';\r\nimport { lang } from '../Lang';\r\nimport { log } from '../Log';\r\nimport { states } from '../States';\r\nclass Download {\r\n    constructor(progressBarIndex, data) {\r\n        this.fileName = '';\r\n        this.progressBarIndex = progressBarIndex;\r\n        this.arg = data;\r\n        this.download(data);\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.downloadSuccess, (event) => {\r\n            const donwloadSuccessData = event.detail.data;\r\n            if (donwloadSuccessData.url === this.arg.data.url) {\r\n                this.setProgressBar(1024, 1024);\r\n            }\r\n        });\r\n    }\r\n    // 跳过下载这个文件。可以传入用于提示的文本\r\n    skipDownload(data, msg) {\r\n        if (msg) {\r\n            log.warning(msg);\r\n        }\r\n        if (states.downloading) {\r\n            EVT.fire('skipDownload', data);\r\n        }\r\n    }\r\n    // 设置进度条信息\r\n    setProgressBar(loaded, total) {\r\n        progressBar.setProgress(this.progressBarIndex, {\r\n            name: this.fileName,\r\n            loaded: loaded,\r\n            total: total,\r\n        });\r\n    }\r\n    // 下载文件\r\n    async download(arg) {\r\n        this.fileName = fileName.getFileName(arg.data);\r\n        // 检查是否是重复文件\r\n        const url = arg.data.url;\r\n        if (!url.startsWith('blob')) {\r\n            const duplicate = await downloadRecord.checkDeduplication(arg.data);\r\n            if (duplicate) {\r\n                return this.skipDownload({\r\n                    id: arg.id,\r\n                    reason: 'duplicate',\r\n                }, lang.transl('_跳过下载因为重复文件', this.fileName));\r\n            }\r\n        }\r\n        // 重设当前下载栏的信息\r\n        this.setProgressBar(0, 0);\r\n        // 向浏览器发送下载任务\r\n        this.browserDownload(url, this.fileName, arg.id, arg.taskBatch);\r\n    }\r\n    // 向浏览器发送下载任务\r\n    browserDownload(url, fileName, id, taskBatch) {\r\n        const sendData = {\r\n            msg: 'send_download',\r\n            fileUrl: url,\r\n            fileName: fileName,\r\n            id,\r\n            taskBatch,\r\n        };\r\n        chrome.runtime.sendMessage(sendData);\r\n    }\r\n}\r\nexport { Download };\r\n","// 下载控制\r\nimport { EVT } from '../EVT';\r\nimport { Tools } from '../Tools';\r\nimport { store } from '../Store';\r\nimport { log } from '../Log';\r\nimport { lang } from '../Lang';\r\nimport { Colors } from '../Colors';\r\nimport { Download } from './Download';\r\nimport { progressBar } from '../ProgressBar';\r\nimport { settings } from '../setting/Settings';\r\nimport { states } from '../States';\r\nimport { ShowSkipCount } from './ShowSkipCount';\r\nimport { msgBox } from '../MsgBox';\r\nimport { downloadStates } from './DownloadStates';\r\nimport { toast } from '../Toast';\r\nclass DownloadControl {\r\n    constructor() {\r\n        this.downloadThreadMax = 6; // 同时下载的线程数的最大值，也是默认值\r\n        this.downloadThread = 3; // 同时下载的线程数\r\n        this.taskBatch = 0; // 标记任务批次，每次重新下载时改变它的值，传递给后台使其知道这是一次新的下载\r\n        this.taskList = {}; // 下载任务列表，使用下载的文件的 id 做 key，保存下载栏编号和它在下载状态列表中的索引\r\n        this.downloaded = 0; // 已下载的任务数量\r\n        this.reTryTimer = 0; // 重试下载的定时器\r\n        this.wrapper = document.createElement('div');\r\n        this.downStatusEl = document.createElement('span');\r\n        this.stop = false; // 是否停止下载\r\n        this.pause = false; // 是否暂停下载\r\n        this.msgFlag = 'uuidTip';\r\n        this.createDownloadArea();\r\n        this.bindEvents();\r\n        const skipTipWrap = this.wrapper.querySelector('.skip_tip');\r\n        new ShowSkipCount(skipTipWrap);\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.crawlStart, () => {\r\n            this.hideDownloadArea();\r\n            this.reset();\r\n        });\r\n        for (const ev of [EVT.list.crawlFinish, EVT.list.resume]) {\r\n            window.addEventListener(ev, (ev) => {\r\n                // 当恢复了未完成的抓取数据时，将下载状态设置为暂停\r\n                this.pause = ev.type === 'resume';\r\n                // 让开始下载的方法进入任务队列，以便让监听上述事件的其他部分的代码先执行完毕\r\n                window.setTimeout(() => {\r\n                    this.readyDownload();\r\n                }, 0);\r\n            });\r\n        }\r\n        window.addEventListener(EVT.list.skipDownload, (ev) => {\r\n            // 跳过下载的文件不会触发 downloadSuccess 事件\r\n            const data = ev.detail.data;\r\n            this.downloadSuccess(data);\r\n        });\r\n        // 监听浏览器下载文件后，返回的消息\r\n        chrome.runtime.onMessage.addListener((msg) => {\r\n            var _a;\r\n            if (!this.taskBatch) {\r\n                return;\r\n            }\r\n            // UUID 的情况\r\n            if ((_a = msg.data) === null || _a === void 0 ? void 0 : _a.uuid) {\r\n                log.error(lang.transl('_uuid'));\r\n                msgBox.once(this.msgFlag, lang.transl('_uuid'), 'error');\r\n            }\r\n            // 文件下载成功\r\n            if (msg.msg === 'downloaded') {\r\n                EVT.fire('downloadSuccess', msg.data);\r\n                this.downloadSuccess(msg.data);\r\n            }\r\n            else if (msg.msg === 'download_err') {\r\n                // 浏览器把文件保存到本地时出错\r\n                // 用户操作导致下载取消的情况，跳过这个文件，不再重试保存它。触发条件如：\r\n                // 用户在浏览器弹出“另存为”对话框时取消保存\r\n                // 用户让 IDM 转接这个下载时\r\n                if (msg.err === 'USER_CANCELED') {\r\n                    log.error(lang.transl('_user_canceled_tip', msg.data.url, msg.err || 'unknown'));\r\n                    this.downloadSuccess(msg.data);\r\n                    return;\r\n                }\r\n                else if (msg.err === 'SERVER_BAD_CONTENT') {\r\n                    log.error(`${msg.data.url} Download error! Code: ${msg.err}. 404: file does not exist.`);\r\n                    // 404 错误不重试下载\r\n                }\r\n                else {\r\n                    log.error(`${msg.data.url} Download error! Code: ${msg.err}. Will try again later.`);\r\n                    // 重新下载这个文件\r\n                    this.downloadError(msg.data, msg.err);\r\n                }\r\n                EVT.fire('downloadError');\r\n            }\r\n            // UUID 的情况\r\n            if (msg.data && msg.data.uuid) {\r\n                log.error(lang.transl('_uuid'));\r\n            }\r\n        });\r\n        window.addEventListener(EVT.list.downloadComplete, () => {\r\n            log.success(lang.transl('_下载完毕'), 2);\r\n            toast.success(lang.transl('_下载完毕2'), {\r\n                position: 'topCenter',\r\n            });\r\n        });\r\n    }\r\n    setDownloaded() {\r\n        this.downloaded = downloadStates.downloadedCount();\r\n        const text = `${this.downloaded} / ${store.result.length}`;\r\n        log.log(text, 2, false);\r\n        // 设置总下载进度条\r\n        progressBar.setTotalProgress(this.downloaded);\r\n        // 所有文件正常下载完毕（跳过下载的文件也算正常下载）\r\n        if (this.downloaded === store.result.length) {\r\n            window.setTimeout(() => {\r\n                // 延后触发下载完成的事件。因为下载完成事件是由上游事件（跳过下载，或下载成功事件）派生的，如果这里不延迟触发，可能导致其他模块先接收到下载完成事件，后接收到上游事件。\r\n                EVT.fire('downloadComplete');\r\n            }, 0);\r\n            this.reset();\r\n        }\r\n    }\r\n    // 显示或隐藏下载区域\r\n    showDownloadArea() {\r\n        this.wrapper.style.display = 'block';\r\n    }\r\n    hideDownloadArea() {\r\n        this.wrapper.style.display = 'none';\r\n    }\r\n    // 设置下载状态文本，默认颜色为主题蓝色\r\n    setDownStateText(str, color = '') {\r\n        const el = document.createElement('span');\r\n        el.textContent = str;\r\n        if (color) {\r\n            el.style.color = color;\r\n        }\r\n        this.downStatusEl.innerHTML = '';\r\n        this.downStatusEl.appendChild(el);\r\n    }\r\n    reset() {\r\n        this.pause = false;\r\n        this.stop = false;\r\n        clearTimeout(this.reTryTimer);\r\n    }\r\n    createDownloadArea() {\r\n        const html = `<div class=\"download_area\">\n    <div class=\"centerWrap_btns\">\n    <button class=\"startDownload\" type=\"button\" style=\"background:${Colors.bgBlue};\" data-xztext=\"_开始下载\"></button>\n    <button class=\"pauseDownload\" type=\"button\" style=\"background:${Colors.bgYellow};\" data-xztext=\"_暂停下载\"></button>\n    <button class=\"stopDownload\" type=\"button\" style=\"background:${Colors.bgRed};\" data-xztext=\"_停止下载\"></button>\n    <button class=\"previewFileName\" type=\"button\" style=\"background:${Colors.bgGreen};\" data-xztext=\"_预览文件名\"></button>\n    </div>\n    <div class=\"download_status_text_wrap\">\n    <span data-xztext=\"_当前状态\"></span>\n    <span class=\"down_status\" data-xztext=\"_未开始下载\"></span>\n    <span class=\"skip_tip warn\"></span>\n    </div>\n    </div>`;\r\n        this.wrapper = Tools.useSlot('downloadArea', html);\r\n        lang.register(this.wrapper);\r\n        this.downStatusEl = this.wrapper.querySelector('.down_status');\r\n        this.wrapper\r\n            .querySelector('.startDownload')\r\n            .addEventListener('click', () => {\r\n            this.startDownload();\r\n        });\r\n        this.wrapper\r\n            .querySelector('.pauseDownload')\r\n            .addEventListener('click', () => {\r\n            this.pauseDownload();\r\n        });\r\n        this.wrapper\r\n            .querySelector('.stopDownload')\r\n            .addEventListener('click', () => {\r\n            this.stopDownload();\r\n        });\r\n        this.wrapper\r\n            .querySelector('.previewFileName')\r\n            .addEventListener('click', () => {\r\n            EVT.fire('previewFileName');\r\n        });\r\n    }\r\n    // 下载线程设置\r\n    setDownloadThread() {\r\n        const setThread = settings.downloadThread;\r\n        if (setThread < 1 ||\r\n            setThread > this.downloadThreadMax ||\r\n            isNaN(setThread)) {\r\n            // 如果数值非法，则重设为默认值\r\n            this.downloadThread = this.downloadThreadMax;\r\n        }\r\n        else {\r\n            this.downloadThread = setThread; // 设置为用户输入的值\r\n        }\r\n        // 如果剩余任务数量少于下载线程数\r\n        if (store.result.length - this.downloaded < this.downloadThread) {\r\n            this.downloadThread = store.result.length - this.downloaded;\r\n        }\r\n        // 重设下载进度条\r\n        progressBar.reset(this.downloadThread, this.downloaded);\r\n    }\r\n    // 抓取完毕之后，已经可以开始下载时，根据一些状态进行处理\r\n    readyDownload() {\r\n        if (states.busy || store.result.length === 0) {\r\n            return;\r\n        }\r\n        this.showDownloadArea();\r\n        this.setDownloadThread();\r\n        // 视情况自动开始下载\r\n        if (settings.autoStartDownload || states.quickCrawl) {\r\n            this.startDownload();\r\n        }\r\n    }\r\n    // 开始下载\r\n    startDownload() {\r\n        // 如果正在下载中，或无图片，则不予处理\r\n        if (states.busy || store.result.length === 0) {\r\n            return;\r\n        }\r\n        if (this.pause) {\r\n            // 从上次中断的位置继续下载\r\n            // 把“使用中”的下载状态重置为“未使用”\r\n            downloadStates.resume();\r\n        }\r\n        else {\r\n            // 如果之前没有暂停任务，也没有进入恢复模式，则重新下载\r\n            // 初始化下载状态列表\r\n            downloadStates.init();\r\n        }\r\n        // 重置一些条件\r\n        this.reset();\r\n        this.setDownloaded();\r\n        this.taskBatch = new Date().getTime(); // 修改本批下载任务的标记\r\n        this.setDownloadThread();\r\n        EVT.fire('downloadStart');\r\n        // 启动或继续下载，建立并发下载线程\r\n        for (let i = 0; i < this.downloadThread; i++) {\r\n            this.createDownload(i);\r\n        }\r\n        this.setDownStateText(lang.transl('_正在下载中'));\r\n        log.log(lang.transl('_正在下载中'));\r\n    }\r\n    // 暂停下载\r\n    pauseDownload() {\r\n        clearTimeout(this.reTryTimer);\r\n        if (store.result.length === 0) {\r\n            return;\r\n        }\r\n        // 停止的优先级高于暂停。点击停止可以取消暂停状态，但点击暂停不能取消停止状态\r\n        if (this.stop === true) {\r\n            return;\r\n        }\r\n        if (this.pause === false) {\r\n            // 如果正在下载中\r\n            if (states.busy) {\r\n                this.pause = true; // 发出暂停信号\r\n                EVT.fire('downloadPause');\r\n                this.setDownStateText(lang.transl('_已暂停'), '#f00');\r\n                log.warning(lang.transl('_已暂停'), 2);\r\n            }\r\n            else {\r\n                // 不在下载中的话不允许启用暂停功能\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    // 停止下载\r\n    stopDownload() {\r\n        clearTimeout(this.reTryTimer);\r\n        if (store.result.length === 0 || this.stop) {\r\n            return;\r\n        }\r\n        this.stop = true;\r\n        EVT.fire('downloadStop');\r\n        this.setDownStateText(lang.transl('_已停止'), '#f00');\r\n        log.error(lang.transl('_已停止'), 2);\r\n        this.pause = false;\r\n    }\r\n    downloadError(data, err) {\r\n        if (this.pause || this.stop) {\r\n            return false;\r\n        }\r\n        const task = this.taskList[data.id];\r\n        // 复位这个任务的状态\r\n        downloadStates.setState(task.index, -1);\r\n        // 建立下载任务，再次下载它\r\n        // 如果出现了服务端错误，可能是获取原图时出现错误，改为使用缩略图进行下载\r\n        this.createDownload(task.progressBarIndex, err === 'SERVER_FAILED');\r\n    }\r\n    downloadSuccess(data) {\r\n        const task = this.taskList[data.id];\r\n        // 更改这个任务状态为“已完成”\r\n        downloadStates.setState(task.index, 1);\r\n        // 增加已下载数量\r\n        this.setDownloaded();\r\n        // 是否继续下载\r\n        const no = task.progressBarIndex;\r\n        if (this.checkContinueDownload()) {\r\n            this.createDownload(no);\r\n        }\r\n    }\r\n    // 当一个文件下载完成后，检查是否还有后续下载任务\r\n    checkContinueDownload() {\r\n        // 如果没有全部下载完毕\r\n        if (this.downloaded < store.result.length) {\r\n            // 如果任务已停止\r\n            if (this.pause || this.stop) {\r\n                return false;\r\n            }\r\n            // 如果已完成的数量 加上 线程中未完成的数量，仍然没有达到文件总数，继续添加任务\r\n            if (this.downloaded + this.downloadThread - 1 < store.result.length) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    // 查找需要进行下载的作品，建立下载\r\n    // 可选第二个参数：使用缩略图 url 而不是原图 url 进行下载\r\n    createDownload(progressBarIndex, useThumb = false) {\r\n        const index = downloadStates.getFirstDownloadItem();\r\n        if (index === undefined) {\r\n            throw new Error('There are no data to download');\r\n        }\r\n        else {\r\n            let result = store.result[index];\r\n            // 对于文本数据，此时创建其 URL\r\n            if (result.text && result.text.length > 0) {\r\n                const text = result.text.join('\\r\\n');\r\n                const blob = new Blob([text], {\r\n                    type: 'text/plain',\r\n                });\r\n                result.url = URL.createObjectURL(blob);\r\n                result.size = blob.size;\r\n            }\r\n            if (useThumb && result.retryUrl) {\r\n                ;\r\n                [result.url, result.retryUrl] = [result.retryUrl, result.url];\r\n            }\r\n            const data = {\r\n                id: result.fileId,\r\n                data: result,\r\n                index: index,\r\n                progressBarIndex: progressBarIndex,\r\n                taskBatch: this.taskBatch,\r\n            };\r\n            // 保存任务信息\r\n            this.taskList[data.data.fileId] = {\r\n                index,\r\n                progressBarIndex: progressBarIndex,\r\n            };\r\n            // 建立下载\r\n            new Download(progressBarIndex, data);\r\n        }\r\n    }\r\n}\r\nnew DownloadControl();\r\n","import { EVT } from '../EVT';\r\nimport { lang } from '../Lang';\r\nimport { log } from '../Log';\r\nimport { settings } from '../setting/Settings';\r\nimport { IndexedDB } from '../utils/IndexedDB';\r\nimport { Utils } from '../utils/Utils';\r\nimport { toast } from '../Toast';\r\nimport { msgBox } from '../MsgBox';\r\n// 保存下载记录，用来判断重复下载的文件\r\nclass DownloadRecord {\r\n    constructor() {\r\n        this.DBName = 'DLRecord';\r\n        this.DBVer = 1;\r\n        this.storeName = 'record';\r\n        this.IDB = new IndexedDB();\r\n        this.init();\r\n    }\r\n    async init() {\r\n        await this.initDB();\r\n        this.bindEvents();\r\n    }\r\n    // 初始化数据库，获取数据库对象\r\n    async initDB() {\r\n        // 在升级事件里创建表和索引\r\n        const onUpdate = (db) => {\r\n            if (!db.objectStoreNames.contains(this.storeName)) {\r\n                const store = db.createObjectStore(this.storeName, { keyPath: 'url' });\r\n                store.createIndex('url', 'url', { unique: true });\r\n            }\r\n        };\r\n        return new Promise(async (resolve, reject) => {\r\n            resolve(await this.IDB.open(this.DBName, this.DBVer, onUpdate));\r\n        });\r\n    }\r\n    /**去掉文件 url 开头的协议和域名部分，以减少索引字段的长度 */\r\n    removeHttp(url) {\r\n        // url 如：\r\n        // https://downloads.fanbox.cc/files/post/1745346/kDCd7V1aaHQPltLU2ZTxxfuX.jpeg\r\n        return url.replace('https://downloads.fanbox.cc/', '');\r\n    }\r\n    bindEvents() {\r\n        // 当有文件下载完成时，存储这个任务的记录\r\n        window.addEventListener(EVT.list.downloadSuccess, (ev) => {\r\n            const successData = ev.detail.data;\r\n            if (!successData.url.startsWith('blob')) {\r\n                this.addRecord({\r\n                    url: this.removeHttp(successData.url),\r\n                });\r\n            }\r\n        });\r\n        // 导入下载记录的按钮\r\n        {\r\n            const btn = document.querySelector('#importDownloadRecord');\r\n            if (btn) {\r\n                btn.addEventListener('click', () => {\r\n                    EVT.fire('importDownloadRecord');\r\n                });\r\n            }\r\n        }\r\n        // 监听导入下载记录的事件\r\n        window.addEventListener(EVT.list.importDownloadRecord, () => {\r\n            this.importRecordFromJSON();\r\n        });\r\n        // 导出下载记录的按钮\r\n        {\r\n            const btn = document.querySelector('#exportDownloadRecord');\r\n            if (btn) {\r\n                btn.addEventListener('click', () => {\r\n                    EVT.fire('exportDownloadRecord');\r\n                });\r\n            }\r\n        }\r\n        // 监听导出下载记录的事件\r\n        window.addEventListener(EVT.list.exportDownloadRecord, () => {\r\n            this.exportRecord();\r\n        });\r\n        // 清空下载记录的按钮\r\n        {\r\n            const btn = document.querySelector('#clearDownloadRecord');\r\n            if (btn) {\r\n                btn.addEventListener('click', () => {\r\n                    EVT.fire('clearDownloadRecord');\r\n                });\r\n            }\r\n        }\r\n        // 监听清空下载记录的事件\r\n        window.addEventListener(EVT.list.clearDownloadRecord, () => {\r\n            this.clearRecords();\r\n        });\r\n    }\r\n    // 添加一条下载记录\r\n    async addRecord(record) {\r\n        this.IDB.put(this.storeName, record);\r\n    }\r\n    /** 检查一个作品是否是重复下载\r\n     *\r\n     * 返回值 true 表示重复，false 表示不重复\r\n     */\r\n    async checkDeduplication(result) {\r\n        return new Promise(async (resolve, reject) => {\r\n            // 如果未启用去重，直接返回不重复\r\n            if (!settings.deduplication) {\r\n                return resolve(false);\r\n            }\r\n            // 在数据库进行查找\r\n            const data = (await this.IDB.get(this.storeName, this.removeHttp(result.url)));\r\n            return resolve(!!data);\r\n        });\r\n    }\r\n    // 清空下载记录\r\n    clearRecords() {\r\n        this.IDB.clear(this.storeName);\r\n        toast.success(lang.transl('_下载记录已清除'));\r\n    }\r\n    // 导出下载记录\r\n    async exportRecord() {\r\n        const record = (await this.IDB.getAll(this.storeName));\r\n        const blob = Utils.json2BlobSafe(record);\r\n        const url = URL.createObjectURL(blob);\r\n        Utils.downloadFile(url, `record-${Utils.replaceUnsafeStr(new Date().toLocaleString())}.json`);\r\n        toast.success(lang.transl('_导出成功'));\r\n    }\r\n    // 导入下载记录\r\n    async importRecord(record) {\r\n        log.warning(lang.transl('_导入下载记录'));\r\n        log.log(record.length.toString());\r\n        await this.IDB.batchAddData(this.storeName, record, 'url');\r\n        log.success(lang.transl('_导入成功'));\r\n        toast.success(lang.transl('_导入成功'));\r\n        msgBox.success(lang.transl('_导入成功'), {\r\n            title: lang.transl('_导入下载记录'),\r\n        });\r\n    }\r\n    // 从 json 文件导入\r\n    async importRecordFromJSON() {\r\n        const record = (await Utils.loadJSONFile().catch((err) => {\r\n            msgBox.error(err);\r\n            return;\r\n        }));\r\n        if (!record) {\r\n            return;\r\n        }\r\n        // 判断格式是否符合要求\r\n        if (Array.isArray(record) === false || record[0].url === undefined) {\r\n            return msgBox.error(lang.transl('_格式错误'));\r\n        }\r\n        this.importRecord(record);\r\n    }\r\n}\r\nconst downloadRecord = new DownloadRecord();\r\nexport { downloadRecord };\r\n","import { EVT } from '../EVT';\r\nimport { store } from '../Store';\r\n// 下载状态列表\r\nclass DownloadStates {\r\n    constructor() {\r\n        this.states = [];\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        // 初始化下载状态\r\n        window.addEventListener(EVT.list.crawlFinish, () => {\r\n            this.init();\r\n        });\r\n    }\r\n    // 创建新的状态列表\r\n    init() {\r\n        this.states = new Array(store.result.length).fill(-1);\r\n    }\r\n    // 统计下载完成的数量\r\n    downloadedCount() {\r\n        let count = 0;\r\n        const length = this.states.length;\r\n        for (let i = 0; i < length; i++) {\r\n            if (this.states[i] === 1) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    // 接受传入的状态数据\r\n    // 目前只有在恢复下载的时候使用\r\n    replace(states) {\r\n        this.states = states;\r\n    }\r\n    // 恢复之前的下载任务\r\n    // 这会把之前的“下载中”标记复位到“未开始下载”，以便再次下载\r\n    resume() {\r\n        const length = this.states.length;\r\n        for (let i = 0; i < length; i++) {\r\n            if (this.states[i] === 0) {\r\n                this.setState(i, -1);\r\n            }\r\n        }\r\n    }\r\n    // 获取第一个“未开始下载”标记的索引\r\n    getFirstDownloadItem() {\r\n        const length = this.states.length;\r\n        for (let i = 0; i < length; i++) {\r\n            if (this.states[i] === -1) {\r\n                this.setState(i, 0);\r\n                return i;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    // 设置已下载列表中的标记\r\n    setState(index, value) {\r\n        this.states[index] = value;\r\n    }\r\n    clear() {\r\n        this.states = [];\r\n    }\r\n}\r\nconst downloadStates = new DownloadStates();\r\nexport { downloadStates };\r\n","import { EVT } from '../EVT';\r\nimport { log } from '../Log';\r\nimport { lang } from '../Lang';\r\nimport { store } from '../Store';\r\nimport { states } from '../States';\r\nimport { downloadStates } from './DownloadStates';\r\nimport { IndexedDB } from '../utils/IndexedDB';\r\nimport { toast } from '../Toast';\r\n// 断点续传。恢复未完成的下载\r\nclass Resume {\r\n    constructor() {\r\n        this.DBName = 'PFD';\r\n        this.DBVer = 1;\r\n        this.dataName = 'taskData'; // 下载任务数据的表名\r\n        this.statesName = 'taskStates'; // 下载状态列表的表名\r\n        this.putStatesTime = 1000; // 每隔指定时间存储一次最新的下载状态\r\n        this.needPutStates = false; // 指示是否需要更新存储的下载状态\r\n        this.IDB = new IndexedDB();\r\n        this.init();\r\n    }\r\n    async init() {\r\n        await this.initDB();\r\n        this.bindEvents();\r\n        if (states.settingInitialized) {\r\n            this.restoreData();\r\n        }\r\n        this.regularPutStates();\r\n        this.clearExired();\r\n    }\r\n    // 初始化数据库，获取数据库对象\r\n    async initDB() {\r\n        // 在升级事件里创建表和索引\r\n        const onUpdate = (db) => {\r\n            if (!db.objectStoreNames.contains(this.dataName)) {\r\n                const dataStore = db.createObjectStore(this.dataName, {\r\n                    keyPath: 'id',\r\n                });\r\n                dataStore.createIndex('id', 'id', { unique: true });\r\n                dataStore.createIndex('url', 'url', { unique: true });\r\n            }\r\n            if (!db.objectStoreNames.contains(this.statesName)) {\r\n                const statesStore = db.createObjectStore(this.statesName, {\r\n                    keyPath: 'id',\r\n                });\r\n                statesStore.createIndex('id', 'id', { unique: true });\r\n            }\r\n        };\r\n        // 打开数据库\r\n        return new Promise(async (resolve, reject) => {\r\n            resolve(await this.IDB.open(this.DBName, this.DBVer, onUpdate));\r\n        });\r\n    }\r\n    // 恢复未完成任务的数据\r\n    async restoreData() {\r\n        // 如果下载器在抓取或者在下载，则不恢复数据\r\n        if (states.busy) {\r\n            return;\r\n        }\r\n        // 恢复抓取结果\r\n        const url = this.getURL();\r\n        const taskData = (await this.IDB.get(this.dataName, url, 'url'));\r\n        if (taskData === null) {\r\n            return;\r\n        }\r\n        log.warning(lang.transl('_正在恢复抓取结果'));\r\n        store.result = taskData.data;\r\n        store.date = taskData.date;\r\n        this.taskId = taskData.id;\r\n        // 恢复下载状态\r\n        const taskStates = (await this.IDB.get(this.statesName, this.taskId, 'id'));\r\n        if (taskStates) {\r\n            downloadStates.replace(taskStates.states);\r\n        }\r\n        // 恢复完成\r\n        log.success(lang.transl('_已恢复抓取结果'), 2);\r\n        EVT.fire('resume');\r\n    }\r\n    bindEvents() {\r\n        // 抓取完成时，保存这次任务的数据\r\n        window.addEventListener(EVT.list.crawlFinish, async () => {\r\n            this.saveData();\r\n        });\r\n        // 当有文件下载完成或者跳过下载时，更新下载状态\r\n        const saveEv = [EVT.list.downloadSuccess, EVT.list.skipDownload];\r\n        saveEv.forEach((val) => {\r\n            window.addEventListener(val, () => {\r\n                this.needPutStates = true;\r\n            });\r\n        });\r\n        // 任务下载完毕时，以及停止任务时，清除这次任务的数据\r\n        const clearDataEv = [EVT.list.downloadComplete, EVT.list.downloadStop];\r\n        for (const ev of clearDataEv) {\r\n            window.addEventListener(ev, async () => {\r\n                this.clearData();\r\n            });\r\n        }\r\n        // 切换页面时，重新检查恢复数据\r\n        const restoreEvt = [EVT.list.pageSwitch, EVT.list.settingInitialized];\r\n        restoreEvt.forEach((evt) => {\r\n            window.addEventListener(evt, () => {\r\n                this.restoreData();\r\n            });\r\n        });\r\n        // 清空已保存的抓取结果\r\n        window.addEventListener(EVT.list.clearSavedCrawl, () => {\r\n            this.clearSavedCrawl();\r\n        });\r\n    }\r\n    // 存储抓取结果\r\n    async saveData() {\r\n        if (store.result.length === 0) {\r\n            return;\r\n        }\r\n        this.taskId = store.date.getTime();\r\n        const url = this.getURL();\r\n        // 首先检查这个网址下是否已经存在数据，如果有数据，则清除之前的数据，保持每个网址只有一份数据\r\n        const taskData = (await this.IDB.get(this.dataName, url, 'url'));\r\n        if (taskData) {\r\n            await this.IDB.delete(this.dataName, taskData.id);\r\n            await this.IDB.delete(this.statesName, taskData.id);\r\n        }\r\n        // 如果此时本次任务已经完成，就不进行保存了\r\n        if (downloadStates.downloadedCount() === store.result.length) {\r\n            return;\r\n        }\r\n        // 保存本次任务的数据\r\n        log.warning(lang.transl('_正在保存抓取结果'));\r\n        const resultData = {\r\n            id: this.taskId,\r\n            url: url,\r\n            data: store.result,\r\n            date: store.date,\r\n        };\r\n        try {\r\n            await this.IDB.add(this.dataName, resultData);\r\n        }\r\n        catch (error) {\r\n            // 当存储失败时\r\n            console.error(error);\r\n            if (error.target && error.target.error && error.target.error.message) {\r\n                const msg = error.target.error.message;\r\n                log.error('IndexedDB: ' + msg);\r\n            }\r\n        }\r\n        // 保存 states 数据\r\n        const statesData = {\r\n            id: this.taskId,\r\n            states: downloadStates.states,\r\n        };\r\n        this.IDB.add(this.statesName, statesData);\r\n        log.success(lang.transl('_已保存抓取结果'), 2);\r\n    }\r\n    // 定时 put 下载状态\r\n    async regularPutStates() {\r\n        window.setInterval(() => {\r\n            if (this.needPutStates) {\r\n                const statesData = {\r\n                    id: this.taskId,\r\n                    states: downloadStates.states,\r\n                };\r\n                this.needPutStates = false;\r\n                // 如果此时本次任务已经完成，就不进行保存了\r\n                if (downloadStates.downloadedCount() === store.result.length) {\r\n                    return;\r\n                }\r\n                this.IDB.put(this.statesName, statesData);\r\n            }\r\n        }, this.putStatesTime);\r\n    }\r\n    async clearData() {\r\n        if (!this.taskId) {\r\n            return;\r\n        }\r\n        // 下载完成时，清除这次任务储存的数据，需要使用保存的 taskId，而不是 URL\r\n        // 因为用户在下载时可能切换了页面 URL，如果使用 URL 就会导致差找不到对应的数据\r\n        const taskData = (await this.IDB.get(this.dataName, this.taskId, 'id'));\r\n        if (!taskData) {\r\n            return;\r\n        }\r\n        this.IDB.delete(this.dataName, this.taskId);\r\n        this.IDB.delete(this.statesName, this.taskId);\r\n    }\r\n    // 清除过期的数据\r\n    async clearExired() {\r\n        // 数据的过期时间，设置为 31 天。31*24*60*60*1000\r\n        const expiryTime = 2678400000;\r\n        // 每隔一天检查一次数据是否过期\r\n        const nowTime = new Date().getTime();\r\n        let lastCheckTime = 0;\r\n        const storeName = 'lastCheckExired';\r\n        const data = localStorage.getItem(storeName);\r\n        if (data === null) {\r\n            localStorage.setItem(storeName, lastCheckTime.toString());\r\n        }\r\n        else {\r\n            lastCheckTime = Number.parseInt(data);\r\n        }\r\n        if (nowTime - lastCheckTime < 86400000) {\r\n            return;\r\n        }\r\n        localStorage.setItem(storeName, nowTime.toString());\r\n        // 检查数据是否过期\r\n        const callback = (item) => {\r\n            if (item) {\r\n                const data = item.value;\r\n                if (nowTime - data.date.getTime() > expiryTime) {\r\n                    this.IDB.delete(this.dataName, data.url);\r\n                    this.IDB.delete(this.statesName, data.id);\r\n                }\r\n                item.continue();\r\n            }\r\n        };\r\n        this.IDB.openCursor(this.dataName, callback);\r\n    }\r\n    // 清空已保存的抓取结果\r\n    async clearSavedCrawl() {\r\n        await Promise.all([\r\n            this.IDB.clear(this.dataName),\r\n            this.IDB.clear(this.statesName),\r\n        ]);\r\n        toast.success(lang.transl('_数据清除完毕'));\r\n    }\r\n    // 处理本页面的 url\r\n    getURL() {\r\n        return window.location.href.split('#')[0];\r\n    }\r\n}\r\nnew Resume();\r\n","import { EVT } from '../EVT';\r\nimport { lang } from '../Lang';\r\n// 显示跳过下载的文件数量\r\nclass ShowSkipCount {\r\n    constructor(el) {\r\n        this.count = 0; // 跳过下载的数量\r\n        this.el = el;\r\n        lang.register(this.el);\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.crawlStart, () => {\r\n            this.reset();\r\n        });\r\n        window.addEventListener(EVT.list.downloadStop, () => {\r\n            // 重置计数但不清空提示文字，因为用户还需要看\r\n            this.count = 0;\r\n        });\r\n        window.addEventListener(EVT.list.skipDownload, () => {\r\n            this.addCount();\r\n        });\r\n        window.addEventListener(EVT.list.downloadStart, () => {\r\n            if (this.count === 0) {\r\n                this.reset();\r\n            }\r\n        });\r\n        window.addEventListener(EVT.list.downloadComplete, () => {\r\n            // 重置计数但不清空提示文字，因为用户还需要看\r\n            this.count = 0;\r\n        });\r\n    }\r\n    addCount() {\r\n        this.count++;\r\n        lang.updateText(this.el, '_已跳过n个文件', this.count.toString());\r\n    }\r\n    reset() {\r\n        this.count = 0;\r\n        lang.updateText(this.el, '');\r\n    }\r\n}\r\nexport { ShowSkipCount };\r\n","import { pageType } from '../PageType';\r\nimport { EVT } from '../EVT';\r\nimport { states } from '../States';\r\nimport { Tools } from '../Tools';\r\n/**\r\n↑ 抓取中\r\n→ 等待下一步操作（搜索页）\r\n▶ 可以开始下载\r\n↓ 下载中\r\n║ 下载暂停\r\n■ 下载停止\r\n✓ 下载完毕\r\n*/\r\nvar Flags;\r\n(function (Flags) {\r\n    Flags[\"crawling\"] = \"\\u2191\";\r\n    Flags[\"waiting\"] = \"\\u2192\";\r\n    Flags[\"readyDownload\"] = \"\\u25B6\";\r\n    Flags[\"downloading\"] = \"\\u2193\";\r\n    Flags[\"paused\"] = \"\\u2551\";\r\n    Flags[\"stopped\"] = \"\\u25A0\";\r\n    Flags[\"completed\"] = \"\\u2713\";\r\n    Flags[\"space\"] = \" \";\r\n})(Flags || (Flags = {}));\r\n// 把下载器运行中的状态添加到页面标题前面\r\nclass ShowStatusOnTitle {\r\n    constructor() {\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.crawlStart, () => {\r\n            this.set(Flags.crawling);\r\n        });\r\n        window.addEventListener(EVT.list.worksUpdate, () => {\r\n            this.set(Flags.waiting);\r\n        });\r\n        for (const ev of [EVT.list.crawlFinish, EVT.list.resume]) {\r\n            window.addEventListener(ev, () => {\r\n                this.set(Flags.readyDownload);\r\n            });\r\n        }\r\n        window.addEventListener(EVT.list.downloadStart, () => {\r\n            this.set(Flags.downloading);\r\n        });\r\n        // 切换了页面之后，标题可能会被 pixiv 修改，这样就没有标记了\r\n        // 在这里监听页面切换的事件，如果切换后下载器仍在下载中，则重新添加标记\r\n        // 回调函数应该在 pixiv 修改标题之后执行\r\n        // 但是 pageSwitch 触发时，标题尚未被 pixiv 修改。pixiv 是在 pageSwitch 之后修改标题的。\r\n        // 所以我使用定时器来检查标题是否被 pixiv 修改了\r\n        window.addEventListener(EVT.list.pageSwitch, () => {\r\n            window.clearInterval(this.pageSwitchTimer);\r\n            if (!states.downloading) {\r\n                return;\r\n            }\r\n            const nowTitle = Tools.getPageTitle();\r\n            this.pageSwitchTimer = window.setInterval(() => {\r\n                if (Tools.getPageTitle() !== nowTitle) {\r\n                    this.set(Flags.downloading);\r\n                    window.clearInterval(this.pageSwitchTimer);\r\n                }\r\n            }, 500);\r\n        });\r\n        window.addEventListener(EVT.list.downloadComplete, () => {\r\n            this.set(Flags.completed);\r\n        });\r\n        window.addEventListener(EVT.list.downloadPause, () => {\r\n            this.set(Flags.paused);\r\n        });\r\n        window.addEventListener(EVT.list.downloadStop, () => {\r\n            this.set(Flags.stopped);\r\n        });\r\n        window.addEventListener(EVT.list.crawlEmpty, () => {\r\n            this.reset();\r\n        });\r\n    }\r\n    // 检查标题里是否含有标记\r\n    includeFlag(flag) {\r\n        if (!flag) {\r\n            // 没有传递标记，则检查所有标记\r\n            for (const value of Object.values(Flags)) {\r\n                const str = `[${value}]`;\r\n                if (document.title.includes(str)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // 否则检查指定标记\r\n            const str = `[${flag}]`;\r\n            return document.title.includes(str);\r\n        }\r\n        return false;\r\n    }\r\n    // 重设 title\r\n    reset() {\r\n        window.clearInterval(this.flashingTimer);\r\n        const metaTagPage = [pageType.list.UserHome, pageType.list.UserPostList];\r\n        // 从 og:title 标签获取标题。og:title 标签是最早更新标题的。但不确定是否在所有页面上都可以直接使用 og:title 标签的内容，所以这里只在部分页面上使用\r\n        if (metaTagPage.includes(pageType.type)) {\r\n            const ogTitle = document.querySelector('meta[property=\"og:title\"]');\r\n            if (ogTitle) {\r\n                document.title = ogTitle.content;\r\n                return;\r\n            }\r\n        }\r\n        // 去掉 title 里的标记\r\n        const index = document.title.indexOf(']');\r\n        document.title = document.title.substring(index + 1);\r\n    }\r\n    // 在标题上显示指定标记\r\n    set(flag) {\r\n        const str = `[${flag}]`;\r\n        // 如果 title 里没有标记，就添加标记\r\n        if (!this.includeFlag()) {\r\n            document.title = `${str} ${document.title}`;\r\n        }\r\n        else {\r\n            // 如果已经有标记了，则替换为新当前传入的标记\r\n            document.title = document.title.replace(/\\[.?\\]/, str);\r\n        }\r\n        // 可以开始下载，或者等待下一步操作，进行闪烁提醒\r\n        if (flag === Flags.readyDownload || flag === Flags.waiting) {\r\n            this.flashing(flag);\r\n        }\r\n        else {\r\n            window.clearInterval(this.flashingTimer);\r\n        }\r\n    }\r\n    // 闪烁提醒，把给定的标记替换成空白，来回切换\r\n    flashing(flag) {\r\n        window.clearInterval(this.flashingTimer);\r\n        const str = `[${flag}]`;\r\n        const whiteSpace = `[${Flags.space}]`;\r\n        this.flashingTimer = window.setInterval(() => {\r\n            if (this.includeFlag(flag)) {\r\n                // 如果含有标记，就替换成空白\r\n                document.title = document.title.replace(str, whiteSpace);\r\n            }\r\n            else {\r\n                if (this.includeFlag(Flags.space)) {\r\n                    // 如果含有空白，就替换成标记\r\n                    document.title = document.title.replace(whiteSpace, str);\r\n                }\r\n                else {\r\n                    // 如果都没有，一般是页面切换了，标题被重置了，取消闪烁\r\n                    window.clearInterval(this.flashingTimer);\r\n                }\r\n            }\r\n        }, 500);\r\n    }\r\n}\r\nnew ShowStatusOnTitle();\r\n","// 储存下载器使用的多语言文本\r\n// 在属性名前面加上下划线，和文本内容做出区别\r\n// {} 是占位符\r\n// <br> 是换行\r\nconst langText = {\r\n    _开始抓取: [\r\n        '开始抓取',\r\n        '開始抓取',\r\n        'start crawling',\r\n        'クロールを開始する',\r\n        '크롤링 시작',\r\n    ],\r\n    _或者: [' 或者 ', ' 或是 ', ' or ', ' または ', ' 또는 '],\r\n    _并且: [' 并且 ', ' 並且 ', ' and ', ' かつ ', ' 그리고 '],\r\n    _任务开始: [\r\n        '任务开始',\r\n        '工作開始',\r\n        'Task starts',\r\n        'タスクの開始',\r\n        '작업 시작',\r\n    ],\r\n    _抓取结果为零: [\r\n        '抓取完毕，但没有找到符合筛选条件的文件。',\r\n        '擷取完畢，但沒有找到符合篩選條件的檔案。',\r\n        'Crawl finished but did not find files that match the filter criteria.',\r\n        'フィルタ条件で検索しましたが、該当するファイルは見つかりませんでした。',\r\n        '긁어오기가 완료되었지만 필터 조건과 일치하는 파일을 찾지 못했습니다.',\r\n    ],\r\n    _当前任务尚未完成: [\r\n        '当前任务尚未完成',\r\n        '目前工作尚未完成',\r\n        'The current task has not yet been completed',\r\n        '現在の作業はまだ完了していません',\r\n        '현재 작업이 아직 완료되지 않았습니다',\r\n    ],\r\n    _当前任务尚未完成2: [\r\n        '当前任务尚未完成，请等待完成后再下载。',\r\n        '目前工作尚未完成，請等待完成後再下載。',\r\n        'The current task has not yet been completed',\r\n        '現在のタスクはまだ完了していません。完了するまでお待ちください。',\r\n        '현재 작업이 아직 완료되지 않았습니다.',\r\n    ],\r\n    _关闭: ['关闭', '關閉', 'close', '閉じる', '닫기'],\r\n    _输出信息: [\r\n        '输出信息',\r\n        '輸出資訊',\r\n        'Output information',\r\n        '出力情報',\r\n        '출력 정보',\r\n    ],\r\n    _复制: ['复制', '複製', 'Copy', 'コピー', '복사'],\r\n    _已复制到剪贴板: [\r\n        '已复制到剪贴板，可直接粘贴',\r\n        '已複製至剪貼簿，可直接貼上',\r\n        'Has been copied to the clipboard',\r\n        'クリップボードにコピーしました。',\r\n        '클립보드에 복사되었습니다.',\r\n    ],\r\n    _下载设置: [\r\n        '下载设置',\r\n        '下載設定',\r\n        'Download settings',\r\n        'ダウンロード設定',\r\n        '다운로드 설정',\r\n    ],\r\n    _收起展开设置项: [\r\n        '收起/展开设置项',\r\n        '摺疊/展開設定項目',\r\n        'Collapse/expand settings',\r\n        '設定の折りたたみ/展開',\r\n        '설정 축소/확장',\r\n    ],\r\n    _github: [\r\n        'Github 页面，欢迎 star',\r\n        'Github 頁面，歡迎 star',\r\n        'Github page, if you like, please star it',\r\n        'Github のページ、star をクリックしてください。',\r\n        'Github, 유용하셨다면 Star를 주세요.',\r\n    ],\r\n    _pixivDownloader: [\r\n        'Pixiv 下载器',\r\n        'Pixiv 下載器',\r\n        'Pixiv Downloader',\r\n        'Pixiv ダウンロード',\r\n        'Pixiv 다운로더',\r\n    ],\r\n    _抓取: ['抓取', '擷取', 'Crawl', '保存', '긁어오기'],\r\n    _下载: ['下载', '下載', 'Download', 'ダウンロード', '다운로드'],\r\n    _其他: ['其他', '其他', 'Other', 'その他', '그 외'],\r\n    _快捷键切换显示隐藏: [\r\n        '使用 Alt + X，可以显示和隐藏下载面板',\r\n        '使用 Alt + X，可以顯示和隱藏下載面板',\r\n        'Use Alt + X to show and hide the download panel',\r\n        'Alt + X でダウンロードパネルを表示/非表示にできます。',\r\n        'Alt + X를 사용하여 다운로드 패널 보이기 및 숨기기',\r\n    ],\r\n    _共抓取到n个文件: [\r\n        '共抓取到 {} 个文件',\r\n        '共擷取到 {} 個檔案',\r\n        'Crawl a total of {} files',\r\n        '合計 {} 個のファイルを取得しました。',\r\n        '총 {}개의 파일 긁어오기',\r\n    ],\r\n    _命名规则: [\r\n        ' <span class=\"key\">命名</span>规则',\r\n        '<span class=\"key\">命名</span>規則',\r\n        '<span class=\"key\">Naming</span> rule',\r\n        '<span class=\"key\">命名</span>規則',\r\n        '<span class=\"key\">명명</span> 규칙',\r\n    ],\r\n    _设置文件夹名的提示: [\r\n        `可以使用 '<span class=\"key\">/</span>' 建立文件夹。示例：`,\r\n        `可以使用斜線（<span class=\"key\">/</span>）建立資料夾。範例：`,\r\n        `You can create a directory with '<span class=\"key\">/</span>'. Example：`,\r\n        `フォルダーは '<span class=\"key\">/</span>' で作成できます。例：`,\r\n        `'<span class=\"key\">/</span>'을 사용하여 디렉토리를 생성할 수 있습니다.<br>예:`,\r\n    ],\r\n    _命名标记user: [\r\n        '画师名字',\r\n        '畫師名稱',\r\n        'Artist name',\r\n        'ユーザー名',\r\n        '아티스트명',\r\n    ],\r\n    _命名标记create_id: [\r\n        '画师的创作者 ID（英文名或罗马字）',\r\n        '畫師的創作者 ID（英文名或羅馬字）',\r\n        `Artist's Creator ID (English or Romaji)`,\r\n        'アーティストのクリエイター ID (英語またはローマ字)',\r\n        '아티스트 크리에이터 ID(영어 또는 로마자)',\r\n    ],\r\n    _命名标记uid: [\r\n        '画师 ID（数字）',\r\n        '畫師 ID（數字）',\r\n        'Artist ID (number)',\r\n        'ユーザーID（数字）',\r\n        '아티스트 ID(숫자)',\r\n    ],\r\n    _预览文件名: [\r\n        '预览文件名',\r\n        '預覽檔案名稱',\r\n        'Preview file name',\r\n        'ファイル名',\r\n        '파일명 미리보기',\r\n    ],\r\n    _下载线程: [\r\n        '下载<span class=\"key\">线程</span>',\r\n        '下載<span class=\"key\">執行緒</span>',\r\n        'Download <span class=\"key\">thread</span>',\r\n        '同時ダウンロード数',\r\n        '다운로드 <span class=\"key\">쓰레드</span>',\r\n    ],\r\n    _线程数字: [\r\n        '可以输入 1-6 之间的数字，设置同时下载的数量',\r\n        '可以輸入 1-6 之間的數字，設定同時下載的數量',\r\n        'You can type a number between 1-6 to set the number of concurrent downloads',\r\n        '同時にダウンロードするファイルの数を 1-6 で設定します。',\r\n        '1-6 사이의 숫자를 입력하여 동시 다운로드 수를 설정할 수 있습니다.',\r\n    ],\r\n    _下载按钮1: [\r\n        '开始下载',\r\n        '開始下載',\r\n        'start download',\r\n        'ダウンロードを開始',\r\n        '다운로드 시작',\r\n    ],\r\n    _下载按钮2: [\r\n        '暂停下载',\r\n        '暫停下載',\r\n        'pause download',\r\n        'ダウンロードを一時停止',\r\n        '다운로드 일시중지',\r\n    ],\r\n    _下载按钮3: [\r\n        '停止下载',\r\n        '停止下載',\r\n        'stop download',\r\n        'ダウンロードを停止',\r\n        '다운로드 정지',\r\n    ],\r\n    _下载按钮4: ['复制 url', '複製url', 'copy urls', 'URLをコピー', 'URL 복사'],\r\n    _当前状态: [\r\n        '当前状态 ',\r\n        '目前狀態 ',\r\n        'Now state ',\r\n        '現在の状態 ',\r\n        '현재 상태 ',\r\n    ],\r\n    _未开始下载: [\r\n        '未开始下载',\r\n        '未開始下載',\r\n        'Not yet started downloading',\r\n        'まだダウンロードを開始していません。',\r\n        '아직 다운로드를 시작하지 않았습니다.',\r\n    ],\r\n    _常见问题: [\r\n        '常见问题',\r\n        '常見問題',\r\n        'Common problems',\r\n        'よくある質問',\r\n        '자주 묻는 질문',\r\n    ],\r\n    _uuid: [\r\n        '如果下载后的文件名异常，请禁用其他有下载功能的浏览器扩展。',\r\n        '如果下載後的檔案名稱異常，請停用其他有下載功能的瀏覽器擴充功能。',\r\n        'If the file name after downloading is abnormal, disable other browser extensions that have download capabilities.',\r\n        'ダウンロード後のファイル名が異常な場合、ダウンロード機能を持つ他のブラウザ拡張機能を無効にしてください。',\r\n        '다운로드 후 파일명이 이상할 경우 다운로드 기능이 있는 다른 브라우저 확장 프로그램을 비활성화해주세요.',\r\n    ],\r\n    _下载说明: [\r\n        \"下载的文件保存在浏览器的下载目录里。<br>请不要在浏览器的下载选项里选中'总是询问每个文件的保存位置'。<br><b>如果下载后的文件名异常，请禁用其他有下载功能的浏览器扩展。</b><br>QQ群：853021998\",\r\n        '下載的檔案儲存在瀏覽器的下載目錄裡。<br>請不要在瀏覽器的下載選項裡選取「下載每個檔案前先詢問儲存位置」。<br><b>如果下載後的檔案名稱異常，請停用其他有下載功能的瀏覽器擴充功能。</b><br>QQ群：853021998',\r\n        'The downloaded file is saved in the browser`s download directory. <br><b>If the file name after downloading is abnormal, disable other browser extensions that have download capabilities.</b>',\r\n        'ダウンロードしたファイルは、ブラウザのダウンロードディレクトリに保存されます。<br><b>ダウンロード後のファイル名が異常な場合は、ダウンロード機能を持つ他のブラウザ拡張機能を無効にしてください。</b>',\r\n        '다운로드한 파일은 브라우저의 다운로드 디렉토리에 저장됩니다. <br><b>다운로드 후 파일명이 비정상인 경우 다운로드 기능이 있는 다른 브라우저 확장 프로그램을 비활성화해주세요.</b>',\r\n    ],\r\n    _正在下载中: [\r\n        '正在下载中',\r\n        '正在下載',\r\n        'Downloading',\r\n        'ダウンロード中',\r\n        '다운로드 중',\r\n    ],\r\n    _下载完毕: [\r\n        '√ 下载完毕!',\r\n        '√ 下載完畢!',\r\n        '√ Download finished!',\r\n        '√ ダウンロードが完了しました！',\r\n        '√ 다운로드 완료!',\r\n    ],\r\n    _已暂停: [\r\n        '下载已暂停',\r\n        '下載已暫停',\r\n        'Download is paused',\r\n        'ダウンロードを一時停止中です。',\r\n        '다운로드 일시중지',\r\n    ],\r\n    _已停止: [\r\n        '下载已停止',\r\n        '下載已停止',\r\n        'Download stopped',\r\n        'ダウンロードを停止しました。',\r\n        '다운로드 정지',\r\n    ],\r\n    _已下载: ['已下载', '已下載', 'downloaded', 'ダウンロードした', '다운로드됨'],\r\n    _抓取完毕: [\r\n        '抓取完毕！',\r\n        '擷取完畢！',\r\n        'Crawl finished!',\r\n        'クロールが完了しました！',\r\n        '긁어오기 완료!',\r\n    ],\r\n    _自动开始下载: [\r\n        '<span class=\"key\">自动</span>开始下载',\r\n        '<span class=\"key\">自動</span>開始下載',\r\n        'Download starts <span class=\"key\">automatically</span>',\r\n        'ダウンロードは自動的に開始されます',\r\n        '<span class=\"key\">자동으로</span> 다운로드 시작',\r\n    ],\r\n    _自动下载的提示: [\r\n        '当“开始下载”状态可用时，自动开始下载，不需要点击下载按钮。',\r\n        '當可下載時自動開始下載，不需要點選下載按鈕。',\r\n        'When the &quot;Start Download&quot; status is available, the download starts automatically and no need to click the download button.',\r\n        '「ダウンロードを開始する」ステータスが有効になると、ダウンロードが自動的に開始され、ダウンロードボタンをクリックする必要がなくなります。',\r\n        '&quot;다운로드 시작&quot; 상태가 활성화되면, 다운로드가 자동으로 시작되고 다운로드 시작 버튼을 클릭할 필요가 없게 됩니다.',\r\n    ],\r\n    _文件下载失败: [\r\n        '文件 {} 下载失败',\r\n        '檔案 {} 下載失败',\r\n        'File {} download failed',\r\n        'ファイル {} のダウンロードに失敗しました。',\r\n        '{} 파일 다운로드 실패',\r\n    ],\r\n    _是否重置设置: [\r\n        '是否重置设置？',\r\n        '是否重設設定？',\r\n        'Do you want to reset the settings?',\r\n        '設定をリセットしますか？',\r\n        '설정을 초기화하시겠습니까?',\r\n    ],\r\n    _id范围: [\r\n        '<span class=\"key\">ID</span> 范围',\r\n        '<span class=\"key\">ID</span> 範圍',\r\n        '<span class=\"key\">ID</span> range',\r\n        '<span class=\"key\">ID</span>の範囲',\r\n        '<span class=\"key\">ID</span> 범위',\r\n    ],\r\n    _设置id范围提示: [\r\n        '您可以输入一个投稿 id，抓取比它新或者比它旧的投稿',\r\n        '您可以輸入一個投稿 id，擷取比它新或者比它舊的投稿。',\r\n        'You can enter a work id and crawl posts that are newer or older than it',\r\n        '1つの投稿IDを入力することで、それより新しいあるいは古い投稿をまとめてダウンロードすることができます。',\r\n        '1개의 게시물 ID를 입력하면 그보다 새로운 혹은 오래된 게시물을 일괄 다운로드 받을 수 있습니다.',\r\n    ],\r\n    _大于: ['大于', '大於', 'Bigger than', 'より新しい', '보다 큼'],\r\n    _小于: ['小于', '小於', 'Less than', 'より古い', '보다 작음'],\r\n    _投稿时间: [\r\n        '投稿<span class=\"key\">时间</span>',\r\n        '投稿<span class=\"key\">時間</span>',\r\n        'Posting <span class=\"key\">date</span>',\r\n        '投稿<span class=\"key\">日時</span>',\r\n        '투고 <span class=\"key\">날짜</span>',\r\n    ],\r\n    _设置投稿时间提示: [\r\n        '您可以下载指定时间内发布的投稿',\r\n        '您可以下載指定時間内發佈的投稿',\r\n        'You can download posts published within a specified time',\r\n        '指定期間内の投稿をまとめてダウンロードできます。',\r\n        '지정된 기간 내에 게시물을 다운로드할 수 있습니다.',\r\n    ],\r\n    _没有数据可供使用: [\r\n        '没有数据可供使用',\r\n        '沒有資料可供使用',\r\n        'No data is available.',\r\n        '該当するデータはありません。',\r\n        '사용 가능한 데이터가 없습니다.',\r\n    ],\r\n    _最小值: ['最小值', '最小值', 'Minimum value', '最小値', '최소'],\r\n    _最大值: ['最大值', '最大值', 'maximum value', '最大値', '최대'],\r\n    _文件类型: [\r\n        '<span class=\"key\">文件</span>类型',\r\n        '<span class=\"key\">檔案</span>類型',\r\n        '<span class=\"key\">File</span> type',\r\n        '<span class=\"key\">ファイル</span>タイプ',\r\n        '<span class=\"key\">파일</span> 유형',\r\n    ],\r\n    _图片: ['图片', '圖片', 'Image', '画像', '이미지'],\r\n    _视频: ['视频', '影片', 'Video', '映像', '동영상'],\r\n    _音乐: ['音频', '音訊', 'Audio', '音声', '오디오'],\r\n    _压缩文件: [\r\n        '压缩文件',\r\n        '壓縮檔',\r\n        'Compressed file',\r\n        '圧縮ファイル',\r\n        '압축된 파일',\r\n    ],\r\n    _PS文件: ['源文件', '原始檔', 'Source File', 'ソースファイル', '소스 파일'],\r\n    _费用类型: [\r\n        '<span class=\"key\">费用</span>类型',\r\n        '<span class=\"key\">費用</span>型別',\r\n        '<span class=\"key\">Fee</span> type',\r\n        '<span class=\"key\">料金</span>タイプ',\r\n        '<span class=\"key\">수수료</span> 유형',\r\n    ],\r\n    _免费投稿: ['免费投稿', '免費投稿', 'Free post', '無料投稿', '무료 게시물'],\r\n    _付费投稿: ['付费投稿', '付費投稿', 'Paid post', '有償投稿', '유료 게시물'],\r\n    _价格范围: [\r\n        '<span class=\"key\">价格</span>范围',\r\n        '<span class=\"key\">價格</span>範圍',\r\n        '<span class=\"key\">Price</span> range',\r\n        '<span class=\"key\">価格</span>帯',\r\n        '<span class=\"key\">가격</span> 범위',\r\n    ],\r\n    _保存投稿中的外部链接: [\r\n        '保存投稿中的外部<span class=\"key\">链接</span>',\r\n        '儲存投稿中的外部<span class=\"key\">連結</span>',\r\n        'Save external <span class=\"key\">links</span> in the posts',\r\n        '本文中の外部<span class=\"key\">リンク</span>を保存',\r\n        '게시물의 외부 <span class=\"key\">링크</span> 저장',\r\n    ],\r\n    _保存投稿中的文字: [\r\n        '保存投稿中的<span class=\"key\">文字</span>',\r\n        '儲存投稿中的<span class=\"key\">文字</span>',\r\n        'Save the <span class=\"key\">text</span> in the posts',\r\n        '投稿の<span class=\"key\">本文</span>を保存',\r\n        '게시물의 <span class=\"key\">본문</span> 저장',\r\n    ],\r\n    _抓取文件数量: [\r\n        '已获取 {} 个文件',\r\n        '已取得 {} 個檔案',\r\n        '{} Files acquired',\r\n        '{} 個のファイルを取得',\r\n        '{}개의 파일을 획득하였습니다',\r\n    ],\r\n    _早于: ['早于', '早於', 'Earlier than', 'より前', '보다 이전'],\r\n    _晚于: ['晚于', '晚於', 'Later than', 'より後', '보다 이후'],\r\n    _抓取赞助的所有用户的投稿: [\r\n        '抓取赞助的所有用户的投稿',\r\n        '擷取所有贊助用戶的投稿',\r\n        'Crawl all sponsored posts',\r\n        '支援中のユーザーの投稿をまとめて保存',\r\n        '지원 중인 모든 크리에이터의 게시물 긁어오기',\r\n    ],\r\n    _抓取该用户的投稿: [\r\n        '抓取该用户的投稿',\r\n        '擷取該用戶的投稿',\r\n        \"Crawl this user's posts\",\r\n        'このユーザーの投稿をまとめて保存',\r\n        '이 크리에이터의 게시물 긁어오기',\r\n    ],\r\n    _抓取该tag的投稿: [\r\n        '抓取该 tag 的投稿',\r\n        '擷取該 tag 的投稿',\r\n        'Crawl posts with this tag',\r\n        'このタグの投稿をまとめて保存',\r\n        '이 태그를 사용하여 게시물 긁어오기',\r\n    ],\r\n    _抓取这篇投稿: [\r\n        '抓取这篇投稿',\r\n        '擷取這篇投稿',\r\n        'Crawl this post',\r\n        'この投稿を保存',\r\n        '이 게시물을 긁어오기',\r\n    ],\r\n    _抓取商品的封面图: [\r\n        '抓取商品的封面图',\r\n        '擷取商品的封面圖',\r\n        'Crawl the cover image of the product',\r\n        '投稿の表紙画像を保存',\r\n        '게시물의 표지 이미지를 긁어오기',\r\n    ],\r\n    _命名标记postid: ['投稿 ID', '投稿 ID', 'Post ID', '投稿ID', '게시물 ID'],\r\n    _命名标记title: [\r\n        '投稿标题',\r\n        '投稿標題',\r\n        'Post title',\r\n        '投稿のタイトル',\r\n        '게시물 제목',\r\n    ],\r\n    _命名标记tags: [\r\n        '投稿的 tag 列表（可能为空）',\r\n        '投稿的 tag 列表（可能為空）',\r\n        \"Post's tag list (may be empty)\",\r\n        '投稿のタグリスト（空の場合があります）',\r\n        '게시물의 태그 목록 (비어있을 수 있음)',\r\n    ],\r\n    _命名标记date: [\r\n        '投稿的发布日期，如 2019-08-29',\r\n        '投稿的發布日期，如 2019-08-29',\r\n        'The publication date of the post, such as 2019-08-29',\r\n        '投稿日など，例 2019-08-29',\r\n        '게시물의 투고일. 예: 2019-08-29',\r\n    ],\r\n    _命名标记fee: [\r\n        '投稿的价格',\r\n        '投稿的價格',\r\n        'Post price',\r\n        '支援額',\r\n        '게시물 가격',\r\n    ],\r\n    _命名标记index: [\r\n        '文件在它所属的投稿里的序号',\r\n        '檔案在它所屬的投稿裡的序號',\r\n        'The serial number of the file in the post it belongs to',\r\n        '投稿内のファイルの連番',\r\n        '게시물의 파일 일련번호',\r\n    ],\r\n    _命名标记name: [\r\n        '文件在投稿里的文件名',\r\n        '檔案在投稿裡的名稱',\r\n        'File name in the post',\r\n        '投稿内のファイル名',\r\n        '게시물의 파일명',\r\n    ],\r\n    _命名标记ext: [\r\n        '文件的扩展名',\r\n        '檔案的副檔名',\r\n        'File extension',\r\n        'ファイルの拡張子',\r\n        '파일 확장자',\r\n    ],\r\n    _命名标记提醒: [\r\n        '您可以使用多个标记；建议在不同标记之间添加分割用的字符。示例：{postid}-{title}<br>建议在命名规则中包含 {postid} 和 {index}，防止文件名重复。',\r\n        '您可以使用多個標記；建議在不同標記之間加入分隔用的字元。範例：{postid}-{title}<br>建議在命名規則中包含 {postid} 和 {index}，防止檔名重複。',\r\n        'You can use multiple tags; it is recommended to add characters to separate between different tags. Example: {postid}-{title} <br> It is recommended to include {postid} and {index} in the naming rules to prevent duplicate file names.',\r\n        '複数のタグを使用できます。異なるタグを区切るために文字を追加することを推奨します。 例：{postid}-{title} <br>ファイル名の重複を防ぐために、命名規則に{postid}と{index}を含めることを推奨します。',\r\n        '여러 태그를 사용할 수 있습니다. 서로 다른 태그 사이에 구분자를 넣는 것을 권장합니다.<br>예: {title}-{postid}<br>파일명이 중복되지 않도록 명명 규칙에 {postid}와 {index}를 포함할 것을 권장합니다.',\r\n    ],\r\n    _日期格式: [\r\n        '日期和时间<span class=\"key\">格式</span>',\r\n        '日期和時間<span class=\"key\">格式</span>',\r\n        'Date and time <span class=\"key\">format</span>',\r\n        '日付と時刻の書式',\r\n        '날짜 및 시간 <span class=\"key\">형식</span>',\r\n    ],\r\n    _日期格式提示: [\r\n        '你可以使用以下标记来设置日期和时间格式。这会影响命名规则里的 {date} 和 {task_date}。<br>对于时间如 2021-04-30T06:40:08',\r\n        '你可以使用以下標記來設定日期和時間格式。這會影響命名規則裡的 {date} 和 {task_date}。<br>對於資料如：2021-04-30T06:40:08。',\r\n        'You can use the following notation to set the date and time format. This will affect {date} and {task_date} in the naming rules. <br>For time such as 2021-04-30T06:40:08',\r\n        '以下のタグを使用して日時の書式を設定できます。 これは命名規則の {date} と {task_date} に影響します。 <br> 例：2021-04-30T06:40:08',\r\n        '아래 태그를 사용하여 날짜 형식을 설정할 수 있습니다.<br>이것은 명명 규칙의 {date}와 {task_date}에 영향을 미칩니다.<br>예: 2021-04-30T 06:40:08',\r\n    ],\r\n    _命名标记taskDate: [\r\n        '本次任务抓取完成时的时间。例如：2020-10-21',\r\n        '本次工作擷取完成時的時間。例如：2020-10-21。',\r\n        'The time when the task was crawl completed. For example: 2020-10-21',\r\n        'タスクを完了した日時です。 例：2020-10-21',\r\n        '긁어오기 작업 완료 날짜. 예: 2020-10-21',\r\n    ],\r\n    _提示: ['提示', '提示', 'tip', 'ヒント', '팁'],\r\n    _保存投稿中的封面图片: [\r\n        '保存投稿中的<span class=\"key\">封面</span>图片',\r\n        '儲存投稿中的<span class=\"key\">封面</span>圖片',\r\n        'Save the <span class=\"key\">cover</span> image in the posts',\r\n        '投稿の<span class=\"key\">表紙</span>画像を保存',\r\n        '게시물의 <span class=\"key\">표지</span> 이미지 저장',\r\n    ],\r\n    _列表页抓取完成: [\r\n        '列表页面抓取完成',\r\n        '清單頁面擷取完成',\r\n        'The list page is crawled',\r\n        'リストページがクロールされ',\r\n        '목록 페이지를 긁어왔습니다',\r\n    ],\r\n    _当前作品个数: [\r\n        '当前有 {} 个投稿 ',\r\n        '目前有 {} 個投稿 ',\r\n        'There are now {} posts',\r\n        '今は　{}　枚の投稿があります ',\r\n        '현재 {}개의 게시물이 있습니다',\r\n    ],\r\n    _开始获取投稿信息: [\r\n        '开始获取投稿信息',\r\n        '開始取得投稿資訊',\r\n        'Start getting post data',\r\n        '投稿情報の取得を開始します',\r\n        '게시물 데이터 취득을 시작합니다',\r\n    ],\r\n    _待处理: ['待处理', '待處理', 'Pending', '処理待ち', '처리 대기'],\r\n    _共抓取到n个作品: [\r\n        '共抓取到 {} 个投稿',\r\n        '共擷取到 {} 個投稿',\r\n        'Crawl a total of {} posts',\r\n        '合計 {} つの投稿があります',\r\n        '총 {}개의 게시물을 긁어오기',\r\n    ],\r\n    _最近更新: [\r\n        '最近更新',\r\n        '最近更新',\r\n        'What`s new',\r\n        '最近更新する',\r\n        '최근 업데이트',\r\n    ],\r\n    _我知道了: ['我知道了', '我知道了', 'OK', '分かりました', '확인'],\r\n    _格式错误: [\r\n        '格式错误',\r\n        '格式錯誤',\r\n        'Format error',\r\n        'フォーマットエラー',\r\n        '형식 오류',\r\n    ],\r\n    _导入成功: [\r\n        '导入成功',\r\n        '匯入成功',\r\n        'Import successfully',\r\n        'インポート成功',\r\n        '가져오기 성공',\r\n    ],\r\n    _导出成功: [\r\n        '导出成功',\r\n        '匯出成功',\r\n        'Export successfully',\r\n        'エクスポート成功',\r\n        '내보내기 성공',\r\n    ],\r\n    _确定: ['确定', '確定', 'Ok', '確定', '확인'],\r\n    _时间范围: ['时间范围', '時間範圍', 'Time range', '時間範囲', '시간 범위'],\r\n    _背景图片: [\r\n        '<span class=\"key\">背景</span>图片',\r\n        '<span class=\"key\">背景</span>圖片',\r\n        '<span class=\"key\">Background</span> image',\r\n        '<span class=\"key\">背景</span>画像',\r\n        '<span class=\"key\">배경</span> 이미지',\r\n    ],\r\n    _选择文件: [\r\n        '选择文件',\r\n        '選擇檔案',\r\n        'Select a file',\r\n        'ファイルを選択',\r\n        '파일 선택',\r\n    ],\r\n    _不透明度: ['不透明度', '不透明度', 'Opacity', '不透明度', '투명도'],\r\n    _对齐方式: ['对齐方式', '對齊方式', 'Alignment', '揃え方式', '정렬'],\r\n    _顶部: ['顶部', '頂部', 'top', '上揃え', '상단'],\r\n    _居中: ['居中', '居中', 'center', '中央揃え', '중앙'],\r\n    _常见问题说明: [\r\n        '下载器不能绕过付费限制。<br><br>下载的文件保存在浏览器的下载目录里。<br><br>建议在浏览器的下载设置中关闭“下载前询问每个文件的保存位置”。<br><br>如果下载后的文件名异常，请禁用其他有下载功能的浏览器扩展。<br><br>如果你需要一个梯子（机场）,可以试试 <a href=\"https://www.ttkcloud.net/#/register?code=6m4hMaPu\" title=\"https://www.ttkcloud.net/\">www.ttkcloud.net</a>，价格便宜，百兆带宽，无倍率。先购买订阅，然后在仪盘表复制订阅链接使用。<br><br>下载器 QQ 群：853021998',\r\n        '下載器不能繞過付費限制。<br><br>下載的檔案儲存在瀏覽器的下載目錄裡。<br><br>請不要在瀏覽器的下載選項裡選取「下載每個檔案前先詢問儲存位置」。<br><br>如果下載後的檔名異常，請停用其他有下載功能的瀏覽器擴充功能。',\r\n        'Downloaders cannot bypass paid restrictions.<br><br>The downloaded file is saved in the browser`s download directory. <br><br>It is recommended to turn off \"Ask where to save each file before downloading\" in the browser`s download settings.<br><br>If the file name after downloading is abnormal, disable other browser extensions that have download capabilities.',\r\n        'ダウンローダーは、有料の制限を回避できません。<br><br>ダウンロードしたファイルは、ブラウザのダウンロードディレクトリに保存されます。<br><br>ブラウザのダウンロード設定で 「 ダウンロード前に各ファイルの保存場所を確認する 」 をオフにすることをお勧めします。<br><br>ダウンロード後のファイル名が異常な場合は、ダウンロード機能を持つ他のブラウザ拡張機能を無効にしてください。',\r\n        '다운로더는 유료 제한을 우회할 수 없습니다.<br><br>다운로드한 파일은 브라우저의 다운로드 디렉토리에 저장됩니다.<br><br>브라우저의 다운로드 설정에서 \"다운로드 전에 각 파일의 저장 위치 확인\"을 끄는 것이 좋습니다.<br><br>다운로드 후 파일명이 이상할 경우 다운로드 기능이 있는 다른 브라우저 확장 프로그램을 비활성화해주세요.',\r\n    ],\r\n    _赞助我: ['赞助我', '贊助我', 'Sponsor me', '支援する', '후원하기'],\r\n    _赞助方式提示: [\r\n        `非常感谢您的支持！<br>\n    您可以在 Patreon 上赞助我：<br>\n    <a href=\"https://www.patreon.com/xuejianxianzun\" target=\"_blank\">https://www.patreon.com/xuejianxianzun</a><br>\n    中国大陆用户可以在“爱发电”上赞助我：<br>\n    <a href=\"https://afdian.net/@xuejianxianzun\" target=\"_blank\">https://afdian.net/@xuejianxianzun</a><br>\n    也可以扫描二维码：<br>\n    <a href=\"https://github.com/xuejianxianzun/PixivFanboxDownloader#%E6%94%AF%E6%8C%81%E5%92%8C%E6%8D%90%E5%8A%A9\" target=\"_blank\">在 Github 上查看二维码</a> 或者加入 QQ 群 853021998，在群文件里查看二维码。\n    `,\r\n        `非常感謝您的支持！<br>\n    您可以在 Patreon 上贊助我：<br>\n    <a href=\"https://www.patreon.com/xuejianxianzun\" target=\"_blank\">https://www.patreon.com/xuejianxianzun</a><br>\n    中國大陸使用者可以在“愛發電”上贊助我：<br>\n    <a href=\"https://afdian.net/@xuejianxianzun\" target=\"_blank\">https://afdian.net/@xuejianxianzun</a><br>\n    也可以掃描二維碼（QR Code）：<br>\n    <a href=\"https://github.com/xuejianxianzun/PixivFanboxDownloader#%E6%94%AF%E6%8C%81%E5%92%8C%E6%8D%90%E5%8A%A9\" target=\"_blank\">在 Github 上檢視二維碼</a> 或者加入 QQ 群 853021998 檢視二維碼。\n    `,\r\n        `Thank you very much for your support!<br>\n    You can sponsor me on Patreon: <br>\n    <a href=\"https://www.patreon.com/xuejianxianzun\" target=\"_blank\">https://www.patreon.com/xuejianxianzun</a>\n    `,\r\n        `ご支援してくださった皆様、本当にありがとうございました。<br>\n    ご支援してくださった方は、以下の Patreon で：<br>\n    <a href=\"https://www.patreon.com/xuejianxianzun\" target=\"_blank\"> https://www.patreon.com/xuejianxianzun </a>\n    `,\r\n        `지원해주셔서 정말 감사합니다!<br>\n    Patreon에서 저를 후원해주세요<br>\n    <a href=\"https://www.patreon.com/xuejianxianzun\" target=\"_blank\">https://www.patreon.com/xuejianxianzun</a>\n    `,\r\n    ],\r\n    _隐藏下载面板: [\r\n        '隐藏下载面板（Alt + X）',\r\n        '隱藏下載面板（Alt + X）',\r\n        'Hide the download panel (Alt + X)',\r\n        'ダウンロードパネルを非表示にする（Alt + X）',\r\n        '다운로드 패널 숨기기 (Alt + X)',\r\n    ],\r\n    _显示下载面板: [\r\n        '显示下载面板 (Alt + X)',\r\n        '顯示下載面板 (Alt + X)',\r\n        'Show download panel (Alt + X)',\r\n        'ダウンロードパネルを表示 (Alt + X)',\r\n        '다운로드 패널 보이기 (Alt + X)',\r\n    ],\r\n    _输出内容太多已经为你保存到文件: [\r\n        '因为输出内容太多，已经为您保存到文件。',\r\n        '因為輸出內容太多，已經為你儲存到檔案。',\r\n        'Because the output is too much, it has been saved to a file.',\r\n        '出力内容が多いため、txt ファイルに保存しました。',\r\n        '출력 내용이 너무 많아, 파일로 저장했습니다.',\r\n    ],\r\n    _保存: ['保存', '儲存', 'Save', '保存', '저장'],\r\n    _加载: ['加载', '載入', 'Load', 'ロード', '불러오기'],\r\n    _保存命名规则提示: [\r\n        '保存命名规则，最多 20 个',\r\n        '儲存命名規則，最多 20 個',\r\n        'Save naming rule, up to 20',\r\n        '命名規則を保存します。最大 20 個まで',\r\n        '명명 규칙 저장, 최대 20개',\r\n    ],\r\n    _已保存命名规则: [\r\n        '已保存命名规则',\r\n        '已儲存命名規則',\r\n        'Naming rule saved',\r\n        '命名規則を保存しました',\r\n        '명명 규칙이 저장되었습니다.',\r\n    ],\r\n    _快速下载本页: [\r\n        '快速下载本页作品 (Alt + Q)',\r\n        '快速下載本頁作品 (Alt + Q)',\r\n        'Download this work quickly (Alt + Q)',\r\n        'この作品をすばやくダウンロードする (Alt + Q)',\r\n        '작품 빠른 다운로드 (Alt + Q)',\r\n    ],\r\n    _高亮显示关键字: [\r\n        '<span class=\"key\">高亮</span>显示关键字',\r\n        '<span class=\"key\">標明</span>顯示關鍵字',\r\n        '<span class=\"key\">Highlight</span> keywords',\r\n        'キーワードを強調表示',\r\n        '<span class=\"key\">강조</span> 키워드 표시',\r\n    ],\r\n    _导出: ['导出', '匯出', 'Export', 'エクスポート', '내보내기'],\r\n    _导入: ['导入', '匯入', 'Import', 'インポート', '불러오기'],\r\n    _清除: ['清除', '清除', 'Clear', 'クリア', '비우기'],\r\n    _提示2: ['提示', '提示', 'Tip', '？', '팁'],\r\n    _管理设置: [\r\n        '管理<span class=\"key\">设置</span>',\r\n        '管理<span class=\"key\">設定</span>',\r\n        'Manage <span class=\"key\">settings</span>',\r\n        '<span class=\"key\">設定</span>の管理',\r\n        '<span class=\"key\">설정</span> 관리',\r\n    ],\r\n    _导出设置: [\r\n        '导出设置',\r\n        '匯出設定',\r\n        'Export settings',\r\n        'エクスポート設定',\r\n        '내보내기',\r\n    ],\r\n    _导入设置: [\r\n        '导入设置',\r\n        '匯入設定',\r\n        'Import settings',\r\n        'インポート設定',\r\n        '불러오기',\r\n    ],\r\n    _重置设置: [\r\n        '重置设置',\r\n        '重設設定',\r\n        'Reset settings',\r\n        'リセット設定',\r\n        '설정 초기화',\r\n    ],\r\n    _自动检测: ['自动检测', '自動偵測', 'Auto', '自動検出', '자동'],\r\n    _显示高级设置: [\r\n        '显示<span class=\"key\">高级</span>设置',\r\n        '顯示<span class=\"key\">進階</span>設定',\r\n        'Show <span class=\"key\">advanced</span> settings',\r\n        '詳細設定を表示する',\r\n        '<span class=\"key\">고급</span> 설정 보기',\r\n    ],\r\n    _显示高级设置说明: [\r\n        '被隐藏的设置仍然会发挥作用',\r\n        '被隱藏的設定仍然會發揮作用',\r\n        'Hidden settings will still work',\r\n        '隠していた設定がそのまま機能する',\r\n        '숨겨진 설정은 계속 작동합니다.',\r\n    ],\r\n    _下载完成后显示通知: [\r\n        '下载完成后显示<span class=\"key\">通知</span>',\r\n        '下載完成後顯示<span class=\"key\">通知</span>',\r\n        'Show <span class=\"key\">notification</span> after download is complete',\r\n        'ダウンロードが完了した後に通知を表示する',\r\n        '다운로드가 완료되면 <span class=\"key\">알림</span> 표시',\r\n    ],\r\n    _下载完毕2: [\r\n        '下载完毕',\r\n        '下載完畢',\r\n        'Download complete',\r\n        'ダウンロードが完了しました',\r\n        '다운로드 완료',\r\n    ],\r\n    _在序号前面填充0: [\r\n        '在序号前面<span class=\"key\">填充 0</span>',\r\n        '在序號前面<span class=\"key\">填充 0</span>',\r\n        '<span class=\"key\">Add 0</span> in front of the serial number',\r\n        'シリアル番号の前に 0 を記入',\r\n        '일련번호 앞 <span class=\"key\">0 채우기</span>',\r\n    ],\r\n    _在序号前面填充0的说明: [\r\n        '这可以解决一些软件不能正确的按照文件名来排序文件的问题。',\r\n        '這可以解決一些軟體不能正確的按照檔名來排序檔案的問題。',\r\n        'This can solve the problem that some software cannot correctly sort files by file name.',\r\n        'これにより、一部のソフトウェアがファイルをファイル名で正しくソートできないという問題を解決できます。',\r\n        '이것은 일부 소프트웨어가 파일 이름별로 파일을 올바르게 정렬할 수 없는 문제를 해결할 수 있습니다.',\r\n    ],\r\n    _序号总长度: [\r\n        '序号总长度',\r\n        '序號總長度',\r\n        'Total length of serial number',\r\n        'シリアル番号の全長',\r\n        '일련번호 전체 길이',\r\n    ],\r\n    _不下载重复文件: [\r\n        '不下载<span class=\"key\">重复</span>文件',\r\n        '不下載<span class=\"key\">重複</span>檔案',\r\n        'Don`t download <span class=\"key\">duplicate</span> files',\r\n        '重複ファイルをダウンロードしない',\r\n        '<span class=\"key\">중복</span>파일 다운로드하지 않기',\r\n    ],\r\n    _不下载重复文件的提示: [\r\n        '下载器会保存自己的下载记录，以避免下载重复的文件。<br>你可以清除浏览器的下载记录，这不会影响下载器的下载记录。<br>当你清除 Cookie 及其他网站数据时，下载器的记录也会被清除。',\r\n        '下載器會儲存自己的下載紀錄，以避免下載重複的檔案。<br>你可以清除瀏覽器的下載記錄，這不會影響下載器的下載記錄。<br>當你清除 Cookie 及其他網站資料時，下載器的記錄也會被清除。',\r\n        `The downloader will save its download record to avoid downloading duplicate files.<br>You can clear the browser's download history, which will not affect the downloader's download record.<br>When you clear cookies and other site data, the downloader's records will also be cleared.`,\r\n        'ダウンローダーは独自のダウンロード履歴を保存して、重複ファイルのダウンロードを回避する。<br>ブラウザのダウンロード履歴をクリアできますが、ダウンローダのダウンロード記録には影響しません。<br>cookie と他のサイトデータを削除すると、ダウンローダーの記録も削除されます。',\r\n        '다운로더가 중복되는 파일을 다운로드하지 않도록 자신의 다운로드 기록을 저장합니다.<br>브라우저의 다운로드 기록을 지울 수 있으며 이는 다운로더의 다운로드 기록에 영향을 미치지 않습니다.<br>쿠키와 다른 사이트 데이터를 지울 때 다운로드 기록도 삭제됩니다.',\r\n    ],\r\n    _清除下载记录: [\r\n        '清除下载记录',\r\n        '清除下載紀錄',\r\n        'Clear download record',\r\n        '履歴をクリア',\r\n        '다운로드 기록 비우기',\r\n    ],\r\n    _下载记录已清除: [\r\n        '下载记录已清除',\r\n        '已清除下載紀錄',\r\n        'Download record has been cleared',\r\n        'ダウンロード履歴がクリアされました',\r\n        '다운로드 기록이 비워졌습니다',\r\n    ],\r\n    _跳过下载因为重复文件: [\r\n        '检测到文件 {} 已经下载过，跳过此次下载',\r\n        '偵測到檔案 {} 已經下載過，跳過此次下載。',\r\n        'Skip downloading duplicate files {}',\r\n        '重複ファイル {} をスキップ',\r\n        '파일 {}이(가) 이미 다운로드되어 있어, 다운로드를 건너뜁니다',\r\n    ],\r\n    _导入下载记录: [\r\n        '导入下载记录',\r\n        '匯入下載紀錄',\r\n        'Import download record',\r\n        'ダウンロード記録をインポート',\r\n        '다운로드 기록 불러오기',\r\n    ],\r\n    _完成: ['完成', '完成', 'Completed', '完了', '완료됨'],\r\n    _HowToUse: [\r\n        '点击页面右侧的蓝色按钮可以打开下载器面板。<br><br>下载的文件保存在浏览器的下载目录里。<br><br>建议您在浏览器的下载设置中关闭“下载前询问每个文件的保存位置”。<br><br><strong>下载器不能绕过付费限制。</strong>',\r\n        '點選頁面右側的藍色按鈕可以開啟下載器面板。<br><br>下載的檔案儲存在瀏覽器的下載目錄裡。<br><br>請不要在瀏覽器的下載選項裡選取「下載每個檔案前先詢問儲存位置」。<br><br><strong>下載器不能繞過付費限制。</strong>',\r\n        'Click the blue button on the right side of the page to open the downloader panel.<br><br>The downloaded file is saved in the browser`s download directory. <br><br>It is recommended to turn off \"Ask where to save each file before downloading\" in the browser`s download settings.<br><br><strong>Downloaders cannot bypass paid restrictions.</strong>',\r\n        'ページ右側の青いボタンをクリックすると、ダウンローダーパネルが開きます。<br><br>ダウンロードしたファイルは、ブラウザのダウンロードディレクトリに保存されます。<br><br>ブラウザのダウンロード設定で 「 ダウンロード前に各ファイルの保存場所を確認する 」 をオフにすることをお勧めします。<br><br><strong>ダウンローダーは、有料の制限を回避できません。</strong>',\r\n        '페이지 오른쪽에 있는 파란색 버튼을 클릭하면 다운로드 패널이 열립니다.<br><br>다운로드한 파일은 브라우저의 다운로드 디렉토리에 저장됩니다.<br><br>브라우저의 다운로드 설정에서 \"다운로드 전에 각 파일의 저장 위치 확인\"을 끄는 것이 좋습니다.<br><br><strong>다운로더는 유료 제한을 우회할 수 없습니다.</strong>',\r\n    ],\r\n    _whatisnew: [\r\n        `代码重构，并添加了新的功能。例如：`,\r\n        `程式碼重構，並添加了新的功能。例如：`,\r\n        `Code refactored and new features added. E.g:`,\r\n        `コードのリファクタリングと新機能の追加。 例えば：`,\r\n        `코드가 리팩터링되고 새로운 기능이 추가되었습니다. 예:`,\r\n    ],\r\n    _开始下载: [\r\n        '开始下载',\r\n        '開始下載',\r\n        'Start download',\r\n        '開始',\r\n        '다운로드 시작',\r\n    ],\r\n    _暂停下载: [\r\n        '暂停下载',\r\n        '暫停下載',\r\n        'Pause download',\r\n        '一時停止',\r\n        '다운로드 일시중지',\r\n    ],\r\n    _停止下载: ['停止下载', '停止下載', 'Stop download', '停止', '다운로드 정지'],\r\n    _复制url: [\r\n        '复制 URL',\r\n        '複製下載網址',\r\n        'Copy URLs',\r\n        'URL をコピー',\r\n        'URL 복사',\r\n    ],\r\n    _下载进度: [\r\n        '下载进度',\r\n        '下載進度',\r\n        'Total progress',\r\n        '概要',\r\n        '다운로드 진행률',\r\n    ],\r\n    _数据清除完毕: [\r\n        '数据清除完毕',\r\n        '資料清除完畢',\r\n        'Data cleared',\r\n        'クリアされたデータ',\r\n        '데이터가 비워졌습니다',\r\n    ],\r\n    _已跳过n个文件: [\r\n        '已跳过 {} 个文件',\r\n        '已跳過 {} 個檔案',\r\n        '{} files skipped',\r\n        '{} つのファイルをスキップしました',\r\n        '{}개의 파일을 건너뛰었습니다',\r\n    ],\r\n    _统一网址格式: [\r\n        '统一<span class=\"key\">网址</span>格式',\r\n        '統一<span class=\"key\">網址</span>格式',\r\n        'Unified <span class=\"key\">URL</span> Format',\r\n        '統一 <span class=\"key\">URL</span> 形式',\r\n        '통합 <span class=\"key\">URL</span> 형식',\r\n    ],\r\n    _统一网址格式的说明: [\r\n        '保持用户名在域名之后，例如：https://www.fanbox.cc/@username',\r\n        '保持使用者名稱在域名後面，例如：https://www.fanbox.cc/@username',\r\n        'Keep the username after the domain name, for example: https://www.fanbox.cc/@username',\r\n        'ユーザー名はドメイン名の後にあります。例: https://www.fanbox.cc/@username',\r\n        '도메인 이름 뒤에 사용자 이름을 유지합니다. 예를 들면 다음과 같습니다. https://www.fanbox.cc/@username',\r\n    ],\r\n    _正在保存抓取结果: [\r\n        '正在保存抓取结果',\r\n        '正在儲存擷取結果',\r\n        'Saving crawl results',\r\n        'クロール結果を保存しています',\r\n        '긁어오기 결과 저장 중',\r\n    ],\r\n    _已保存抓取结果: [\r\n        '已保存抓取结果',\r\n        '已儲存擷取結果',\r\n        'Crawl results saved',\r\n        'クロール結果を保存しました',\r\n        '긁어오기 결과가 저장되었습니다',\r\n    ],\r\n    _正在恢复抓取结果: [\r\n        '正在恢复抓取结果',\r\n        '正在還原擷取結果',\r\n        'Restoring crawl results',\r\n        'クロール結果を再開しています',\r\n        '긁어오기 결과 복구 중',\r\n    ],\r\n    _已恢复抓取结果: [\r\n        '已恢复抓取结果',\r\n        '已還原擷取結果',\r\n        'Crawl results resumed',\r\n        'クロール結果を再開しました',\r\n        '긁어오기 결과가 복구되었습니다',\r\n    ],\r\n    _清空已保存的抓取结果: [\r\n        '清空已保存的抓取结果',\r\n        '清除已儲存的擷取結果',\r\n        'Clear saved crawl results',\r\n        'セーブしたクロール結果をクリアします',\r\n        '저장된 긁어오기 결과 비우기',\r\n    ],\r\n    _恢复未完成的下载任务: [\r\n        '恢复未完成的下载任务',\r\n        '恢復未完成的下載任務',\r\n        'Resume unfinished download tasks',\r\n        '未完了のダウンロード タスクを再開する',\r\n        '완료되지 않은 다운로드 작업 재개',\r\n    ],\r\n    _价格限制: ['价格限制', '價格限制', `Price limit`, '価格制限', '가격 제한'],\r\n    _因为价格限制不能抓取投稿: [\r\n        '因为价格限制，无法抓取投稿：',\r\n        '因為價格限制，無法抓取投稿：',\r\n        `Can't crawl post due to price limit: `,\r\n        '価格制限のため投稿をクロールできません: ',\r\n        '가격 제한으로 인해 게시물을 크롤링할 수 없음: ',\r\n    ],\r\n    _因为价格限制而跳过的投稿数量: [\r\n        '因为价格限制而跳过的投稿数量：',\r\n        '因為價格限制而跳過的投稿數量：',\r\n        'Number of posts skipped due to price limit: ',\r\n        '価格制限によりスキップされた投稿の数: ',\r\n        '가격 제한으로 인해 건너뛴 게시물 수: ',\r\n    ],\r\n    _即使遇到价格限制也可以保存封面图: [\r\n        '即使遇到价格限制，也可以保存封面图',\r\n        '即使遇到價格限制，也可以儲存封面圖',\r\n        '即使有价格限制，也可以保存封面图片',\r\n        '価格制限があっても表紙画像を保存',\r\n        '가격 제한이 있어도 표지 이미지 저장',\r\n    ],\r\n    _投稿标题必须含有文字: [\r\n        '投稿标题<span class=\"key\">必须</span>含有文字',\r\n        '投稿標題<span class=\"key\">必須</span>含有文字',\r\n        'Post title <span class=\"key\">must</span> contain text',\r\n        '投稿のタイトルにはテキストを含める必要があります',\r\n        '게시물 제목에는 텍스트가 포함되어야 합니다',\r\n    ],\r\n    _投稿标题不能含有文字: [\r\n        '投稿标题<span class=\"key\">不能</span>含有文字',\r\n        '投稿標題<span class=\"key\">不能</span>含有文字',\r\n        'Post title <span class=\"key\">cannot</span> contain text',\r\n        '投稿のタイトルにテキストを含めることはできません',\r\n        '게시물 제목은 텍스트를 포함할 수 없습니다',\r\n    ],\r\n    _多条文字用逗号分割: [\r\n        '你可以设置多条文字，不区分大小写；每条之间用半角逗号(,)分割',\r\n        '你可以設定多條文字，不區分大小寫；每條之間用半形逗號(,)分割',\r\n        'You can set multiple texts, not case sensitive, and separate each with a comma (,)',\r\n        '複数のテキストを設定でき、大文字と小文字を区別しない、それぞれをカンマ (,) で区切ります',\r\n        '대소문자를 구분하지 않고 여러 텍스트를 설정할 수 있으며 각각을 쉼표(,)로 구분할 수 있습니다.',\r\n    ],\r\n    _日期时间格式错误: [\r\n        '日期时间格式错误',\r\n        '日期時間格式錯誤',\r\n        'wrong datetime format',\r\n        '間違った日時形式',\r\n        '잘못된 날짜/시간 형식',\r\n    ],\r\n    _跳过文章因为: [\r\n        '跳过 {} 因为：',\r\n        '跳過 {} 因為：',\r\n        'Skip {} because: ',\r\n        '{} をスキップする理由: ',\r\n        '다음과 같은 이유로 {}를 건너뜁니다.',\r\n    ],\r\n    _优化性能和用户体验: [\r\n        '优化性能和用户体验。',\r\n        '最佳化效能和使用者體驗。',\r\n        'Optimize performance and user experience.',\r\n        'パフォーマンスとユーザー エクスペリエンスを最適化します。',\r\n        '성능과 사용자 경험을 최적화합니다.',\r\n    ],\r\n    _修复bug: ['修复 bug', '修復 bug', 'fix bugs', 'バグを修正', '버그 수정'],\r\n    _不支持的浏览器: [\r\n        '你的浏览器不能正常使用这个扩展程序，主要原因可能是浏览器内核版本太低，或者存在兼容性问题。<br>建议您更换成最新版本的 Chrome 或 Edge 浏览器。',\r\n        '你的瀏覽器不能正常使用這個擴充套件程式，主要原因可能是瀏覽器核心版本太低，或者存在相容性問題。<br>建議您更換成最新版本的 Chrome 或 Edge 瀏覽器。',\r\n        'Your browser cannot use this extension properly. The main reason may be that the browser kernel version is too low, or there is a compatibility problem. <br>We recommend that you switch to the latest version of Chrome or Edge.',\r\n        'お使いのブラウザでは、この拡張機能を正しく使用できません。 主な理由としては、ブラウザのカーネル バージョンが低すぎるか、互換性の問題がある可能性があります。 <br>最新バージョンの Chrome または Edge に切り替えることをお勧めします。',\r\n        '브라우저에서 이 확장 프로그램을 제대로 사용할 수 없습니다. 주된 이유는 브라우저 커널 버전이 너무 낮거나 호환성 문제가 있기 때문일 수 있습니다. <br>최신 버전의 Chrome 또는 Edge로 전환하는 것이 좋습니다.',\r\n    ],\r\n    _新增设置项: [\r\n        '新增设置项',\r\n        '新增設定項目',\r\n        'Added setting items',\r\n        '新たな機能を追加されました',\r\n        '새로운 설정 항목 추가',\r\n    ],\r\n    _新增功能: ['新增功能', '新增功能', 'New feature', '新機能', '새로운 기능'],\r\n    _增加了一些提示: [\r\n        '增加了一些提示',\r\n        '增加了一些提示',\r\n        'Added some tips',\r\n        'いくつかのヒントを追加しました',\r\n        '몇 가지 팁을 추가했습니다.',\r\n    ],\r\n    _user_canceled_tip: [\r\n        `{} 未保存，code：{}。`,\r\n        `{} 未儲存，code：{}。`,\r\n        `{} not saved, code: {}.`,\r\n        `{} 保存されていません。code：{}。`,\r\n        `{} 저장되지 않음, 코드: {}.`,\r\n    ],\r\n    _yandex浏览器的警告: [\r\n        `如果你在 Yandex 浏览器（Android）上使用 Pixiv Fanbox Downloader，请换成 Kiwi 浏览器。<br>\n    因为下载器在最近将会升级到 Manifest version 3，但是 Yandex 浏览器不支持  Manifest version 3， 所以它不能使用新版本的下载器。`,\r\n        `如果你在 Yandex 瀏覽器（Android）上使用 Pixiv Fanbox Downloader，請換成 Kiwi 瀏覽器。<br>\n    因為下載器在最近將會升級到 Manifest version 3，但是 Yandex 瀏覽器不支援  Manifest version 3， 所以它不能使用新版本的下載器。`,\r\n        `If you are using Pixiv Fanbox Downloader on Yandex browser（Android）, please switch to Kiwi browser. <br>\n    Because the downloader will be upgraded to Manifest version 3 in the near future, but Yandex browser does not support Manifest version 3, so it cannot use the new version of the downloader.`,\r\n        `Yandex（Android） ブ Pixiv Fanbox Downloader を使用している場合は、Kiwi ブラウザに切り替えてください。 <br>\n    ダウンローダは近いうちにマニフェスト バージョン 3 にアップグレードされますが、Yandex ブラウザはマニフェスト バージョン 3 をサポートしていないため、新しいバージョンのダウンローダを使用することはできません。`,\r\n        `Yandex Browser(Android)에서 Pixiv Fanbox Downloader를 사용하는 경우 Kiwi 브라우저로 전환하십시오. <br>\n    다운로더는 가까운 시일 내에 Manifest 버전 3으로 업그레이드되지만 Yandex 브라우저는 Manifest 버전 3을 지원하지 않으므로 새 버전의 다운로더를 사용할 수 없습니다.`,\r\n    ],\r\n    _新增命名标记: [\r\n        '新增命名标记',\r\n        '新增命名標記',\r\n        'Add named tag',\r\n        '名前付きタグを追加',\r\n        '명명된 태그 추가',\r\n    ],\r\n};\r\nexport { langText };\r\n","import { EVT } from '../EVT';\r\nimport { Tools } from '../Tools';\r\nimport { formHtml } from '../FormHTML';\r\nimport { settings, setSetting } from '../setting/Settings';\r\nimport { SaveNamingRule } from './SaveNamingRule';\r\nimport { FormSettings } from './FormSettings';\r\nimport { Utils } from '../utils/Utils';\r\nimport { lang } from '../Lang';\r\nimport { options } from './Options';\r\n// 设置表单\r\nclass Form {\r\n    constructor() {\r\n        /**所有的美化表单元素 */\r\n        // 每个美化的 input 控件后面必定有一个 span 元素\r\n        // label 和 子选项区域则不一定有\r\n        this.allBeautifyInput = [];\r\n        /**一些固定格式的帮助元素 */\r\n        this.tips = [\r\n            {\r\n                wrapID: 'tipCreateFolder',\r\n                wrap: document.createElement('span'),\r\n                settingName: 'tipCreateFolder',\r\n            },\r\n        ];\r\n        this.form = Tools.useSlot('form', formHtml);\r\n        lang.register(this.form);\r\n        this.getElements();\r\n        const allOptions = this.form.querySelectorAll('.option');\r\n        options.init(allOptions);\r\n        new SaveNamingRule(this.form.userSetName);\r\n        new FormSettings(this.form);\r\n        this.bindEvents();\r\n    }\r\n    getElements() {\r\n        // 获取所有的美化控件和它们对应的 span 元素\r\n        const allCheckBox = this.form.querySelectorAll('input[type=\"checkbox\"]');\r\n        const allRadio = this.form.querySelectorAll('input[type=\"radio\"]');\r\n        const checkboxAndRadio = [allCheckBox, allRadio];\r\n        for (const arr of checkboxAndRadio) {\r\n            arr.forEach((input) => {\r\n                let subOption = null;\r\n                if (input.classList.contains('checkbox_switch')) {\r\n                    subOption = this.form.querySelector(`.subOptionWrap[data-show=\"${input.name}\"]`);\r\n                }\r\n                this.allBeautifyInput.push({\r\n                    input: input,\r\n                    span: input.nextElementSibling,\r\n                    label: this.form.querySelector(`label[for=\"${input.id}\"]`),\r\n                    subOption: subOption,\r\n                });\r\n            });\r\n        }\r\n        // 获取所有在表单上直接显示的提示元素\r\n        for (const item of this.tips) {\r\n            const wrap = this.form.querySelector('#' + item.wrapID);\r\n            if (wrap) {\r\n                item.wrap = wrap;\r\n            }\r\n        }\r\n    }\r\n    bindEvents() {\r\n        // 为美化的表单控件绑定事件\r\n        for (const item of this.allBeautifyInput) {\r\n            const { input, span } = item;\r\n            // 点击美化元素时，点击真实的 input 控件\r\n            span.addEventListener('click', () => {\r\n                input.click();\r\n            });\r\n            // 当美化元素获得焦点，并且用户按下了回车或空格键时，点击真实的 input 控件\r\n            span.addEventListener('keydown', (event) => {\r\n                if ((event.code === 'Enter' || event.code === 'Space') &&\r\n                    event.target === span) {\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                    input.click();\r\n                }\r\n            });\r\n        }\r\n        // 设置变化或者重置时，重新设置美化状态\r\n        window.addEventListener(EVT.list.settingChange, Utils.debounce(() => {\r\n            this.initFormBeautify();\r\n            this.showTips();\r\n        }, 50));\r\n        // 用户点击“我知道了”按钮之后不再显示对应的提示\r\n        for (const item of this.tips) {\r\n            if (item.wrap) {\r\n                const btn = item.wrap.querySelector('button');\r\n                btn.addEventListener('click', () => {\r\n                    setSetting(item.settingName, false);\r\n                });\r\n            }\r\n        }\r\n        // 选择背景图片\r\n        {\r\n            const el = this.form.querySelector('#selectBG');\r\n            if (el) {\r\n                el.addEventListener('click', () => {\r\n                    EVT.fire('selectBG');\r\n                });\r\n            }\r\n        }\r\n        // 清除背景图片\r\n        {\r\n            const el = this.form.querySelector('#clearBG');\r\n            if (el) {\r\n                el.addEventListener('click', () => {\r\n                    EVT.fire('clearBG');\r\n                });\r\n            }\r\n        }\r\n        // 重置设置\r\n        {\r\n            const el = this.form.querySelector('#resetSettings');\r\n            if (el) {\r\n                el.addEventListener('click', () => {\r\n                    const result = window.confirm(lang.transl('_是否重置设置'));\r\n                    if (result) {\r\n                        EVT.fire('resetSettings');\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        // 导出设置\r\n        {\r\n            const el = this.form.querySelector('#exportSettings');\r\n            if (el) {\r\n                el.addEventListener('click', () => {\r\n                    EVT.fire('exportSettings');\r\n                });\r\n            }\r\n        }\r\n        // 导入设置\r\n        {\r\n            const el = this.form.querySelector('#importSettings');\r\n            if (el) {\r\n                el.addEventListener('click', () => {\r\n                    EVT.fire('importSettings');\r\n                });\r\n            }\r\n        }\r\n        // 显示命名字段提示\r\n        this.form\r\n            .querySelector('.showFileNameTip')\r\n            .addEventListener('click', () => Utils.toggleEl(document.querySelector('.fileNameTip')));\r\n        // 显示日期格式提示\r\n        this.form\r\n            .querySelector('.showDateTip')\r\n            .addEventListener('click', () => Utils.toggleEl(document.querySelector('.dateFormatTip')));\r\n        // 输入框获得焦点时自动选择文本（文件名输入框例外）\r\n        const centerInputs = this.form.querySelectorAll('input[type=text]');\r\n        for (const el of centerInputs) {\r\n            if (el.name !== 'userSetName') {\r\n                el.addEventListener('focus', function () {\r\n                    this.select();\r\n                });\r\n            }\r\n        }\r\n        // 把下拉框的选择项插入到文本框里\r\n        const from = this.form.fileNameSelect;\r\n        const to = this.form.userSetName;\r\n        from.addEventListener('change', () => {\r\n            if (from.value !== 'default') {\r\n                // 把选择项插入到光标位置,并设置新的光标位置\r\n                const position = to.selectionStart;\r\n                to.value =\r\n                    to.value.substring(0, position) +\r\n                        from.value +\r\n                        to.value.substring(position);\r\n                to.selectionStart = position + from.value.length;\r\n                to.selectionEnd = position + from.value.length;\r\n                to.focus();\r\n            }\r\n        });\r\n    }\r\n    // 设置表单里的美化元素的状态\r\n    initFormBeautify() {\r\n        for (const item of this.allBeautifyInput) {\r\n            const { input, span, label, subOption } = item;\r\n            // 重设 label 的高亮状态\r\n            if (label) {\r\n                const method = input.checked ? 'add' : 'remove';\r\n                label.classList[method]('active');\r\n            }\r\n            // 重设子选项区域的显示/隐藏状态\r\n            if (subOption) {\r\n                subOption.style.display = input.checked ? 'inline' : 'none';\r\n            }\r\n        }\r\n    }\r\n    // 是否显示提示\r\n    showTips() {\r\n        for (const item of this.tips) {\r\n            item.wrap.style.display = settings[item.settingName] ? 'block' : 'none';\r\n        }\r\n    }\r\n}\r\nnew Form();\r\n","import { EVT } from '../EVT';\r\nimport { settings, setSetting } from './Settings';\r\nimport { DateFormat } from '../utils/DateFormat';\r\nimport { nameRuleManager } from './NameRuleManager';\r\nclass FormSettings {\r\n    constructor(form) {\r\n        // 没有填写 userSetName 字段，因为这个字段由 nameRuleManager 管理\r\n        this.inputFileds = {\r\n            checkbox: [\r\n                'image',\r\n                'music',\r\n                'video',\r\n                'compressed',\r\n                'ps',\r\n                'other',\r\n                'free',\r\n                'pay',\r\n                'feeSwitch',\r\n                'idRangeSwitch',\r\n                'postDate',\r\n                'saveLink',\r\n                'saveText',\r\n                'autoStartDownload',\r\n                'showAdvancedSettings',\r\n                'bgDisplay',\r\n                'boldKeywords',\r\n                'showNotificationAfterDownloadComplete',\r\n                'zeroPadding',\r\n                'deduplication',\r\n                'savePostCover',\r\n                'unifiedURL',\r\n                'titleMustTextSwitch',\r\n                'titleCannotTextSwitch',\r\n            ],\r\n            text: [\r\n                'fee',\r\n                'idRangeInput',\r\n                'downloadThread',\r\n                'dateFormat',\r\n                'bgOpacity',\r\n                'zeroPaddingLength',\r\n                'titleMustText',\r\n                'titleCannotText',\r\n            ],\r\n            radio: ['idRange', 'bgPositionY', 'userSetLang'],\r\n            textarea: [],\r\n            datetime: ['postDateStart', 'postDateEnd'],\r\n        };\r\n        this.restoreTimer = 0;\r\n        this.form = form;\r\n        nameRuleManager.registerInput(this.form.userSetName);\r\n        this.bindEvents();\r\n        this.restoreFormSettings();\r\n        this.ListenChange();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.settingChange, () => {\r\n            window.clearTimeout(this.restoreTimer);\r\n            this.restoreTimer = window.setTimeout(() => {\r\n                this.restoreFormSettings();\r\n            }, 0);\r\n        });\r\n    }\r\n    // 监听所有输入选项的变化\r\n    // 该函数可执行一次，否则事件会重复绑定\r\n    ListenChange() {\r\n        for (const name of this.inputFileds.text) {\r\n            this.saveTextInput(name);\r\n        }\r\n        for (const name of this.inputFileds.textarea) {\r\n            this.saveTextInput(name);\r\n        }\r\n        for (const name of this.inputFileds.datetime) {\r\n            this.saveTextInput(name);\r\n        }\r\n        for (const name of this.inputFileds.radio) {\r\n            this.saveRadio(name);\r\n        }\r\n        for (const name of this.inputFileds.checkbox) {\r\n            this.saveCheckBox(name);\r\n        }\r\n    }\r\n    // 读取设置，恢复到表单里\r\n    restoreFormSettings() {\r\n        for (const name of this.inputFileds.text) {\r\n            this.restoreString(name);\r\n        }\r\n        for (const name of this.inputFileds.radio) {\r\n            this.restoreString(name);\r\n        }\r\n        for (const name of this.inputFileds.textarea) {\r\n            this.restoreString(name);\r\n        }\r\n        for (const name of this.inputFileds.checkbox) {\r\n            this.restoreBoolean(name);\r\n        }\r\n        for (const name of this.inputFileds.datetime) {\r\n            this.restoreDate(name);\r\n        }\r\n    }\r\n    // ---------------------\r\n    // 处理输入框： change 时保存 value\r\n    saveTextInput(name) {\r\n        const el = this.form[name];\r\n        el.addEventListener('change', () => {\r\n            setSetting(name, el.value);\r\n        });\r\n    }\r\n    // 处理复选框： click 时保存 checked\r\n    saveCheckBox(name) {\r\n        const el = this.form[name];\r\n        el.addEventListener('click', () => {\r\n            setSetting(name, el.checked);\r\n        });\r\n    }\r\n    // 处理单选框： click 时保存 value\r\n    saveRadio(name) {\r\n        const radios = this.form[name];\r\n        for (const radio of radios) {\r\n            radio.addEventListener('click', () => {\r\n                setSetting(name, radio.value);\r\n            });\r\n        }\r\n    }\r\n    // 恢复值为 Boolean 的设置项\r\n    restoreBoolean(name) {\r\n        if (settings[name] !== undefined) {\r\n            this.form[name].checked = settings[name];\r\n        }\r\n    }\r\n    // 恢复值为 string 的设置项\r\n    restoreString(name) {\r\n        if (settings[name] !== undefined) {\r\n            this.form[name].value = settings[name].toString();\r\n        }\r\n    }\r\n    // 恢复日期、时间设置项\r\n    restoreDate(name) {\r\n        if (settings[name] !== undefined) {\r\n            // 把时间戳转换成 input 使用的字符串\r\n            const date = settings[name];\r\n            this.form[name].value = DateFormat.format(date, 'YYYY-MM-DDThh:mm');\r\n        }\r\n    }\r\n}\r\nexport { FormSettings };\r\n","import { Config } from '../Config';\r\nimport { EVT } from '../EVT';\r\nimport { Utils } from '../utils/Utils';\r\nimport { settings, setSetting } from './Settings';\r\n// 管理命名规则\r\n// 在实际使用中，作为 settings.userSetName 的代理\r\n// 其他类必须使用 nameRuleManager.rule 存取器来存取命名规则\r\nclass NameRuleManager {\r\n    constructor() {\r\n        // 命名规则输入框的集合\r\n        this.inputList = [];\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        const evts = [\r\n            EVT.list.settingInitialized,\r\n            EVT.list.resetSettingsEnd,\r\n            EVT.list.pageSwitchedTypeChange,\r\n        ];\r\n        evts.forEach((evt) => {\r\n            window.addEventListener(evt, () => {\r\n                this.setInputValue();\r\n            });\r\n        });\r\n    }\r\n    get rule() {\r\n        return settings.userSetName;\r\n    }\r\n    set rule(str) {\r\n        // 检查传递的命名规则的合法性\r\n        // 替换特殊字符\r\n        str = this.handleUserSetName(str) || Config.defaultNameRule;\r\n        setSetting('userSetName', str);\r\n        this.setInputValue();\r\n    }\r\n    // 注册命名规则输入框\r\n    registerInput(input) {\r\n        this.inputList.push(input);\r\n        this.setInputValue();\r\n        // 保存事件被触发之前的值\r\n        let lastValue = input.value;\r\n        // 给输入框绑定事件\r\n        const evList = ['change', 'focus'];\r\n        // change 事件只对用户手动输入有效\r\n        // 当用户从下拉框添加一个命名标记时，不会触发 change 事件，需要监听 focus 事件\r\n        evList.forEach((evName) => {\r\n            input.addEventListener(evName, () => {\r\n                // 当事件触发时，比较输入框的值是否与事件触发之前发生了变化\r\n                // 如果值没有变化，就什么都不做\r\n                // 对于 change 事件来说，值必然发生了变化，但是 focus 就不一定了\r\n                // 试想：用户修改命名规则为非法的规则，例如输入 111，触发 change 事件之后下载器会提示命名规则非法\r\n                // 然后用户点击输入框（focus 事件）想要修改规则，此时值没有变化，就不应该执行后续代码。如果依然执行后续代码，那么每当用户点击输入框，下载器就会马上显示提示，这导致用户根本没办法在输入框里修改命名规则\r\n                if (input.value === lastValue) {\r\n                    return;\r\n                }\r\n                lastValue = input.value;\r\n                this.rule = input.value;\r\n            });\r\n        });\r\n    }\r\n    // 设置输入框的值为当前命名规则\r\n    setInputValue() {\r\n        const rule = this.rule;\r\n        this.inputList.forEach((input) => {\r\n            input.value = rule;\r\n        });\r\n        if (rule !== settings.userSetName) {\r\n            setSetting('userSetName', rule);\r\n        }\r\n    }\r\n    // 处理用命名规则的非法字符和非法规则\r\n    // 这里不必处理得非常详尽，因为在生成文件名时，还会对结果进行处理\r\n    // 测试用例：在作品页面内设置下面的命名规则，下载器会自动进行更正\r\n    // /{page_tag}/|/{user}////<//{rank}/{px}/{sl}/{page_tag}///{id}-{user}-{user_id}\"\"-?{tags_transl_only}////\r\n    handleUserSetName(str) {\r\n        // 替换命名规则里可能存在的非法字符\r\n        str = Utils.replaceUnsafeStr(str);\r\n        // replaceUnsafeStr 会把斜线 / 替换成全角的斜线 ／，这里再替换回来，否则就不能建立文件夹了\r\n        str = str.replace(/／/g, '/');\r\n        // 处理连续的 /\r\n        str = str.replace(/\\/{2,100}/g, '/');\r\n        // 如果命名规则头部或者尾部是 / 则去掉\r\n        if (str.startsWith('/')) {\r\n            str = str.replace('/', '');\r\n        }\r\n        if (str.endsWith('/')) {\r\n            str = str.substring(0, str.length - 1);\r\n        }\r\n        return str;\r\n    }\r\n}\r\nconst nameRuleManager = new NameRuleManager();\r\nexport { nameRuleManager };\r\n","import { EVT } from '../EVT';\r\nimport { lang } from '../Lang';\r\nimport { settings } from './Settings';\r\n// 控制每个设置的隐藏、显示\r\n// 设置页数/个数的提示文本\r\nclass Options {\r\n    constructor() {\r\n        // 保持显示的选项的 id\r\n        this.whiteList = [2, 21, 51, 13, 16, 17];\r\n        // 某些页面类型需要隐藏某些选项。当调用 hideOption 方法时，把选项 id 保存起来\r\n        // 优先级高于 whiteList\r\n        this.hiddenList = [];\r\n    }\r\n    init(allOption) {\r\n        this.allOption = allOption;\r\n        this.handleShowAdvancedSettings();\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        window.addEventListener(EVT.list.settingChange, (ev) => {\r\n            const data = ev.detail.data;\r\n            if (data.name === 'showAdvancedSettings') {\r\n                this.handleShowAdvancedSettings();\r\n            }\r\n        });\r\n        const list = [\r\n            EVT.list.pageSwitchedTypeNotChange,\r\n            EVT.list.pageSwitchedTypeChange,\r\n        ];\r\n        list.forEach((ev) => {\r\n            window.addEventListener(ev, () => {\r\n                this.hiddenList = [];\r\n                window.setTimeout(() => {\r\n                    this.handleShowAdvancedSettings();\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleShowAdvancedSettings() {\r\n        for (const option of this.allOption) {\r\n            if (option.dataset.no === undefined) {\r\n                continue;\r\n            }\r\n            const no = Number.parseInt(option.dataset.no);\r\n            // 如果需要隐藏高级设置\r\n            if (!settings.showAdvancedSettings) {\r\n                // 如果在白名单中，并且当前页面不需要隐藏它，那么它就是显示的\r\n                if (this.whiteList.includes(no) && !this.hiddenList.includes(no)) {\r\n                    this.showOption([no]);\r\n                }\r\n                // 如果没有在白名单中，或者当前页面需要隐藏它，就隐藏它\r\n                if (!this.whiteList.includes(no) || this.hiddenList.includes(no)) {\r\n                    option.style.display = 'none';\r\n                }\r\n            }\r\n            else {\r\n                // 如果需要显示高级设置，那么只隐藏当前页面需要隐藏的选项\r\n                if (this.hiddenList.includes(no)) {\r\n                    option.style.display = 'none';\r\n                }\r\n                else {\r\n                    this.showOption([no]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 使用编号获取指定选项的元素\r\n    getOption(no) {\r\n        for (const option of this.allOption) {\r\n            if (option.dataset.no === no.toString()) {\r\n                return option;\r\n            }\r\n        }\r\n        throw `Not found this option: ${no}`;\r\n    }\r\n    // 显示或隐藏指定的选项\r\n    setOptionDisplay(no, display) {\r\n        for (const number of no) {\r\n            this.getOption(number).style.display = display;\r\n        }\r\n    }\r\n    // 显示所有选项\r\n    // 在切换不同页面时使用\r\n    showAllOption() {\r\n        for (const el of this.allOption) {\r\n            el.style.display = 'block';\r\n        }\r\n    }\r\n    // 隐藏指定的选项。参数是数组，传递设置项的编号。\r\n    // 注意：由于这个方法会修改 hiddenList，所以它是有副作用的\r\n    // 这个方法只应该在其他类里面使用，在这个类里不要直接调用它\r\n    hideOption(no) {\r\n        this.hiddenList = no;\r\n        this.setOptionDisplay(no, 'none');\r\n    }\r\n    // 显示指定的选项。因为页面无刷新加载，所以一些选项被隐藏后，可能需要再次显示\r\n    showOption(no) {\r\n        this.setOptionDisplay(no, 'block');\r\n    }\r\n    // 设置 “抓取多少作品/页面” 选项的提示和预设值\r\n    setWantPageTip(arg) {\r\n        lang.updateText(this.wantPageEls.text, arg.text);\r\n        this.wantPageEls.wrap.dataset.xztip = arg.tip;\r\n        this.wantPageEls.wrap.dataset.tip = lang.transl(arg.tip);\r\n        // rangTip 可能需要翻译\r\n        if (arg.rangTip.startsWith('_')) {\r\n            lang.updateText(this.wantPageEls.rangTip, arg.rangTip);\r\n        }\r\n        else {\r\n            // 也可能直接传递了字符串，不需要翻译\r\n            lang.updateText(this.wantPageEls.rangTip, '');\r\n            this.wantPageEls.rangTip.textContent = arg.rangTip;\r\n        }\r\n    }\r\n}\r\nconst options = new Options();\r\nexport { options };\r\n","import { EVT } from '../EVT';\r\nimport { Tools } from '../Tools';\r\nimport { lang } from '../Lang';\r\nimport { settings, setSetting } from './Settings';\r\nimport { toast } from '../Toast';\r\nimport { nameRuleManager } from './NameRuleManager';\r\n// 保存和加载命名规则列表\r\nclass SaveNamingRule {\r\n    constructor(ruleInput) {\r\n        this.limit = 20; // 最大保存数量\r\n        this._show = false; // 是否显示列表\r\n        this.html = `\n  <div class=\"saveNamingRuleWrap\">\n  <button class=\"nameSave textButton has_tip\" type=\"button\" data-xztip=\"_保存命名规则提示\" data-xztext=\"_保存\"></button>\n  <button class=\"nameLoad textButton\" type=\"button\" data-xztext=\"_加载\"></button>\n  <ul class=\"namingRuleList\"></ul>\n  </div>`;\r\n        this.ruleInput = ruleInput;\r\n        Tools.clearSlot('saveNamingRule');\r\n        const wrap = Tools.useSlot('saveNamingRule', this.html);\r\n        lang.register(wrap);\r\n        this.saveBtn = wrap.querySelector('button.nameSave');\r\n        this.loadBtn = wrap.querySelector('button.nameLoad');\r\n        this.listWrap = wrap.querySelector('ul.namingRuleList');\r\n        this.createList();\r\n        this.bindEvents();\r\n    }\r\n    set show(boolean) {\r\n        this._show = boolean;\r\n        boolean ? this.showListWrap() : this.hideListWrap();\r\n    }\r\n    get show() {\r\n        return this._show;\r\n    }\r\n    bindEvents() {\r\n        this.saveBtn.addEventListener('click', () => {\r\n            this.add(this.ruleInput.value);\r\n        });\r\n        this.loadBtn.addEventListener('click', () => {\r\n            this.show = !this.show;\r\n        });\r\n        this.listWrap.addEventListener('mouseleave', () => {\r\n            this.show = false;\r\n        });\r\n        // 设置发生变化时重新创建列表\r\n        window.addEventListener(EVT.list.settingChange, (ev) => {\r\n            const data = ev.detail.data;\r\n            if (data.name === 'namingRuleList') {\r\n                this.createList();\r\n            }\r\n        });\r\n    }\r\n    add(rule) {\r\n        if (settings.namingRuleList.length === this.limit) {\r\n            this.delete(0);\r\n        }\r\n        // 如果这个规则已存在，不会重复添加它\r\n        if (!settings.namingRuleList.includes(rule)) {\r\n            const list = Array.from(settings.namingRuleList);\r\n            list.push(rule);\r\n            setSetting('namingRuleList', list);\r\n        }\r\n        toast.success(lang.transl('_已保存命名规则'));\r\n    }\r\n    delete(index) {\r\n        const list = Array.from(settings.namingRuleList);\r\n        list.splice(index, 1);\r\n        setSetting('namingRuleList', list);\r\n    }\r\n    select(rule) {\r\n        this.ruleInput.value = rule;\r\n        nameRuleManager.rule = rule;\r\n    }\r\n    createList() {\r\n        const htmlArr = [];\r\n        for (let i = 0; i < settings.namingRuleList.length; i++) {\r\n            const html = `<li>\n      <span class=\"rule\">${settings.namingRuleList[i]}</span>\n      <button class=\"delete textButton\" type=\"button\" data-index=\"${i}\">×</button>\n    </li>`;\r\n            htmlArr.push(html);\r\n        }\r\n        if (settings.namingRuleList.length === 0) {\r\n            htmlArr.push(`<li><i>&nbsp;&nbsp;&nbsp;&nbsp;no data</i></li>`);\r\n        }\r\n        this.listWrap.innerHTML = htmlArr.join('');\r\n        const ruleEls = this.listWrap.querySelectorAll('.rule');\r\n        for (const el of ruleEls) {\r\n            el.addEventListener('click', () => {\r\n                this.select(el.textContent);\r\n                this.show = false;\r\n            });\r\n        }\r\n        const deleteEls = this.listWrap.querySelectorAll('.delete');\r\n        for (const el of deleteEls) {\r\n            el.addEventListener('click', () => {\r\n                const index = parseInt(el.dataset.index);\r\n                this.delete(index);\r\n            });\r\n        }\r\n    }\r\n    showListWrap() {\r\n        this.listWrap.style.display = 'block';\r\n    }\r\n    hideListWrap() {\r\n        this.listWrap.style.display = 'none';\r\n    }\r\n}\r\nexport { SaveNamingRule };\r\n","// settings 保存了下载器的所有设置项\r\n// 获取设置项的值：\r\n// settings[name]\r\n// 修改设置项的值：\r\n// setSetting(name, value)\r\n// 本模块会触发 3 个事件：\r\n// EVT.list.settingChange\r\n// 当任意一个设置项被赋值时触发（本模块不会区分值是否发生了变化）。这是最常用的事件。\r\n// 事件的参数里会传递这个设置项的名称和值，格式如：\r\n// {name: string, value: any}\r\n// 如果某个模块要监听特定的设置项，应该使用参数的 name 来判断触发事件的设置项是否是自己需要的设置项\r\n// 如果不依赖于特定设置项，则应该考虑使用节流或者防抖来限制事件监听器的执行频率，防止造成严重的性能问题\r\n// EVT.list.settingInitialized\r\n// 当设置初始化完毕后（恢复保存的设置之后）触发。这个事件在生命周期里只会触发一次。\r\n// 过程中，每个设置项都会触发一次 settingChange 事件\r\n// EVT.list.resetSettingsEnd\r\n// 重置设置之后触发\r\n// 导入设置之后触发\r\n// 过程中，每个设置项都会触发一次 settingChange 事件\r\n// 如果打开了多个标签页，每个页面的 settings 数据是互相独立的，在一个页面里修改设置不会影响另一个页面里的设置。\r\n// 但是持久化保存的数据只有一份：最后一次设置变更是在哪个页面发生的，就保存哪个页面的 settings 数据。\r\nimport { EVT } from '../EVT';\r\nimport { Utils } from '../utils/Utils';\r\nimport { msgBox } from '../MsgBox';\r\nimport { Config } from '../Config';\r\nimport { toast } from '../Toast';\r\nimport { lang } from '../Lang';\r\nclass Settings {\r\n    constructor() {\r\n        // 默认设置\r\n        this.defaultSettings = {\r\n            image: true,\r\n            music: true,\r\n            video: true,\r\n            compressed: true,\r\n            ps: true,\r\n            other: true,\r\n            free: true,\r\n            pay: true,\r\n            feeSwitch: false,\r\n            fee: 500,\r\n            idRangeSwitch: false,\r\n            idRangeInput: 0,\r\n            idRange: '>',\r\n            postDate: false,\r\n            postDateStart: 946684800000,\r\n            postDateEnd: 4102444800000,\r\n            saveLink: true,\r\n            saveText: false,\r\n            userSetName: '{user}/{date}-{title}/{index}',\r\n            autoStartDownload: true,\r\n            downloadThread: 3,\r\n            dateFormat: 'YYYY-MM-DD',\r\n            savePostCover: true,\r\n            userSetLang: 'auto',\r\n            tipCreateFolder: true,\r\n            whatIsNewFlag: 'xuejian&saber',\r\n            showAdvancedSettings: false,\r\n            bgDisplay: false,\r\n            bgOpacity: 60,\r\n            bgPositionY: 'center',\r\n            boldKeywords: true,\r\n            namingRuleList: [],\r\n            showNotificationAfterDownloadComplete: false,\r\n            zeroPadding: false,\r\n            zeroPaddingLength: 3,\r\n            deduplication: false,\r\n            showHowToUse: true,\r\n            unifiedURL: true,\r\n            titleMustTextSwitch: false,\r\n            titleMustText: [],\r\n            titleCannotTextSwitch: false,\r\n            titleCannotText: [],\r\n        };\r\n        this.allSettingKeys = Object.keys(this.defaultSettings);\r\n        // 值为浮点数的选项\r\n        this.floatNumberKey = [];\r\n        // 值为整数的选项不必单独列出\r\n        // 值为数字数组的选项\r\n        this.numberArrayKeys = [];\r\n        // 值为字符串数组的选项\r\n        this.stringArrayKeys = [\r\n            'namingRuleList',\r\n            'titleMustText',\r\n            'titleCannotText',\r\n        ];\r\n        // 以默认设置作为初始设置\r\n        this.settings = Utils.deepCopy(this.defaultSettings);\r\n        this.store = Utils.debounce(() => {\r\n            // chrome.storage.local 的储存上限是 5 MiB（5242880 Byte）\r\n            chrome.storage.local.set({\r\n                [Config.settingStoreName]: this.settings,\r\n            });\r\n        }, 50);\r\n        this.restore();\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        // 当设置发生变化时进行本地存储\r\n        window.addEventListener(EVT.list.settingChange, () => {\r\n            this.store();\r\n        });\r\n        window.addEventListener(EVT.list.resetSettings, () => {\r\n            this.reset();\r\n        });\r\n        window.addEventListener(EVT.list.exportSettings, () => {\r\n            this.exportSettings();\r\n        });\r\n        window.addEventListener(EVT.list.importSettings, () => {\r\n            this.importSettings();\r\n        });\r\n    }\r\n    // 读取恢复设置\r\n    restore() {\r\n        let restoreData = this.defaultSettings;\r\n        // 首先从 chrome.storage 获取配置\r\n        chrome.storage.local.get(Config.settingStoreName, (result) => {\r\n            if (result[Config.settingStoreName]) {\r\n                restoreData = result[Config.settingStoreName];\r\n            }\r\n            else {\r\n                // 如无数据则尝试从 localStorage 获取配置，因为旧版本的配置储存在 localStorage 中\r\n                const savedSettings = localStorage.getItem(Config.settingStoreName);\r\n                if (savedSettings) {\r\n                    restoreData = JSON.parse(savedSettings);\r\n                }\r\n            }\r\n            this.assignSettings(restoreData);\r\n            EVT.fire('settingInitialized');\r\n        });\r\n    }\r\n    // 接收整个设置项，通过循环将其更新到 settings 上\r\n    // 循环设置而不是整个替换的原因：\r\n    // 1. 进行类型转换，如某些设置项是 number ，但是数据来源里是 string，setSetting 可以把它们转换到正确的类型\r\n    // 2. 某些选项在旧版本里没有，所以不能用旧的设置整个覆盖\r\n    assignSettings(data) {\r\n        const origin = Utils.deepCopy(data);\r\n        for (const [key, value] of Object.entries(origin)) {\r\n            this.setSetting(key, value);\r\n        }\r\n    }\r\n    exportSettings() {\r\n        const blob = Utils.json2Blob(this.settings);\r\n        const url = URL.createObjectURL(blob);\r\n        Utils.downloadFile(url, Config.appName + ` Settings.json`);\r\n        toast.success(lang.transl('_导出成功'));\r\n    }\r\n    async importSettings() {\r\n        const loadedJSON = (await Utils.loadJSONFile().catch((err) => {\r\n            return msgBox.error(err);\r\n        }));\r\n        if (!loadedJSON) {\r\n            return;\r\n        }\r\n        // 检查是否存在设置里的属性\r\n        if (loadedJSON.downloadThread === undefined) {\r\n            return msgBox.error(lang.transl('_格式错误'));\r\n        }\r\n        // 开始恢复导入的设置\r\n        this.reset(loadedJSON);\r\n        toast.success(lang.transl('_导入成功'), {\r\n            position: 'center',\r\n        });\r\n    }\r\n    // 重置设置 或者 导入设置\r\n    // 可选参数：传递一份设置数据，用于从配置文件导入，恢复设置\r\n    reset(data) {\r\n        this.assignSettings(data ? data : this.defaultSettings);\r\n        EVT.fire('resetSettingsEnd');\r\n    }\r\n    tipError(key) {\r\n        msgBox.error(`${key}: Invalid value`);\r\n    }\r\n    // 更改设置项\r\n    // 其他模块应该通过这个方法更改设置\r\n    // 这里面有一些类型转换的代码，主要目的：\r\n    // 1. 兼容旧版本的设置。读取旧版本的设置时，将其转换成新版本的设置。例如某个设置在旧版本里是 string 类型，值为 'a,b,c'。新版本里是 string[] 类型，这里会自动将其转换成 ['a','b','c']\r\n    // 2. 减少额外操作。例如某个设置的类型为 string[]，其他模块可以传入 string 类型的值如 'a,b,c'，而不必先把它转换成 string[]\r\n    setSetting(key, value) {\r\n        if (!this.allSettingKeys.includes(key)) {\r\n            return;\r\n        }\r\n        const keyType = typeof this.defaultSettings[key];\r\n        const valueType = typeof value;\r\n        // 将传入的值转换成选项对应的类型\r\n        if (keyType === 'string' && valueType !== 'string') {\r\n            value = value.toString();\r\n        }\r\n        if (keyType === 'number' && valueType !== 'number') {\r\n            // 时间是需要特殊处理的 number 类型\r\n            if (key === 'postDateStart' || key == 'postDateEnd') {\r\n                if (valueType === 'string') {\r\n                    if (value === '') {\r\n                        // 如果日期是空字符串，则替换为默认值\r\n                        value = this.defaultSettings[key];\r\n                    }\r\n                    else {\r\n                        // 把日期字符串转换成时间戳\r\n                        const date = new Date(value);\r\n                        value = date.getTime();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // 处理普通的 number 类型\r\n                if (this.floatNumberKey.includes(key)) {\r\n                    value = Number.parseFloat(value);\r\n                }\r\n                else {\r\n                    value = Number.parseInt(value);\r\n                }\r\n            }\r\n            if (isNaN(value)) {\r\n                return this.tipError(key);\r\n            }\r\n        }\r\n        if (keyType === 'boolean' && valueType !== 'boolean') {\r\n            value = !!value;\r\n        }\r\n        if (key === 'downloadThread' && value > Config.downloadThreadMax) {\r\n            value = Config.downloadThreadMax;\r\n        }\r\n        // 处理数组类型的值\r\n        if (Array.isArray(this.defaultSettings[key])) {\r\n            if (this.stringArrayKeys.includes(key)) {\r\n                // 字符串转换成 string[]\r\n                if (valueType === 'string') {\r\n                    value = Utils.string2array(value);\r\n                }\r\n            }\r\n            if (this.numberArrayKeys.includes(key)) {\r\n                // 把数组转换成 number[]\r\n                if (Array.isArray(value)) {\r\n                    value = value.map((val) => {\r\n                        if (typeof val !== 'number') {\r\n                            return Number(val);\r\n                        }\r\n                        else {\r\n                            return val;\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        // 更改设置\r\n        ;\r\n        this.settings[key] = value;\r\n        // 触发设置变化的事件\r\n        EVT.fire('settingChange', { name: key, value: value });\r\n    }\r\n}\r\nconst self = new Settings();\r\nconst settings = self.settings;\r\nconst setSetting = self.setSetting.bind(self);\r\nexport { settings, setSetting };\r\n","// 格式化日期（和时间）\r\nclass DateFormat {\r\n    // format 参数可以由以下格式组合：\r\n    /*\r\n    YYYY\r\n    YY\r\n    MM\r\n    MMM\r\n    MMMM\r\n    DD\r\n    hh\r\n    mm\r\n    ss\r\n    */\r\n    // 区分大小写；可以添加空格或其他符号；不要使用上面未包含的格式。\r\n    // 参考资料：\r\n    // https://www.w3.org/TR/NOTE-datetime\r\n    // https://en.wikipedia.org/wiki/Date_format_by_country\r\n    static format(date, format = 'YYYY-MM-DD') {\r\n        // 生成年、月、日、时、分、秒\r\n        const _date = new Date(date);\r\n        const YYYY = _date.getFullYear().toString();\r\n        const YY = YYYY.substring(YYYY.length - 2, YYYY.length);\r\n        const MM = (_date.getMonth() + 1).toString().padStart(2, '0');\r\n        const MMM = this.months[_date.getMonth()];\r\n        const MMMM = this.Months[_date.getMonth()];\r\n        const DD = _date.getDate().toString().padStart(2, '0');\r\n        const hh = _date.getHours().toString().padStart(2, '0');\r\n        const mm = _date.getMinutes().toString().padStart(2, '0');\r\n        const ss = _date.getSeconds().toString().padStart(2, '0');\r\n        // 对格式字符串进行替换\r\n        let r = format;\r\n        r = r.replace('YYYY', YYYY);\r\n        r = r.replace('YY', YY);\r\n        r = r.replace('MMMM', MMMM);\r\n        r = r.replace('MMM', MMM);\r\n        r = r.replace('MM', MM);\r\n        r = r.replace('DD', DD);\r\n        r = r.replace('hh', hh);\r\n        r = r.replace('mm', mm);\r\n        r = r.replace('ss', ss);\r\n        return r;\r\n    }\r\n}\r\nDateFormat.months = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sept',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec',\r\n];\r\nDateFormat.Months = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n];\r\nexport { DateFormat };\r\n","// 封装操作 IndexedDB 的一些公共方法，仅满足本程序使用，并不完善\r\nclass IndexedDB {\r\n    async open(DBName, DBVer, onUpgrade) {\r\n        return new Promise((resolve, reject) => {\r\n            const request = indexedDB.open(DBName, DBVer);\r\n            request.onupgradeneeded = (ev) => {\r\n                if (onUpgrade) {\r\n                    onUpgrade(request.result);\r\n                }\r\n            };\r\n            request.onsuccess = (ev) => {\r\n                this.db = request.result;\r\n                resolve(request.result);\r\n            };\r\n            request.onerror = (ev) => {\r\n                console.error('open indexDB failed');\r\n                console.trace();\r\n                reject(ev);\r\n            };\r\n        });\r\n    }\r\n    async add(storeNames, data) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.db === undefined) {\r\n                reject('Database is not defined');\r\n                return;\r\n            }\r\n            const r = this.db\r\n                .transaction(storeNames, 'readwrite')\r\n                .objectStore(storeNames)\r\n                .add(data);\r\n            r.onsuccess = (ev) => {\r\n                resolve(ev);\r\n            };\r\n            r.onerror = (ev) => {\r\n                console.error(`add failed in ${storeNames}`, data);\r\n                console.trace();\r\n                reject(ev);\r\n            };\r\n        });\r\n    }\r\n    async put(storeNames, data) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.db === undefined) {\r\n                reject('Database is not defined');\r\n                return;\r\n            }\r\n            const r = this.db\r\n                .transaction(storeNames, 'readwrite')\r\n                .objectStore(storeNames)\r\n                .put(data);\r\n            r.onsuccess = (ev) => {\r\n                resolve(ev);\r\n            };\r\n            r.onerror = (ev) => {\r\n                console.error('put failed');\r\n                console.trace();\r\n                reject(ev);\r\n            };\r\n        });\r\n    }\r\n    // 向一个存储库中批量添加数据\r\n    async batchAddData(storeName, dataList, key) {\r\n        return new Promise(async (resolve, reject) => {\r\n            var _a;\r\n            if (dataList.length === 0) {\r\n                resolve();\r\n            }\r\n            // 获取已存在的 key\r\n            const existedKeys = (await this.getAllKeys(storeName));\r\n            // 使用事务\r\n            const tr = (_a = this.db) === null || _a === void 0 ? void 0 : _a.transaction(storeName, 'readwrite');\r\n            if (!tr) {\r\n                throw new Error(`transaction ${storeName} is undefined`);\r\n            }\r\n            const store = tr.objectStore(storeName);\r\n            tr.oncomplete = () => {\r\n                resolve();\r\n            };\r\n            tr.onerror = (err) => {\r\n                console.error(err);\r\n                reject(err);\r\n            };\r\n            async function insert(data) {\r\n                return new Promise((resolve, reject) => {\r\n                    if (existedKeys.includes(data[key])) {\r\n                        resolve();\r\n                    }\r\n                    else {\r\n                        const request = store.add(data);\r\n                        request.onsuccess = () => {\r\n                            resolve();\r\n                        };\r\n                        request.onerror = (err) => {\r\n                            reject(err);\r\n                        };\r\n                    }\r\n                });\r\n            }\r\n            for (const data of dataList) {\r\n                await insert(data);\r\n            }\r\n        });\r\n    }\r\n    // 如果没有找到对应的记录，则返回 null\r\n    async get(storeNames, key, index) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.db === undefined) {\r\n                reject('Database is not defined');\r\n                return;\r\n            }\r\n            const store = this.db\r\n                .transaction(storeNames, 'readonly')\r\n                .objectStore(storeNames);\r\n            let r;\r\n            if (index !== undefined) {\r\n                const i = store.index(index);\r\n                r = i.get(key);\r\n            }\r\n            else {\r\n                r = store.get(key);\r\n            }\r\n            r.onsuccess = (ev) => {\r\n                const data = r.result;\r\n                resolve(data ? data : null);\r\n            };\r\n            r.onerror = (ev) => {\r\n                console.error('get failed');\r\n                console.trace();\r\n                reject(ev);\r\n            };\r\n        });\r\n    }\r\n    async getAll(storeNames) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.db === undefined) {\r\n                reject('Database is not defined');\r\n                return;\r\n            }\r\n            const r = this.db\r\n                .transaction(storeNames, 'readwrite')\r\n                .objectStore(storeNames)\r\n                .getAll();\r\n            r.onsuccess = (ev) => {\r\n                const data = r.result;\r\n                if (data) {\r\n                    resolve(data);\r\n                }\r\n                resolve(data ? data : null);\r\n            };\r\n            r.onerror = (ev) => {\r\n                console.error('getAll failed');\r\n                console.trace();\r\n                reject(ev);\r\n            };\r\n        });\r\n    }\r\n    async getAllKeys(storeNames) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.db === undefined) {\r\n                reject('Database is not defined');\r\n                return;\r\n            }\r\n            const r = this.db\r\n                .transaction(storeNames, 'readonly')\r\n                .objectStore(storeNames)\r\n                .getAllKeys();\r\n            r.onsuccess = (ev) => {\r\n                const data = r.result;\r\n                resolve(data ? data : null);\r\n            };\r\n            r.onerror = (ev) => {\r\n                console.error('getAllKeys failed');\r\n                console.trace();\r\n                reject(ev);\r\n            };\r\n        });\r\n    }\r\n    async delete(storeNames, key) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.db === undefined) {\r\n                reject('Database is not defined');\r\n                return;\r\n            }\r\n            const r = this.db\r\n                .transaction(storeNames, 'readwrite')\r\n                .objectStore(storeNames)\r\n                .delete(key);\r\n            r.onsuccess = (ev) => {\r\n                resolve(ev);\r\n            };\r\n            r.onerror = (ev) => {\r\n                console.error('delete failed');\r\n                console.trace();\r\n                reject(ev);\r\n            };\r\n        });\r\n    }\r\n    async clear(storeNames) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.db === undefined) {\r\n                reject('Database is not defined');\r\n                return;\r\n            }\r\n            const r = this.db\r\n                .transaction(storeNames, 'readwrite')\r\n                .objectStore(storeNames)\r\n                .clear();\r\n            r.onsuccess = (ev) => {\r\n                resolve();\r\n            };\r\n            r.onerror = (ev) => {\r\n                console.error('clear failed');\r\n                console.trace();\r\n                reject(ev);\r\n            };\r\n        });\r\n    }\r\n    async openCursor(storeNames, CB) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.db === undefined) {\r\n                reject('Database is not defined');\r\n                return;\r\n            }\r\n            const r = this.db\r\n                .transaction(storeNames)\r\n                .objectStore(storeNames)\r\n                .openCursor();\r\n            r.onsuccess = (ev) => {\r\n                CB(r.result);\r\n                resolve(); // 这个 resolve 会在 cb 执行一次之后就触发\r\n            };\r\n            r.onerror = (ev) => {\r\n                console.error('openCursor failed');\r\n                console.trace();\r\n                reject(ev);\r\n            };\r\n        });\r\n    }\r\n}\r\nexport { IndexedDB };\r\n","class Utils {\r\n    // reg 预先创建，而不是运行时创建，因为运行时重复创建太多次了\r\n    // 用正则去掉不安全的字符\r\n    static replaceUnsafeStr(str) {\r\n        str = str.replace(this.unsafeStr, '');\r\n        // 把一些特殊字符替换成全角字符\r\n        for (let index = 0; index < this.fullWidthDict.length; index++) {\r\n            const rule = this.fullWidthDict[index];\r\n            const reg = new RegExp(rule[0], 'g');\r\n            str = str.replace(reg, rule[1]);\r\n        }\r\n        return str;\r\n    }\r\n    /** 检查并处理 Windows 保留文件名。\r\n     * 如果不传递可选参数，则将其替换为空字符串。\r\n     * 如果传递了可选参数，则在其后添加传递的可选参数的值 */\r\n    static handleWindowsReservedName(str, addStr) {\r\n        if (this.windowsReservedNames.includes(str)) {\r\n            if (addStr) {\r\n                return str + addStr;\r\n            }\r\n            else {\r\n                return '';\r\n            }\r\n        }\r\n        else {\r\n            return str;\r\n        }\r\n    }\r\n    // 对象深拷贝\r\n    static deepCopy(data) {\r\n        if (data === null || typeof data !== 'object') {\r\n            return data;\r\n        }\r\n        const result = (Array.isArray(data) ? [] : {});\r\n        for (const [key, value] of Object.entries(data)) {\r\n            result[key] =\r\n                data === null || typeof data !== 'object' ? value : this.deepCopy(value);\r\n        }\r\n        return result;\r\n    }\r\n    // 字符串分割成数组\r\n    static string2array(str) {\r\n        str = str.replace(/\\n/g, ''); // textarea 的值可能会存在换行符\r\n        const temp = str.trim().split(',');\r\n        const result = [];\r\n        for (const str of temp) {\r\n            if (str !== '') {\r\n                result.push(str.trim());\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    // 依据对象某个属性的值（视为数字）来排序对象数组。默认降序排列\r\n    static sortByProperty(key, order = 'desc') {\r\n        return function (a, b) {\r\n            // 排序的内容有时可能是字符串，需要转换成数字排序\r\n            const value1 = typeof a[key] === 'number' ? a[key] : parseFloat(a[key]);\r\n            const value2 = typeof b[key] === 'number' ? b[key] : parseFloat(b[key]);\r\n            if (value2 < value1) {\r\n                return order === 'desc' ? -1 : 1;\r\n            }\r\n            else if (value2 > value1) {\r\n                return order === 'desc' ? 1 : -1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        };\r\n    }\r\n    // 创建 input 元素选择 json 文件\r\n    static async loadJSONFile() {\r\n        return new Promise((resolve, reject) => {\r\n            const i = document.createElement('input');\r\n            i.setAttribute('type', 'file');\r\n            i.setAttribute('accept', 'application/json');\r\n            i.onchange = () => {\r\n                if (i.files && i.files.length > 0) {\r\n                    // 读取文件内容\r\n                    const file = new FileReader();\r\n                    file.readAsText(i.files[0]);\r\n                    file.onload = () => {\r\n                        const str = file.result;\r\n                        let result;\r\n                        try {\r\n                            result = JSON.parse(str);\r\n                            // if((result as any).constructor !== Object){\r\n                            // 允许是对象 {} 或者数组 []\r\n                            if (result === null || typeof result !== 'object') {\r\n                                const msg = 'Data is not an object!';\r\n                                return reject(new Error(msg));\r\n                            }\r\n                            return resolve(result);\r\n                        }\r\n                        catch (error) {\r\n                            const msg = 'JSON parse error!';\r\n                            return reject(new Error(msg));\r\n                        }\r\n                    };\r\n                }\r\n            };\r\n            i.click();\r\n        });\r\n    }\r\n    // 创建 input 元素选择文件\r\n    static async selectFile(accept) {\r\n        return new Promise((resolve, reject) => {\r\n            const i = document.createElement('input');\r\n            i.setAttribute('type', 'file');\r\n            if (accept) {\r\n                i.setAttribute('accept', accept);\r\n            }\r\n            i.onchange = () => {\r\n                if (i.files && i.files.length > 0) {\r\n                    return resolve(i.files);\r\n                }\r\n                else {\r\n                    return reject();\r\n                }\r\n            };\r\n            i.click();\r\n        });\r\n    }\r\n    // 通过创建 a 标签来下载文件\r\n    static downloadFile(url, fileName) {\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = fileName;\r\n        a.click();\r\n    }\r\n    // 从 url 中获取指定的查询字段的值\r\n    // 注意：返回值经过 encodeURIComponent 编码！\r\n    static getURLSearchField(url, query) {\r\n        const result = new URL(url).searchParams.get(query);\r\n        if (result !== null) {\r\n            return encodeURIComponent(result);\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    /**获取 URL path 中，某个路径名称后面的字符串。适用于符合 RESTful API 风格的路径\r\n     *\r\n     * 注意：传入的是 path，而不是整个 URL\r\n     */\r\n    // 例如：\r\n    // https://www.pixiv.net/users/27482064/following/%E9%83%A8%E5%88%86%E5%96%9C%E6%AC%A2\r\n    // 查询 'users' 返回 '27482064'\r\n    // 因为 location.pathname 传入的字符串是浏览器自动编码过的，所以返回的字符串也是编码过的\r\n    static getURLPathField(path, query) {\r\n        const array = path.split('/');\r\n        const index = array.findIndex((str) => str === query);\r\n        if (index === -1) {\r\n            return '';\r\n        }\r\n        return array[index + 1] || '';\r\n    }\r\n    // 切换 DOM 元素的可见性\r\n    // 第二个参数设置显示时的 display，默认是 block，如果要设置为其他类型，则需要指定第二个参数\r\n    static toggleEl(el, showDisplay = 'block') {\r\n        el.style.display = el.style.display === showDisplay ? 'none' : showDisplay;\r\n    }\r\n    // 动态添加 css 样式\r\n    static addStyle(css) {\r\n        const e = document.createElement('style');\r\n        e.innerHTML = css;\r\n        document.body.append(e);\r\n    }\r\n    // 加载一个图片，当 onload 事件发生之后返回 img 元素\r\n    static async loadImg(url) {\r\n        return new Promise((resolve, reject) => {\r\n            const img = new Image();\r\n            img.src = url;\r\n            img.onload = function () {\r\n                resolve(img);\r\n            };\r\n            img.onerror = () => {\r\n                reject(new Error(`Load image error! url: ${url}`));\r\n            };\r\n        });\r\n    }\r\n    /**JSON 转换成 Blob 对象。如果数据量可能比较大，则不应该使用这个方法 */\r\n    static json2Blob(data) {\r\n        const str = JSON.stringify(data, null, 2);\r\n        const blob = new Blob([str], { type: 'application/json' });\r\n        return blob;\r\n    }\r\n    /**JSON 转换成 Blob 对象。可以处理更大的数据量 */\r\n    static json2BlobSafe(data) {\r\n        // 在这个数组里储存数组字面量\r\n        let result = [];\r\n        // 添加数组的开始符号\r\n        result.push('[');\r\n        // 循环添加每一项数据\r\n        for (const item of data) {\r\n            result.push(JSON.stringify(item));\r\n            result.push(',');\r\n        }\r\n        // 删除最后一个分隔符，否则会导致格式错误\r\n        result.pop();\r\n        // 添加数组的结束符号\r\n        result.push(']');\r\n        // 创建 blob 对象\r\n        const blob = new Blob(result, { type: 'application/json' });\r\n        result = [];\r\n        return blob;\r\n    }\r\n    /**防抖 */\r\n    static debounce(func, wait) {\r\n        // 默认的定时器 id 不能使用有意义的数字，否则 clearTimeout 可能会错误的清除其他定时器\r\n        let timer = undefined;\r\n        const context = this;\r\n        return function () {\r\n            const args = arguments;\r\n            window.clearTimeout(timer);\r\n            timer = window.setTimeout(func.bind(context, ...args), wait);\r\n        };\r\n    }\r\n    /**节流 */\r\n    static throttle(func, delay) {\r\n        let time = 0;\r\n        const context = this;\r\n        return function () {\r\n            const args = arguments;\r\n            const now = new Date().getTime();\r\n            if (now - time >= delay) {\r\n                time = now;\r\n                return func.apply(context, args);\r\n            }\r\n        };\r\n    }\r\n    /**用 URL 里的后缀名替换 originName 的后缀名\r\n     *\r\n     * 例如传入参数 123.txt, https://.../123.jpg\r\n     *\r\n     * 返回 123.jpg\r\n     */\r\n    static replaceSuffix(originName, url) {\r\n        const nameArray = originName.split('.');\r\n        const urlArray = url.split('.');\r\n        nameArray[nameArray.length - 1] = urlArray[urlArray.length - 1];\r\n        return nameArray.join('.');\r\n    }\r\n    /**获取后缀名 */\r\n    static getSuffix(name) {\r\n        const nameArray = name.split('.');\r\n        return nameArray[nameArray.length - 1];\r\n    }\r\n}\r\n// 不安全的字符，这里多数是控制字符，需要替换掉\r\nUtils.unsafeStr = new RegExp(/[\\u0001-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0605\\u061c\\u06dd\\u070f\\u08e2\\u180e\\u200b-\\u200f\\u202a-\\u202e\\u2060-\\u2064\\u2066-\\u206f\\ufdd0-\\ufdef\\ufeff\\ufff9-\\ufffb\\ufffe\\uffff]/g);\r\n// 一些需要替换成全角字符的符号，左边是正则表达式的字符\r\nUtils.fullWidthDict = [\r\n    ['\\\\\\\\', '＼'],\r\n    ['/', '／'],\r\n    [':', '：'],\r\n    ['\\\\?', '？'],\r\n    ['\"', '＂'],\r\n    ['<', '＜'],\r\n    ['>', '＞'],\r\n    ['\\\\*', '＊'],\r\n    ['\\\\|', '｜'],\r\n    ['~', '～'],\r\n];\r\n/** Windows 保留文件名，不可单独作为文件名，不区分大小写 */\r\n// 为了效率，这里把大写和小写都直接列出，避免在使用时进行转换\r\nUtils.windowsReservedNames = [\r\n    'CON',\r\n    'PRN',\r\n    'AUX',\r\n    'NUL',\r\n    'COM1',\r\n    'LPT1',\r\n    'LPT2',\r\n    'LPT3',\r\n    'COM2',\r\n    'COM3',\r\n    'COM4',\r\n    'con',\r\n    'prn',\r\n    'aux',\r\n    'nul',\r\n    'com1',\r\n    'lpt1',\r\n    'lpt2',\r\n    'lpt3',\r\n    'com2',\r\n    'com3',\r\n    'com4',\r\n];\r\nexport { Utils };\r\n"],"sourceRoot":""}